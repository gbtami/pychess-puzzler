var PychessPuzzler = (function (exports) {
    'use strict';

    function createElement$1(tagName, options) {
        return document.createElement(tagName, options);
    }
    function createElementNS(namespaceURI, qualifiedName, options) {
        return document.createElementNS(namespaceURI, qualifiedName, options);
    }
    function createDocumentFragment() {
        return parseFragment(document.createDocumentFragment());
    }
    function createTextNode(text) {
        return document.createTextNode(text);
    }
    function createComment(text) {
        return document.createComment(text);
    }
    function insertBefore(parentNode, newNode, referenceNode) {
        if (isDocumentFragment$1(parentNode)) {
            let node = parentNode;
            while (node && isDocumentFragment$1(node)) {
                const fragment = parseFragment(node);
                node = fragment.parent;
            }
            parentNode = node !== null && node !== void 0 ? node : parentNode;
        }
        if (isDocumentFragment$1(newNode)) {
            newNode = parseFragment(newNode, parentNode);
        }
        if (referenceNode && isDocumentFragment$1(referenceNode)) {
            referenceNode = parseFragment(referenceNode).firstChildNode;
        }
        parentNode.insertBefore(newNode, referenceNode);
    }
    function removeChild(node, child) {
        node.removeChild(child);
    }
    function appendChild(node, child) {
        if (isDocumentFragment$1(child)) {
            child = parseFragment(child, node);
        }
        node.appendChild(child);
    }
    function parentNode(node) {
        if (isDocumentFragment$1(node)) {
            while (node && isDocumentFragment$1(node)) {
                const fragment = parseFragment(node);
                node = fragment.parent;
            }
            return node !== null && node !== void 0 ? node : null;
        }
        return node.parentNode;
    }
    function nextSibling(node) {
        var _a;
        if (isDocumentFragment$1(node)) {
            const fragment = parseFragment(node);
            const parent = parentNode(fragment);
            if (parent && fragment.lastChildNode) {
                const children = Array.from(parent.childNodes);
                const index = children.indexOf(fragment.lastChildNode);
                return (_a = children[index + 1]) !== null && _a !== void 0 ? _a : null;
            }
            return null;
        }
        return node.nextSibling;
    }
    function tagName(elm) {
        return elm.tagName;
    }
    function setTextContent(node, text) {
        node.textContent = text;
    }
    function getTextContent(node) {
        return node.textContent;
    }
    function isElement$1(node) {
        return node.nodeType === 1;
    }
    function isText(node) {
        return node.nodeType === 3;
    }
    function isComment(node) {
        return node.nodeType === 8;
    }
    function isDocumentFragment$1(node) {
        return node.nodeType === 11;
    }
    function parseFragment(fragmentNode, parentNode) {
        var _a, _b, _c;
        const fragment = fragmentNode;
        (_a = fragment.parent) !== null && _a !== void 0 ? _a : (fragment.parent = parentNode !== null && parentNode !== void 0 ? parentNode : null);
        (_b = fragment.firstChildNode) !== null && _b !== void 0 ? _b : (fragment.firstChildNode = fragmentNode.firstChild);
        (_c = fragment.lastChildNode) !== null && _c !== void 0 ? _c : (fragment.lastChildNode = fragmentNode.lastChild);
        return fragment;
    }
    const htmlDomApi = {
        createElement: createElement$1,
        createElementNS,
        createTextNode,
        createDocumentFragment,
        createComment,
        insertBefore,
        removeChild,
        appendChild,
        parentNode,
        nextSibling,
        tagName,
        setTextContent,
        getTextContent,
        isElement: isElement$1,
        isText,
        isComment,
        isDocumentFragment: isDocumentFragment$1,
    };

    function vnode(sel, data, children, text, elm) {
        const key = data === undefined ? undefined : data.key;
        return { sel, data, children, text, elm, key };
    }

    const array = Array.isArray;
    function primitive(s) {
        return (typeof s === "string" ||
            typeof s === "number" ||
            s instanceof String ||
            s instanceof Number);
    }

    function isUndef(s) {
        return s === undefined;
    }
    function isDef(s) {
        return s !== undefined;
    }
    const emptyNode = vnode("", {}, [], undefined, undefined);
    function sameVnode(vnode1, vnode2) {
        var _a, _b;
        const isSameKey = vnode1.key === vnode2.key;
        const isSameIs = ((_a = vnode1.data) === null || _a === void 0 ? void 0 : _a.is) === ((_b = vnode2.data) === null || _b === void 0 ? void 0 : _b.is);
        const isSameSel = vnode1.sel === vnode2.sel;
        const isSameTextOrFragment = !vnode1.sel && vnode1.sel === vnode2.sel
            ? typeof vnode1.text === typeof vnode2.text
            : true;
        return isSameSel && isSameKey && isSameIs && isSameTextOrFragment;
    }
    /**
     * @todo Remove this function when the document fragment is considered stable.
     */
    function documentFragmentIsNotSupported() {
        throw new Error("The document fragment is not supported on this platform.");
    }
    function isElement(api, vnode) {
        return api.isElement(vnode);
    }
    function isDocumentFragment(api, vnode) {
        return api.isDocumentFragment(vnode);
    }
    function createKeyToOldIdx(children, beginIdx, endIdx) {
        var _a;
        const map = {};
        for (let i = beginIdx; i <= endIdx; ++i) {
            const key = (_a = children[i]) === null || _a === void 0 ? void 0 : _a.key;
            if (key !== undefined) {
                map[key] = i;
            }
        }
        return map;
    }
    const hooks = [
        "create",
        "update",
        "remove",
        "destroy",
        "pre",
        "post",
    ];
    function init(modules, domApi, options) {
        const cbs = {
            create: [],
            update: [],
            remove: [],
            destroy: [],
            pre: [],
            post: [],
        };
        const api = domApi !== undefined ? domApi : htmlDomApi;
        for (const hook of hooks) {
            for (const module of modules) {
                const currentHook = module[hook];
                if (currentHook !== undefined) {
                    cbs[hook].push(currentHook);
                }
            }
        }
        function emptyNodeAt(elm) {
            const id = elm.id ? "#" + elm.id : "";
            // elm.className doesn't return a string when elm is an SVG element inside a shadowRoot.
            // https://stackoverflow.com/questions/29454340/detecting-classname-of-svganimatedstring
            const classes = elm.getAttribute("class");
            const c = classes ? "." + classes.split(" ").join(".") : "";
            return vnode(api.tagName(elm).toLowerCase() + id + c, {}, [], undefined, elm);
        }
        function emptyDocumentFragmentAt(frag) {
            return vnode(undefined, {}, [], undefined, frag);
        }
        function createRmCb(childElm, listeners) {
            return function rmCb() {
                if (--listeners === 0) {
                    const parent = api.parentNode(childElm);
                    api.removeChild(parent, childElm);
                }
            };
        }
        function createElm(vnode, insertedVnodeQueue) {
            var _a, _b, _c, _d;
            let i;
            let data = vnode.data;
            if (data !== undefined) {
                const init = (_a = data.hook) === null || _a === void 0 ? void 0 : _a.init;
                if (isDef(init)) {
                    init(vnode);
                    data = vnode.data;
                }
            }
            const children = vnode.children;
            const sel = vnode.sel;
            if (sel === "!") {
                if (isUndef(vnode.text)) {
                    vnode.text = "";
                }
                vnode.elm = api.createComment(vnode.text);
            }
            else if (sel !== undefined) {
                // Parse selector
                const hashIdx = sel.indexOf("#");
                const dotIdx = sel.indexOf(".", hashIdx);
                const hash = hashIdx > 0 ? hashIdx : sel.length;
                const dot = dotIdx > 0 ? dotIdx : sel.length;
                const tag = hashIdx !== -1 || dotIdx !== -1
                    ? sel.slice(0, Math.min(hash, dot))
                    : sel;
                const elm = (vnode.elm =
                    isDef(data) && isDef((i = data.ns))
                        ? api.createElementNS(i, tag, data)
                        : api.createElement(tag, data));
                if (hash < dot)
                    elm.setAttribute("id", sel.slice(hash + 1, dot));
                if (dotIdx > 0)
                    elm.setAttribute("class", sel.slice(dot + 1).replace(/\./g, " "));
                for (i = 0; i < cbs.create.length; ++i)
                    cbs.create[i](emptyNode, vnode);
                if (array(children)) {
                    for (i = 0; i < children.length; ++i) {
                        const ch = children[i];
                        if (ch != null) {
                            api.appendChild(elm, createElm(ch, insertedVnodeQueue));
                        }
                    }
                }
                else if (primitive(vnode.text)) {
                    api.appendChild(elm, api.createTextNode(vnode.text));
                }
                const hook = vnode.data.hook;
                if (isDef(hook)) {
                    (_b = hook.create) === null || _b === void 0 ? void 0 : _b.call(hook, emptyNode, vnode);
                    if (hook.insert) {
                        insertedVnodeQueue.push(vnode);
                    }
                }
            }
            else if (((_c = options === null || options === void 0 ? void 0 : options.experimental) === null || _c === void 0 ? void 0 : _c.fragments) && vnode.children) {
                vnode.elm = ((_d = api.createDocumentFragment) !== null && _d !== void 0 ? _d : documentFragmentIsNotSupported)();
                for (i = 0; i < cbs.create.length; ++i)
                    cbs.create[i](emptyNode, vnode);
                for (i = 0; i < vnode.children.length; ++i) {
                    const ch = vnode.children[i];
                    if (ch != null) {
                        api.appendChild(vnode.elm, createElm(ch, insertedVnodeQueue));
                    }
                }
            }
            else {
                vnode.elm = api.createTextNode(vnode.text);
            }
            return vnode.elm;
        }
        function addVnodes(parentElm, before, vnodes, startIdx, endIdx, insertedVnodeQueue) {
            for (; startIdx <= endIdx; ++startIdx) {
                const ch = vnodes[startIdx];
                if (ch != null) {
                    api.insertBefore(parentElm, createElm(ch, insertedVnodeQueue), before);
                }
            }
        }
        function invokeDestroyHook(vnode) {
            var _a, _b;
            const data = vnode.data;
            if (data !== undefined) {
                (_b = (_a = data === null || data === void 0 ? void 0 : data.hook) === null || _a === void 0 ? void 0 : _a.destroy) === null || _b === void 0 ? void 0 : _b.call(_a, vnode);
                for (let i = 0; i < cbs.destroy.length; ++i)
                    cbs.destroy[i](vnode);
                if (vnode.children !== undefined) {
                    for (let j = 0; j < vnode.children.length; ++j) {
                        const child = vnode.children[j];
                        if (child != null && typeof child !== "string") {
                            invokeDestroyHook(child);
                        }
                    }
                }
            }
        }
        function removeVnodes(parentElm, vnodes, startIdx, endIdx) {
            var _a, _b;
            for (; startIdx <= endIdx; ++startIdx) {
                let listeners;
                let rm;
                const ch = vnodes[startIdx];
                if (ch != null) {
                    if (isDef(ch.sel)) {
                        invokeDestroyHook(ch);
                        listeners = cbs.remove.length + 1;
                        rm = createRmCb(ch.elm, listeners);
                        for (let i = 0; i < cbs.remove.length; ++i)
                            cbs.remove[i](ch, rm);
                        const removeHook = (_b = (_a = ch === null || ch === void 0 ? void 0 : ch.data) === null || _a === void 0 ? void 0 : _a.hook) === null || _b === void 0 ? void 0 : _b.remove;
                        if (isDef(removeHook)) {
                            removeHook(ch, rm);
                        }
                        else {
                            rm();
                        }
                    }
                    else if (ch.children) {
                        // Fragment node
                        invokeDestroyHook(ch);
                        removeVnodes(parentElm, ch.children, 0, ch.children.length - 1);
                    }
                    else {
                        // Text node
                        api.removeChild(parentElm, ch.elm);
                    }
                }
            }
        }
        function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue) {
            let oldStartIdx = 0;
            let newStartIdx = 0;
            let oldEndIdx = oldCh.length - 1;
            let oldStartVnode = oldCh[0];
            let oldEndVnode = oldCh[oldEndIdx];
            let newEndIdx = newCh.length - 1;
            let newStartVnode = newCh[0];
            let newEndVnode = newCh[newEndIdx];
            let oldKeyToIdx;
            let idxInOld;
            let elmToMove;
            let before;
            while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
                if (oldStartVnode == null) {
                    oldStartVnode = oldCh[++oldStartIdx]; // Vnode might have been moved left
                }
                else if (oldEndVnode == null) {
                    oldEndVnode = oldCh[--oldEndIdx];
                }
                else if (newStartVnode == null) {
                    newStartVnode = newCh[++newStartIdx];
                }
                else if (newEndVnode == null) {
                    newEndVnode = newCh[--newEndIdx];
                }
                else if (sameVnode(oldStartVnode, newStartVnode)) {
                    patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);
                    oldStartVnode = oldCh[++oldStartIdx];
                    newStartVnode = newCh[++newStartIdx];
                }
                else if (sameVnode(oldEndVnode, newEndVnode)) {
                    patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);
                    oldEndVnode = oldCh[--oldEndIdx];
                    newEndVnode = newCh[--newEndIdx];
                }
                else if (sameVnode(oldStartVnode, newEndVnode)) {
                    // Vnode moved right
                    patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);
                    api.insertBefore(parentElm, oldStartVnode.elm, api.nextSibling(oldEndVnode.elm));
                    oldStartVnode = oldCh[++oldStartIdx];
                    newEndVnode = newCh[--newEndIdx];
                }
                else if (sameVnode(oldEndVnode, newStartVnode)) {
                    // Vnode moved left
                    patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);
                    api.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
                    oldEndVnode = oldCh[--oldEndIdx];
                    newStartVnode = newCh[++newStartIdx];
                }
                else {
                    if (oldKeyToIdx === undefined) {
                        oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
                    }
                    idxInOld = oldKeyToIdx[newStartVnode.key];
                    if (isUndef(idxInOld)) {
                        // New element
                        api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm);
                    }
                    else {
                        elmToMove = oldCh[idxInOld];
                        if (elmToMove.sel !== newStartVnode.sel) {
                            api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm);
                        }
                        else {
                            patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);
                            oldCh[idxInOld] = undefined;
                            api.insertBefore(parentElm, elmToMove.elm, oldStartVnode.elm);
                        }
                    }
                    newStartVnode = newCh[++newStartIdx];
                }
            }
            if (newStartIdx <= newEndIdx) {
                before = newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].elm;
                addVnodes(parentElm, before, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
            }
            if (oldStartIdx <= oldEndIdx) {
                removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
            }
        }
        function patchVnode(oldVnode, vnode, insertedVnodeQueue) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            const hook = (_a = vnode.data) === null || _a === void 0 ? void 0 : _a.hook;
            (_b = hook === null || hook === void 0 ? void 0 : hook.prepatch) === null || _b === void 0 ? void 0 : _b.call(hook, oldVnode, vnode);
            const elm = (vnode.elm = oldVnode.elm);
            if (oldVnode === vnode)
                return;
            if (vnode.data !== undefined ||
                (isDef(vnode.text) && vnode.text !== oldVnode.text)) {
                (_c = vnode.data) !== null && _c !== void 0 ? _c : (vnode.data = {});
                (_d = oldVnode.data) !== null && _d !== void 0 ? _d : (oldVnode.data = {});
                for (let i = 0; i < cbs.update.length; ++i)
                    cbs.update[i](oldVnode, vnode);
                (_g = (_f = (_e = vnode.data) === null || _e === void 0 ? void 0 : _e.hook) === null || _f === void 0 ? void 0 : _f.update) === null || _g === void 0 ? void 0 : _g.call(_f, oldVnode, vnode);
            }
            const oldCh = oldVnode.children;
            const ch = vnode.children;
            if (isUndef(vnode.text)) {
                if (isDef(oldCh) && isDef(ch)) {
                    if (oldCh !== ch)
                        updateChildren(elm, oldCh, ch, insertedVnodeQueue);
                }
                else if (isDef(ch)) {
                    if (isDef(oldVnode.text))
                        api.setTextContent(elm, "");
                    addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
                }
                else if (isDef(oldCh)) {
                    removeVnodes(elm, oldCh, 0, oldCh.length - 1);
                }
                else if (isDef(oldVnode.text)) {
                    api.setTextContent(elm, "");
                }
            }
            else if (oldVnode.text !== vnode.text) {
                if (isDef(oldCh)) {
                    removeVnodes(elm, oldCh, 0, oldCh.length - 1);
                }
                api.setTextContent(elm, vnode.text);
            }
            (_h = hook === null || hook === void 0 ? void 0 : hook.postpatch) === null || _h === void 0 ? void 0 : _h.call(hook, oldVnode, vnode);
        }
        return function patch(oldVnode, vnode) {
            let i, elm, parent;
            const insertedVnodeQueue = [];
            for (i = 0; i < cbs.pre.length; ++i)
                cbs.pre[i]();
            if (isElement(api, oldVnode)) {
                oldVnode = emptyNodeAt(oldVnode);
            }
            else if (isDocumentFragment(api, oldVnode)) {
                oldVnode = emptyDocumentFragmentAt(oldVnode);
            }
            if (sameVnode(oldVnode, vnode)) {
                patchVnode(oldVnode, vnode, insertedVnodeQueue);
            }
            else {
                elm = oldVnode.elm;
                parent = api.parentNode(elm);
                createElm(vnode, insertedVnodeQueue);
                if (parent !== null) {
                    api.insertBefore(parent, vnode.elm, api.nextSibling(elm));
                    removeVnodes(parent, [oldVnode], 0, 0);
                }
            }
            for (i = 0; i < insertedVnodeQueue.length; ++i) {
                insertedVnodeQueue[i].data.hook.insert(insertedVnodeQueue[i]);
            }
            for (i = 0; i < cbs.post.length; ++i)
                cbs.post[i]();
            return vnode;
        };
    }

    function addNS(data, children, sel) {
        data.ns = "http://www.w3.org/2000/svg";
        if (sel !== "foreignObject" && children !== undefined) {
            for (let i = 0; i < children.length; ++i) {
                const child = children[i];
                if (typeof child === "string")
                    continue;
                const childData = child.data;
                if (childData !== undefined) {
                    addNS(childData, child.children, child.sel);
                }
            }
        }
    }
    function h(sel, b, c) {
        let data = {};
        let children;
        let text;
        let i;
        if (c !== undefined) {
            if (b !== null) {
                data = b;
            }
            if (array(c)) {
                children = c;
            }
            else if (primitive(c)) {
                text = c.toString();
            }
            else if (c && c.sel) {
                children = [c];
            }
        }
        else if (b !== undefined && b !== null) {
            if (array(b)) {
                children = b;
            }
            else if (primitive(b)) {
                text = b.toString();
            }
            else if (b && b.sel) {
                children = [b];
            }
            else {
                data = b;
            }
        }
        if (children !== undefined) {
            for (i = 0; i < children.length; ++i) {
                if (primitive(children[i]))
                    children[i] = vnode(undefined, undefined, undefined, children[i], undefined);
            }
        }
        if (sel[0] === "s" &&
            sel[1] === "v" &&
            sel[2] === "g" &&
            (sel.length === 3 || sel[3] === "." || sel[3] === "#")) {
            addNS(data, children, sel);
        }
        return vnode(sel, data, children, text, undefined);
    }

    function toVNode(node, domApi) {
        const api = domApi !== undefined ? domApi : htmlDomApi;
        let text;
        if (api.isElement(node)) {
            const id = node.id ? "#" + node.id : "";
            const cn = node.getAttribute("class");
            const c = cn ? "." + cn.split(" ").join(".") : "";
            const sel = api.tagName(node).toLowerCase() + id + c;
            const attrs = {};
            const dataset = {};
            const data = {};
            const children = [];
            let name;
            let i, n;
            const elmAttrs = node.attributes;
            const elmChildren = node.childNodes;
            for (i = 0, n = elmAttrs.length; i < n; i++) {
                name = elmAttrs[i].nodeName;
                if (name[0] === "d" &&
                    name[1] === "a" &&
                    name[2] === "t" &&
                    name[3] === "a" &&
                    name[4] === "-") {
                    dataset[name.slice(5)] = elmAttrs[i].nodeValue || "";
                }
                else if (name !== "id" && name !== "class") {
                    attrs[name] = elmAttrs[i].nodeValue;
                }
            }
            for (i = 0, n = elmChildren.length; i < n; i++) {
                children.push(toVNode(elmChildren[i], domApi));
            }
            if (Object.keys(attrs).length > 0)
                data.attrs = attrs;
            if (Object.keys(dataset).length > 0)
                data.dataset = dataset;
            if (sel[0] === "s" &&
                sel[1] === "v" &&
                sel[2] === "g" &&
                (sel.length === 3 || sel[3] === "." || sel[3] === "#")) {
                addNS(data, children, sel);
            }
            return vnode(sel, data, children, undefined, node);
        }
        else if (api.isText(node)) {
            text = api.getTextContent(node);
            return vnode(undefined, undefined, undefined, text, node);
        }
        else if (api.isComment(node)) {
            text = api.getTextContent(node);
            return vnode("!", {}, [], text, node);
        }
        else {
            return vnode("", {}, [], undefined, node);
        }
    }

    const xlinkNS = "http://www.w3.org/1999/xlink";
    const xmlNS = "http://www.w3.org/XML/1998/namespace";
    const colonChar = 58;
    const xChar = 120;
    function updateAttrs(oldVnode, vnode) {
        let key;
        const elm = vnode.elm;
        let oldAttrs = oldVnode.data.attrs;
        let attrs = vnode.data.attrs;
        if (!oldAttrs && !attrs)
            return;
        if (oldAttrs === attrs)
            return;
        oldAttrs = oldAttrs || {};
        attrs = attrs || {};
        // update modified attributes, add new attributes
        for (key in attrs) {
            const cur = attrs[key];
            const old = oldAttrs[key];
            if (old !== cur) {
                if (cur === true) {
                    elm.setAttribute(key, "");
                }
                else if (cur === false) {
                    elm.removeAttribute(key);
                }
                else {
                    if (key.charCodeAt(0) !== xChar) {
                        elm.setAttribute(key, cur);
                    }
                    else if (key.charCodeAt(3) === colonChar) {
                        // Assume xml namespace
                        elm.setAttributeNS(xmlNS, key, cur);
                    }
                    else if (key.charCodeAt(5) === colonChar) {
                        // Assume xlink namespace
                        elm.setAttributeNS(xlinkNS, key, cur);
                    }
                    else {
                        elm.setAttribute(key, cur);
                    }
                }
            }
        }
        // remove removed attributes
        // use `in` operator since the previous `for` iteration uses it (.i.e. add even attributes with undefined value)
        // the other option is to remove all attributes with value == undefined
        for (key in oldAttrs) {
            if (!(key in attrs)) {
                elm.removeAttribute(key);
            }
        }
    }
    const attributesModule = {
        create: updateAttrs,
        update: updateAttrs,
    };

    function updateClass(oldVnode, vnode) {
        let cur;
        let name;
        const elm = vnode.elm;
        let oldClass = oldVnode.data.class;
        let klass = vnode.data.class;
        if (!oldClass && !klass)
            return;
        if (oldClass === klass)
            return;
        oldClass = oldClass || {};
        klass = klass || {};
        for (name in oldClass) {
            if (oldClass[name] && !Object.prototype.hasOwnProperty.call(klass, name)) {
                // was `true` and now not provided
                elm.classList.remove(name);
            }
        }
        for (name in klass) {
            cur = klass[name];
            if (cur !== oldClass[name]) {
                elm.classList[cur ? "add" : "remove"](name);
            }
        }
    }
    const classModule = { create: updateClass, update: updateClass };

    function invokeHandler(handler, vnode, event) {
        if (typeof handler === "function") {
            // call function handler
            handler.call(vnode, event, vnode);
        }
        else if (typeof handler === "object") {
            // call multiple handlers
            for (let i = 0; i < handler.length; i++) {
                invokeHandler(handler[i], vnode, event);
            }
        }
    }
    function handleEvent(event, vnode) {
        const name = event.type;
        const on = vnode.data.on;
        // call event handler(s) if exists
        if (on && on[name]) {
            invokeHandler(on[name], vnode, event);
        }
    }
    function createListener() {
        return function handler(event) {
            handleEvent(event, handler.vnode);
        };
    }
    function updateEventListeners(oldVnode, vnode) {
        const oldOn = oldVnode.data.on;
        const oldListener = oldVnode.listener;
        const oldElm = oldVnode.elm;
        const on = vnode && vnode.data.on;
        const elm = (vnode && vnode.elm);
        let name;
        // optimization for reused immutable handlers
        if (oldOn === on) {
            return;
        }
        // remove existing listeners which no longer used
        if (oldOn && oldListener) {
            // if element changed or deleted we remove all existing listeners unconditionally
            if (!on) {
                for (name in oldOn) {
                    // remove listener if element was changed or existing listeners removed
                    oldElm.removeEventListener(name, oldListener, false);
                }
            }
            else {
                for (name in oldOn) {
                    // remove listener if existing listener removed
                    if (!on[name]) {
                        oldElm.removeEventListener(name, oldListener, false);
                    }
                }
            }
        }
        // add new listeners which has not already attached
        if (on) {
            // reuse existing listener or create new
            const listener = (vnode.listener =
                oldVnode.listener || createListener());
            // update vnode for listener
            listener.vnode = vnode;
            // if element changed or added we add all needed listeners unconditionally
            if (!oldOn) {
                for (name in on) {
                    // add listener if element was changed or new listeners added
                    elm.addEventListener(name, listener, false);
                }
            }
            else {
                for (name in on) {
                    // add listener if new listener added
                    if (!oldOn[name]) {
                        elm.addEventListener(name, listener, false);
                    }
                }
            }
        }
    }
    const eventListenersModule = {
        create: updateEventListeners,
        update: updateEventListeners,
        destroy: updateEventListeners,
    };

    function updateProps(oldVnode, vnode) {
        let key;
        let cur;
        let old;
        const elm = vnode.elm;
        let oldProps = oldVnode.data.props;
        let props = vnode.data.props;
        if (!oldProps && !props)
            return;
        if (oldProps === props)
            return;
        oldProps = oldProps || {};
        props = props || {};
        for (key in props) {
            cur = props[key];
            old = oldProps[key];
            if (old !== cur && (key !== "value" || elm[key] !== cur)) {
                elm[key] = cur;
            }
        }
    }
    const propsModule = { create: updateProps, update: updateProps };

    // Bindig `requestAnimationFrame` like this fixes a bug in IE/Edge. See #360 and #409.
    const raf = (typeof window !== "undefined" &&
        window.requestAnimationFrame.bind(window)) ||
        setTimeout;
    const nextFrame = function (fn) {
        raf(function () {
            raf(fn);
        });
    };
    let reflowForced = false;
    function setNextFrame(obj, prop, val) {
        nextFrame(function () {
            obj[prop] = val;
        });
    }
    function updateStyle(oldVnode, vnode) {
        let cur;
        let name;
        const elm = vnode.elm;
        let oldStyle = oldVnode.data.style;
        let style = vnode.data.style;
        if (!oldStyle && !style)
            return;
        if (oldStyle === style)
            return;
        oldStyle = oldStyle || {};
        style = style || {};
        const oldHasDel = "delayed" in oldStyle;
        for (name in oldStyle) {
            if (!style[name]) {
                if (name[0] === "-" && name[1] === "-") {
                    elm.style.removeProperty(name);
                }
                else {
                    elm.style[name] = "";
                }
            }
        }
        for (name in style) {
            cur = style[name];
            if (name === "delayed" && style.delayed) {
                for (const name2 in style.delayed) {
                    cur = style.delayed[name2];
                    if (!oldHasDel || cur !== oldStyle.delayed[name2]) {
                        setNextFrame(elm.style, name2, cur);
                    }
                }
            }
            else if (name !== "remove" && cur !== oldStyle[name]) {
                if (name[0] === "-" && name[1] === "-") {
                    elm.style.setProperty(name, cur);
                }
                else {
                    elm.style[name] = cur;
                }
            }
        }
    }
    function applyDestroyStyle(vnode) {
        let style;
        let name;
        const elm = vnode.elm;
        const s = vnode.data.style;
        if (!s || !(style = s.destroy))
            return;
        for (name in style) {
            elm.style[name] = style[name];
        }
    }
    function applyRemoveStyle(vnode, rm) {
        const s = vnode.data.style;
        if (!s || !s.remove) {
            rm();
            return;
        }
        if (!reflowForced) {
            // eslint-disable-next-line @typescript-eslint/no-unused-expressions
            vnode.elm.offsetLeft;
            reflowForced = true;
        }
        let name;
        const elm = vnode.elm;
        let i = 0;
        const style = s.remove;
        let amount = 0;
        const applied = [];
        for (name in style) {
            applied.push(name);
            elm.style[name] = style[name];
        }
        const compStyle = getComputedStyle(elm);
        const props = compStyle["transition-property"].split(", ");
        for (; i < props.length; ++i) {
            if (applied.indexOf(props[i]) !== -1)
                amount++;
        }
        elm.addEventListener("transitionend", function (ev) {
            if (ev.target === elm)
                --amount;
            if (amount === 0)
                rm();
        });
    }
    function forceReflow() {
        reflowForced = false;
    }
    const styleModule = {
        pre: forceReflow,
        create: updateStyle,
        update: updateStyle,
        destroy: applyDestroyStyle,
        remove: applyRemoveStyle,
    };

    const patch = init([classModule, attributesModule, propsModule, eventListenersModule, styleModule]);
    function getDocumentData(name) {
        const elm = document.getElementById('pychess-variants');
        if (elm) {
            return elm.getAttribute('data-' + name.toLowerCase());
        }
        else {
            return "";
        }
    }
    function changeCSS(cssLinkIndex, cssFile) {
        document.getElementsByTagName("link").item(cssLinkIndex).setAttribute("href", cssFile);
    }
    // css file index in templates/base.html
    const BOARD_CSS_IDX = 1;
    const PIECE_CSS_IDX = 2;
    function changeBoardCSS(assetUrl, family, cssFile) {
        const sheet = document.styleSheets[BOARD_CSS_IDX];
        const cssRules = sheet.cssRules;
        for (let i = 0; i < cssRules.length; i++) {
            const rule = cssRules[i];
            if (!(rule instanceof CSSStyleRule)) {
                continue;
            }
            if (rule.selectorText === `.${family} cg-board`) {
                // console.log("changeBoardCSS", family, cssFile, i)
                sheet.deleteRule(i);
                const newRule = `.${family} cg-board {background-image: url(${assetUrl}/images/board/${cssFile})}`;
                // console.log(newRule);
                sheet.insertRule(newRule, i);
                break;
            }
        }
    }
    function changePieceCSS(assetUrl, family, cssFile) {
        let cssLinkIndex = PIECE_CSS_IDX;
        switch (family) {
            case "standard": break;
            case "seirawan":
                cssLinkIndex += 1;
                break;
            case "makruk":
                cssLinkIndex += 2;
                break;
            case "sittuyin":
                cssLinkIndex += 3;
                break;
            case "asean":
                cssLinkIndex += 4;
                break;
            case "shogi":
                cssLinkIndex += 5;
                break;
            case "kyoto":
                cssLinkIndex += 6;
                break;
            case "tori":
                cssLinkIndex += 7;
                break;
            case "xiangqi":
                cssLinkIndex += 8;
                break;
            case "capa":
                cssLinkIndex += 9;
                break;
            case "shako":
                cssLinkIndex += 10;
                break;
            case "shogun":
                cssLinkIndex += 11;
                break;
            case "janggi":
                cssLinkIndex += 12;
                break;
            case "orda":
                cssLinkIndex += 13;
                break;
            case "synochess":
                cssLinkIndex += 14;
                break;
            case "hoppel":
                cssLinkIndex += 15;
                break;
            case "dobutsu":
                cssLinkIndex += 16;
                break;
            case "shinobi":
                cssLinkIndex += 17;
                break;
            case "empire":
                cssLinkIndex += 18;
                break;
            case "ordamirror":
                cssLinkIndex += 19;
                break;
            case "chak":
                cssLinkIndex += 20;
                break;
            case "chennis":
                cssLinkIndex += 21;
                break;
            default: throw "Unknown piece family " + family;
        }
        const newUrl = `${assetUrl}/piece/${family}/${cssFile}.css`;
        // console.log("changePieceCSS", family, cssFile, newUrl)
        changeCSS(cssLinkIndex, newUrl);
    }
    function bind(eventName, f, redraw) {
        return {
            insert(vnode) {
                var _a;
                (_a = vnode.elm) === null || _a === void 0 ? void 0 : _a.addEventListener(eventName, (e) => {
                    const res = f(e);
                    if (redraw)
                        redraw();
                    return res;
                });
            }
        };
    }

    const colors = ['white', 'black'];
    const files$1 = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p'];
    const ranks$1 = ['1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=', '>', '?', '@'];
    const letters = [
        'a',
        'b',
        'c',
        'd',
        'e',
        'f',
        'g',
        'h',
        'i',
        'j',
        'k',
        'l',
        'm',
        'n',
        'o',
        'p',
        'q',
        'r',
        's',
        't',
        'u',
        'v',
        'w',
        'x',
        'y',
        'z',
    ];

    const invRanks = [...ranks$1].reverse();
    function files(n) {
        return files$1.slice(0, n);
    }
    function ranks(n) {
        return ranks$1.slice(0, n);
    }
    function allKeys(bd) {
        return Array.prototype.concat(...files(bd.width).map(c => ranks(bd.height).map(r => c + r)));
    }
    function allPos(bd) {
        return allKeys(bd).map(key2pos);
    }
    const pos2key = (pos) => (files$1[pos[0]] + ranks$1[pos[1]]);
    const key2pos = (k) => [k.charCodeAt(0) - 97, k.charCodeAt(1) - 49];
    function roleOf(letter) {
        return (letter.replace('+', 'p').replace('*', '_').replace('@', '').toLowerCase() + '-piece');
    }
    function letterOf(role, uppercase = false) {
        const letterPart = role.slice(0, role.indexOf('-'));
        const letter = (letterPart.length > 1 ? letterPart.replace('p', '+') : letterPart).replace('_', '*');
        return (uppercase ? letter.toUpperCase() : letter);
    }
    function dropOrigOf(role) {
        return (letterOf(role, true) + '@');
    }
    function isDropOrig(orig) {
        return orig[0] === orig[0].toUpperCase();
    }
    function isKey(selectable) {
        return typeof selectable === 'string' && selectable[0] === selectable[0].toLowerCase();
    }
    function isPiece(selectable) {
        return typeof selectable !== 'string';
    }
    function isSame(lhs, rhs) {
        if (isPiece(lhs) && isPiece(rhs))
            return samePiece(lhs, rhs);
        else
            return lhs === rhs;
    }
    function changeNumber(map, key, num) {
        var _a;
        map.set(key, ((_a = map.get(key)) !== null && _a !== void 0 ? _a : 0) + num);
    }
    function memo(f) {
        let v;
        const ret = () => {
            if (v === undefined)
                v = f();
            return v;
        };
        ret.clear = () => {
            v = undefined;
        };
        return ret;
    }
    const timer = () => {
        let startAt;
        return {
            start() {
                startAt = performance.now();
            },
            cancel() {
                startAt = undefined;
            },
            stop() {
                if (!startAt)
                    return 0;
                const time = performance.now() - startAt;
                startAt = undefined;
                return time;
            },
        };
    };
    const opposite = (c) => (c === 'white' ? 'black' : 'white');
    const samePiece = (p1, p2) => p1.role === p2.role && p1.color === p2.color && !!p1.promoted === !!p2.promoted;
    const pieceSide = (p, o) => (p.color === o ? 'ally' : 'enemy');
    const pieceClasses = (p, o) => `${p.color} ${pieceSide(p, o)} ${p.promoted ? 'promoted ' : ''}${p.role}`;
    const distanceSq = (pos1, pos2) => {
        const dx = pos1[0] - pos2[0], dy = pos1[1] - pos2[1];
        return dx * dx + dy * dy;
    };
    const posToTranslate = (bounds, bd) => (pos, asWhite) => [
        ((asWhite ? pos[0] : bd.width - 1 - pos[0]) * bounds.width) / bd.width,
        ((asWhite ? bd.height - 1 - pos[1] : pos[1]) * bounds.height) / bd.height,
    ];
    const translate = (el, pos) => {
        el.style.transform = `translate(${pos[0]}px,${pos[1]}px)`;
    };
    const translateAndScale = (el, pos, scale = 1) => {
        el.style.transform = `translate(${pos[0]}px,${pos[1]}px) scale(${scale})`;
    };
    const setVisible = (el, v) => {
        el.style.visibility = v ? 'visible' : 'hidden';
    };
    const eventPosition = (e) => {
        var _a;
        if (e.clientX || e.clientX === 0)
            return [e.clientX, e.clientY];
        if ((_a = e.targetTouches) === null || _a === void 0 ? void 0 : _a[0])
            return [e.targetTouches[0].clientX, e.targetTouches[0].clientY];
        return; // touchend has no position!
    };
    const isRightButton = (e) => e.buttons === 2 || e.button === 2;
    const createEl = (tagName, className) => {
        const el = document.createElement(tagName);
        if (className)
            el.className = className;
        return el;
    };
    const isMiniBoard = (el) => {
        return Array.from(el.classList).includes('mini');
    };
    function computeSquareCenter(key, asWhite, bounds, bd) {
        const pos = key2pos(key);
        if (!asWhite) {
            pos[0] = bd.width - 1 - pos[0];
            pos[1] = bd.height - 1 - pos[1];
        }
        return [
            bounds.left + (bounds.width * (pos[0] + 0.5)) / bd.width,
            bounds.top + (bounds.height * (bd.height - pos[1] - 0.5)) / bd.height,
        ];
    }

    const initial = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR';
    function read(fen, bd) {
        const piecesPart = fen.split(' ')[0];
        const bracketIdx = piecesPart.indexOf('[');
        let boardPart;
        let pocketPart;
        if (bracketIdx > -1) {
            boardPart = piecesPart.slice(0, bracketIdx);
            pocketPart = piecesPart.slice(bracketIdx + 1, piecesPart.indexOf(']'));
        }
        else {
            const ranks = piecesPart.split('/');
            boardPart = ranks.slice(0, bd.height).join('/');
            // Handle "pocket after an extra slash" format
            pocketPart = ranks.length > bd.height ? ranks[bd.height] : undefined;
        }
        return {
            pieces: readBoard(boardPart),
            pockets: readPockets(pocketPart),
        };
    }
    function readBoard(fen) {
        if (fen === 'start')
            fen = initial;
        const pieces = new Map();
        let row = fen.split('/').length - 1;
        let col = 0;
        let promoted = false;
        let num = 0;
        for (const c of fen) {
            switch (c) {
                case ' ':
                case '[':
                    return pieces;
                case '/':
                    --row;
                    if (row < 0)
                        return pieces;
                    col = 0;
                    num = 0;
                    break;
                case '+':
                    promoted = true;
                    break;
                case '~': {
                    const piece = pieces.get(pos2key([col - 1, row]));
                    if (piece)
                        piece.promoted = true;
                    break;
                }
                default: {
                    const nb = c.charCodeAt(0);
                    if (48 <= nb && nb < 58) {
                        num = 10 * num + nb - 48;
                    }
                    else {
                        col += num;
                        num = 0;
                        const letter = c.toLowerCase();
                        const piece = {
                            role: roleOf(letter),
                            color: (c === letter ? 'black' : 'white'),
                        };
                        if (promoted) {
                            piece.role = ('p' + piece.role);
                            piece.promoted = true;
                            promoted = false;
                        }
                        pieces.set(pos2key([col, row]), piece);
                        ++col;
                    }
                }
            }
        }
        return pieces;
    }
    function readPockets(pocketStr) {
        if (pocketStr !== undefined) {
            const whitePocket = new Map();
            const blackPocket = new Map();
            for (const p of pocketStr) {
                const role = roleOf(p);
                if (/[A-Z]/.test(p))
                    changeNumber(whitePocket, role, 1);
                else if (/[a-z]/.test(p))
                    changeNumber(blackPocket, role, 1);
            }
            return {
                white: whitePocket,
                black: blackPocket,
            };
        }
        else {
            return undefined;
        }
    }
    function write(boardState, bd) {
        return writeBoard(boardState.pieces, bd) + writePockets(boardState.pockets);
    }
    function writeBoard(pieces, bd) {
        return invRanks
            .slice(-bd.height)
            .map(y => files$1
            .slice(0, bd.width)
            .map(x => {
            const piece = pieces.get((x + y));
            if (piece) {
                let p = letterOf(piece.role, piece.color === 'white');
                if (piece.promoted && p.charAt(0) !== '+')
                    p += '~';
                return p;
            }
            else
                return '1';
        })
            .join(''))
            .join('/')
            .replace(/1{2,}/g, s => s.length.toString());
    }
    function writePockets(pockets) {
        if (pockets)
            return '[' + writePocket(pockets.white, true) + writePocket(pockets.black, false) + ']';
        else
            return '';
    }
    function writePocket(pocket, asWhite) {
        const letters = [];
        for (const [r, n] of pocket.entries())
            letters.push(letterOf(r, asWhite).repeat(n));
        return letters.join('');
    }

    /*! gettext.js - Guillaume Potier - MIT Licensed */
    var i18n$1 = function (options) {
     options = options || {};
     this && (this.__version = '1.1.1');

     // default values that could be overriden in i18n() construct
     var defaults = {
       domain: 'messages',
       locale: (typeof document !== 'undefined' ? document.documentElement.getAttribute('lang') : false) || 'en',
       plural_func: function (n) { return { nplurals: 2, plural: (n!=1) ? 1 : 0 }; },
       ctxt_delimiter: String.fromCharCode(4) // \u0004
     };

     // handy mixins taken from underscode.js
     var _ = {
       isObject: function (obj) {
         var type = typeof obj;
         return type === 'function' || type === 'object' && !!obj;
       },
       isArray: function (obj) {
         return toString.call(obj) === '[object Array]';
       }
     };

     var
       _plural_funcs = {},
       _locale = options.locale || defaults.locale,
       _domain = options.domain || defaults.domain,
       _dictionary = {},
       _plural_forms = {},
       _ctxt_delimiter = options.ctxt_delimiter || defaults.ctxt_delimiter;

       if (options.messages) {
         _dictionary[_domain] = {};
         _dictionary[_domain][_locale] = options.messages;
       }

       if (options.plural_forms) {
         _plural_forms[_locale] = options.plural_forms;
       }

       // sprintf equivalent, takes a string and some arguments to make a computed string
       // eg: strfmt("%1 dogs are in %2", 7, "the kitchen"); => "7 dogs are in the kitchen"
       // eg: strfmt("I like %1, bananas and %1", "apples"); => "I like apples, bananas and apples"
       // NB: removes msg context if there is one present
       var strfmt = function (fmt) {
          var args = arguments;

          return fmt
           // put space after double % to prevent placeholder replacement of such matches
           .replace(/%%/g, '%% ')
           // replace placeholders
           .replace(/%(\d+)/g, function (str, p1) {
             return args[p1];
           })
           // replace double % and space with single %
           .replace(/%% /g, '%')
       };

       var removeContext = function(str) {
          // if there is context, remove it
          if (str.indexOf(_ctxt_delimiter) !== -1) {
            var parts = str.split(_ctxt_delimiter);
            return parts[1];
          }

        return str;
       };

       var expand_locale = function(locale) {
           var locales = [locale],
               i = locale.lastIndexOf('-');
           while (i > 0) {
               locale = locale.slice(0, i);
               locales.push(locale);
               i = locale.lastIndexOf('-');
           }
           return locales;
       };

       var normalizeLocale = function (locale) {
          // Convert locale to BCP 47. If the locale is in POSIX format, locale variant and encoding is discarded.
          locale = locale.replace('_', '-');
          var i = locale.search(/[.@]/);
          if (i != -1) locale = locale.slice(0, i);
          return locale;
       };

       var getPluralFunc = function (plural_form) {
         // Plural form string regexp
         // taken from https://github.com/Orange-OpenSource/gettext.js/blob/master/lib.gettext.js
         // plural forms list available here http://localization-guide.readthedocs.org/en/latest/l10n/pluralforms.html
         var pf_re = new RegExp('^\\s*nplurals\\s*=\\s*[0-9]+\\s*;\\s*plural\\s*=\\s*(?:\\s|[-\\?\\|&=!<>+*/%:;n0-9_\(\)])+');

         if (!pf_re.test(plural_form))
           throw new Error(strfmt('The plural form "%1" is not valid', plural_form));

         // Careful here, this is a hidden eval() equivalent..
         // Risk should be reasonable though since we test the plural_form through regex before
         // taken from https://github.com/Orange-OpenSource/gettext.js/blob/master/lib.gettext.js
         // TODO: should test if https://github.com/soney/jsep present and use it if so
         return new Function("n", 'var plural, nplurals; '+ plural_form +' return { nplurals: nplurals, plural: (plural === true ? 1 : (plural ? plural : 0)) };');
       };

       // Proper translation function that handle plurals and directives
       // Contains juicy parts of https://github.com/Orange-OpenSource/gettext.js/blob/master/lib.gettext.js
       var t = function (messages, n, options /* ,extra */) {
         // Singular is very easy, just pass dictionnary message through strfmt
         if (!options.plural_form)
          return strfmt.apply(this, [removeContext(messages[0])].concat(Array.prototype.slice.call(arguments, 3)));

         var plural;

         // if a plural func is given, use that one
         if (options.plural_func) {
           plural = options.plural_func(n);

         // if plural form never interpreted before, do it now and store it
         } else if (!_plural_funcs[_locale]) {
           _plural_funcs[_locale] = getPluralFunc(_plural_forms[_locale]);
           plural = _plural_funcs[_locale](n);

         // we have the plural function, compute the plural result
         } else {
           plural = _plural_funcs[_locale](n);
         }

         // If there is a problem with plurals, fallback to singular one
         if ('undefined' === typeof plural.plural || plural.plural > plural.nplurals || messages.length <= plural.plural)
           plural.plural = 0;

         return strfmt.apply(this, [removeContext(messages[plural.plural]), n].concat(Array.prototype.slice.call(arguments, 3)));
       };

     return {
       strfmt: strfmt, // expose strfmt util
       expand_locale: expand_locale, // expose expand_locale util

       // Declare shortcuts
       __: function () { return this.gettext.apply(this, arguments); },
       _n: function () { return this.ngettext.apply(this, arguments); },
       _p: function () { return this.pgettext.apply(this, arguments); },

       setMessages: function (domain, locale, messages, plural_forms) {
         if (!domain || !locale || !messages)
           throw new Error('You must provide a domain, a locale and messages');

         if ('string' !== typeof domain || 'string' !== typeof locale || !_.isObject(messages))
           throw new Error('Invalid arguments');

         locale = normalizeLocale(locale);

         if (plural_forms)
           _plural_forms[locale] = plural_forms;

         if (!_dictionary[domain])
           _dictionary[domain] = {};

         _dictionary[domain][locale] = messages;

         return this;
       },
       loadJSON: function (jsonData, domain) {
         if (!_.isObject(jsonData))
           jsonData = JSON.parse(jsonData);

         if (!jsonData[''] || !jsonData['']['language'] || !jsonData['']['plural-forms'])
           throw new Error('Wrong JSON, it must have an empty key ("") with "language" and "plural-forms" information');

         var headers = jsonData[''];
         delete jsonData[''];

         return this.setMessages(domain || defaults.domain, headers['language'], jsonData, headers['plural-forms']);
       },
       setLocale: function (locale) {
         _locale = normalizeLocale(locale);
         return this;
       },
       getLocale: function () {
         return _locale;
       },
       // getter/setter for domain
       textdomain: function (domain) {
         if (!domain)
           return _domain;
         _domain = domain;
         return this;
       },
       gettext: function (msgid /* , extra */) {
         return this.dcnpgettext.apply(this, [undefined, undefined, msgid, undefined, undefined].concat(Array.prototype.slice.call(arguments, 1)));
       },
       ngettext: function (msgid, msgid_plural, n /* , extra */) {
         return this.dcnpgettext.apply(this, [undefined, undefined, msgid, msgid_plural, n].concat(Array.prototype.slice.call(arguments, 3)));
       },
       pgettext: function (msgctxt, msgid /* , extra */) {
         return this.dcnpgettext.apply(this, [undefined, msgctxt, msgid, undefined, undefined].concat(Array.prototype.slice.call(arguments, 2)));
       },
       dcnpgettext: function (domain, msgctxt, msgid, msgid_plural, n /* , extra */) {
         domain = domain || _domain;

         if ('string' !== typeof msgid)
           throw new Error(this.strfmt('Msgid "%1" is not a valid translatable string', msgid));

         var
           translation,
           options = { plural_form: false },
           key = msgctxt ? msgctxt + _ctxt_delimiter + msgid : msgid,
           exist,
           locale,
           locales = expand_locale(_locale);

         for (var i in locales) {
            locale = locales[i];
            exist = _dictionary[domain] && _dictionary[domain][locale] && _dictionary[domain][locale][key];

            // because it's not possible to define both a singular and a plural form of the same msgid,
            // we need to check that the stored form is the same as the expected one.
            // if not, we'll just ignore the translation and consider it as not translated.
            if (msgid_plural) {
              exist = exist && "string" !== typeof _dictionary[domain][locale][key];
            } else {
              exist = exist && "string" === typeof _dictionary[domain][locale][key];
            }
            if (exist) {
              break;
            }
         }

         if (!exist) {
           translation = msgid;
           options.plural_func = defaults.plural_func;
         } else {
           translation = _dictionary[domain][locale][key];
         }

         // Singular form
         if (!msgid_plural)
           return t.apply(this, [[translation], n, options].concat(Array.prototype.slice.call(arguments, 5)));

         // Plural one
         options.plural_form = true;
         return t.apply(this, [exist ? translation : [msgid, msgid_plural], n, options].concat(Array.prototype.slice.call(arguments, 5)));
       }
     };
    };

    class Settings {
        constructor(name) {
            this.name = name;
        }
        get value() {
            return this._value;
        }
        set value(value) {
            // TODO some mechanism to save settings to server
            localStorage[this.name] = value;
            this._value = value;
            this.update();
        }
    }
    class StringSettings extends Settings {
        constructor(name, defaultValue) {
            var _a, _b;
            super(name);
            this._value = (_b = (_a = getDocumentData(name)) !== null && _a !== void 0 ? _a : localStorage[name]) !== null && _b !== void 0 ? _b : defaultValue;
        }
    }
    class NumberSettings extends Settings {
        constructor(name, defaultValue) {
            var _a, _b;
            super(name);
            this._value = Number((_a = getDocumentData(name)) !== null && _a !== void 0 ? _a : ((_b = localStorage[name]) !== null && _b !== void 0 ? _b : defaultValue));
        }
    }
    class BooleanSettings extends Settings {
        constructor(name, defaultValue) {
            super(name);
            if (getDocumentData(name))
                this._value = getDocumentData(name) === 'True';
            else if (localStorage[name])
                this._value = localStorage[name] === 'true';
            else
                this._value = defaultValue;
        }
    }

    function promisifyRequest(request) {
        return new Promise((resolve, reject) => {
            // @ts-ignore - file size hacks
            request.oncomplete = request.onsuccess = () => resolve(request.result);
            // @ts-ignore - file size hacks
            request.onabort = request.onerror = () => reject(request.error);
        });
    }
    function createStore(dbName, storeName) {
        const request = indexedDB.open(dbName);
        request.onupgradeneeded = () => request.result.createObjectStore(storeName);
        const dbp = promisifyRequest(request);
        return (txMode, callback) => dbp.then((db) => callback(db.transaction(storeName, txMode).objectStore(storeName)));
    }
    let defaultGetStoreFunc;
    function defaultGetStore() {
        if (!defaultGetStoreFunc) {
            defaultGetStoreFunc = createStore('keyval-store', 'keyval');
        }
        return defaultGetStoreFunc;
    }
    /**
     * Get a value by its key.
     *
     * @param key
     * @param customStore Method to get a custom store. Use with caution (see the docs).
     */
    function get(key, customStore = defaultGetStore()) {
        return customStore('readonly', (store) => promisifyRequest(store.get(key)));
    }
    /**
     * Set a value with a key.
     *
     * @param key
     * @param value
     * @param customStore Method to get a custom store. Use with caution (see the docs).
     */
    function set(key, value, customStore = defaultGetStore()) {
        return customStore('readwrite', (store) => {
            store.put(value, key);
            return promisifyRequest(store.transaction);
        });
    }
    /**
     * Delete a particular key from the store.
     *
     * @param key
     * @param customStore Method to get a custom store. Use with caution (see the docs).
     */
    function del(key, customStore = defaultGetStore()) {
        return customStore('readwrite', (store) => {
            store.delete(key);
            return promisifyRequest(store.transaction);
        });
    }

    function radioList(settings, name, options, onchange) {
        const result = [];
        Object.keys(options).forEach(key => {
            const id = name + "-" + key;
            result.push(h(`input#${id}`, {
                props: { name: name, type: "radio", value: key },
                attrs: { checked: settings.value === key },
                on: { change: evt => onchange(evt, key) },
            }));
            result.push(h('label', { attrs: { for: id } }, options[key]));
        });
        return result;
    }
    function slider(settings, name, min = 0, max = 100, step = 1, text) {
        const id = name;
        return [
            h(`input#${id}.slider`, {
                props: { name: name, type: "range", min: min, max: max, step: step, value: settings.value },
                on: { input: e => settings.value = Number(e.target.value) },
            }),
            h('label', { attrs: { for: id } }, text),
        ];
    }
    function checkbox(settings, name, text) {
        const id = name;
        return [
            h(`input#${id}`, {
                props: { name: name, type: "checkbox" },
                attrs: { checked: settings.value },
                on: { change: evt => settings.value = evt.target.checked },
            }),
            h('label', { attrs: { for: id } }, text),
        ];
    }
    function nnueFile(settings, name, text, variant) {
        const id = name;
        return [
            h(`input#${id}`, {
                props: { name: name, type: "file", accept: '*.nnue', title: _('Page reload required after change') },
                on: { change: evt => {
                        const files = evt.target.files;
                        if (files && files.length > 0) {
                            const fileName = files[0].name;
                            if (possibleNnueFile(fileName, variant)) {
                                settings.value = '';
                                console.log("Selected file:", fileName);
                                get(`${variant}--nnue-file`).then((nnuefile) => {
                                    if (nnuefile === undefined) {
                                        // First time .nnue file selection ever for this variant
                                        saveNnueFileToIdb(settings, variant, files[0]);
                                    }
                                    else {
                                        if (nnuefile === fileName) {
                                            console.log(variant, 'is already in idb.');
                                        }
                                        else {
                                            // Delete old file name version info
                                            del(`${variant}--nnue-file`);
                                            // Update idb with new .nnue file 
                                            saveNnueFileToIdb(settings, variant, files[0]);
                                        }
                                    }
                                });
                            }
                        }
                    } },
            }),
            h('label', { attrs: { for: id } }, text),
        ];
    }
    function saveNnueFileToIdb(settings, variant, file) {
        const fileName = file.name;
        var fileReader = new FileReader();
        fileReader.onload = function (event) {
            set(`${variant}--nnue-data`, event.target.result)
                .then(() => {
                set(`${variant}--nnue-file`, fileName)
                    .then((nnuefile) => {
                    settings.value = fileName;
                    console.log(`${nnuefile} saved!`);
                })
                    .catch((err) => {
                    alert(err);
                });
            })
                .catch((err) => {
                alert(err);
            });
        };
        fileReader.readAsArrayBuffer(file);
    }
    function possibleNnueFile(fileName, variant) {
        let possible;
        let prefix;
        switch (variant) {
            case 'chess':
            case 'placement':
                prefix = 'nn';
                break;
            case 'cambodian':
                prefix = 'makruk';
                break;
            default:
                prefix = variant;
        }
        possible = fileName.startsWith(`${prefix}-`);
        if (!possible) {
            alert(`.nnue file name required to start with ${prefix}-`);
        }
        return possible;
    }

    const i18n = i18n$1();
    function _(msgid, ...vars) { return i18n.gettext(msgid, vars); }
    const LANGUAGES = {
        en: "English",
        de: "Deutsch",
        es: "Español",
        fr: "Français",
        gl_ES: "Galego",
        hu: "Magyar",
        it: "Italiano",
        ja: "日本語",
        ko: "한국어",
        nl: "Nederlands",
        pl: "Polskie",
        pt: "Português",
        ru: "Pусский",
        th: "ไทย",
        tr: "Türkçe",
        zh_CN: "简体中文",
        zh_TW: "繁體中文",
    };
    window.navigator.language.slice(0, 2);
    // Do not use
    // These lists are only here to mark these texts translatable
    // Use the regular translate functions if these words are determined at runtime
    [
        _("White"), _("Black"), _("Red"),
        _("Blue"), _("Gold"), _("Pink"),
        _("Green"),
    ];
    [
        _("chess"), _("crazyhouse"), _("placement"), _("atomic"),
        _("makruk"), _("makpong"), _("ouk chaktrang"), _("sittuyin"), _("asean"),
        _("shogi"), _("minishogi"), _("kyoto shogi"),
        _("dobutsu"), _("gorogoro"), _("gorogoro+"), _("tori shogi"),
        _("xiangqi"), _("manchu"), _("janggi"), _("minixiangqi"),
        _("capablanca"), _("capahouse"), _("s-chess"), _("s-house"),
        _("grand"), _("grandhouse"), _("shako"), _("shogun"), _("hoppel-poppel"),
        _("orda"), _("synochess"), _("shinobi"), _("empire"), _("orda mirror"), _("chak"), _("chennis"),
    ];
    [
        _('PawnsPushed'), _('PawnsPassed'), _('UpsideDown'), _('Theban'), _('No castle'),
        _('Lance HC'), _('Bishop HC'), _('Rook HC'), _('Rook+Lance HC'), _('2-Piece HC'), _('4-Piece HC'), _('6-Piece HC'), _('8-Piece HC'), _('9-Piece HC'), _('10-Piece HC'),
        _('Gorogoro Plus N+L'), _('Original (No N+L)'),
        _('Left Quail HC'), _('Falcon HC'), _('Falcon + Left Quail HC'), _('Falcon + Both Quails HC'),
        _('Bird'), _('Carrera'), _('Gothic'), _('Embassy'), _('Conservative'),
    ];
    class LanguageSettings extends StringSettings {
        constructor() {
            super('lang', 'en');
        }
        update() {
        }
        view() {
            const langList = radioList(this, 'lang', LANGUAGES, (evt, key) => {
                this.value = key;
                evt.target.form.submit();
            });
            return h('div#settings-lang', [
                h('form.radio-list', { props: { method: "post", action: "/translation/select" } }, langList),
            ]);
        }
    }
    new LanguageSettings();

    function equivalentRole(variant, role) {
        if (variant.captureToHand) {
            if (role.indexOf('-') > 1)
                return role.slice(1);
            else
                return role;
        }
        else {
            // This is the exception to the "no checking variant name directly" rule
            //         since these info is highly variant-specific
            switch (variant.name) {
                case 'shinobi':
                    switch (role) {
                        case 'pl-piece': return 'r-piece';
                        case 'ph-piece': return 'n-piece';
                        case 'pm-piece': return 'b-piece';
                        case 'pp-piece': return 'c-piece';
                        default: return role;
                    }
                case 'chak':
                    if (role === 'pk-piece')
                        return 'k-piece';
                    else
                        return role;
                default:
                    return role;
            }
        }
    }
    function calculateMaterialDiff(variant, fen) {
        var _a, _b, _c;
        if (!fen)
            fen = variant.startFen;
        const materialDiff = new Map();
        const boardState = read(fen, variant.boardDimensions);
        for (const [_, piece] of boardState.pieces) {
            const letter = equivalentRole(variant, piece.role);
            const num = (_a = materialDiff.get(letter)) !== null && _a !== void 0 ? _a : 0;
            materialDiff.set(letter, (piece.color === 'white') ? num - 1 : num + 1);
        }
        if (boardState.pockets) {
            for (const [role, count] of boardState.pockets.white.entries()) {
                const letter = equivalentRole(variant, role);
                const num = (_b = materialDiff.get(letter)) !== null && _b !== void 0 ? _b : 0;
                materialDiff.set(letter, num - count);
            }
            for (const [role, count] of boardState.pockets.black.entries()) {
                const letter = equivalentRole(variant, role);
                const num = (_c = materialDiff.get(letter)) !== null && _c !== void 0 ? _c : 0;
                materialDiff.set(letter, num + count);
            }
        }
        return materialDiff;
    }

    const BOARD_FAMILIES = {
        standard8x8: { dimensions: { width: 8, height: 8 }, cg: "cg-512", boardCSS: ["8x8brown.svg", "8x8blue.svg", "8x8green.svg", "8x8maple.jpg", "8x8olive.jpg", "8x8santa.png", "8x8wood2.jpg", "8x8wood4.jpg", "8x8ic.svg", "8x8purple.svg"] },
        standard10x8: { dimensions: { width: 10, height: 8 }, cg: "cg-640", boardCSS: ["10x8brown.svg", "10x8blue.svg", "10x8green.svg", "10x8maple.jpg", "10x8olive.jpg"] },
        standard10x10: { dimensions: { width: 10, height: 10 }, cg: "cg-640-640", boardCSS: ["10x10brown.svg", "10x10blue.svg", "10x10green.svg", "10x10maple.jpg", "10x10olive.jpg"] },
        grand10x10: { dimensions: { width: 10, height: 10 }, cg: "cg-640-640", boardCSS: ["Grandboard.svg", "10x10brown.svg", "10x10blue.svg", "10x10green.svg", "10x10maple.jpg", "10x10mapleGrand.png"] },
        makruk8x8: { dimensions: { width: 8, height: 8 }, cg: "cg-512", boardCSS: ["makruk2.svg", "makruk.svg", "makrukWhite.svg", "makruk.jpg", "makrukWood.png"] },
        sittuyin8x8: { dimensions: { width: 8, height: 8 }, cg: "cg-512", boardCSS: ["sittuyin2.svg", "sittuyin.svg", "sittuyin.jpg", "sittuyingreen.svg", "sittuyinGrainBrown.svg", "sittuyinWood.png"] },
        shogi9x9: { dimensions: { width: 9, height: 9 }, cg: "cg-576", boardCSS: ["shogi.svg", "Shogiban1.png", "Shogiban2.png", "shogic.svg", "ShogiMaple.png", 'ShogiGrayTexture.png', "ShogiSpace1.svg", "dobutsu.png", "ShogiOak.png"] },
        shogi7x7: { dimensions: { width: 7, height: 7 }, cg: "cg-448-516", boardCSS: ["ToriPlain.svg", "ToriWood.svg", "ToriDaySky.svg", "ToriNightSky.svg"] },
        shogi5x5: { dimensions: { width: 5, height: 5 }, cg: "cg-260", boardCSS: ["minishogi.svg", "MiniboardWood1.png", "MiniboardWood2.png", "MinishogiDobutsu.svg", "MinishogiDobutsu2.svg"] },
        shogi5x6: { dimensions: { width: 5, height: 6 }, cg: "cg-260-360", boardCSS: ["gorogoro.svg", "gorogoroboard.svg", "gorogoro2.svg", "GorogoroWood.png"] },
        shogi3x4: { dimensions: { width: 3, height: 4 }, cg: "cg-156", boardCSS: ["doubutsuboard.svg", "dobutsu3x4.svg"] },
        xiangqi9x10: { dimensions: { width: 9, height: 10 }, cg: "cg-576-640", boardCSS: ["xiangqi.svg", "xiangqic.svg", "xiangqiCTexture.png", "xiangqiPaper.png", "xiangqiWood.png", "xiangqiDark.svg", "xiangqiWikimedia.svg", "xiangqiLightWood.png", "xiangqiSand.svg"] },
        xiangqi7x7: { dimensions: { width: 7, height: 7 }, cg: "cg-448", boardCSS: ["minixiangqi.svg", "minixiangqiw.png", "minixqlg.svg"] },
        janggi9x10: { dimensions: { width: 9, height: 10 }, cg: "cg-576-640", boardCSS: ["JanggiBrown.svg", "JanggiPaper.png", "JanggiWood.png", "JanggiDark.svg", "JanggiWoodDark.svg", "JanggiStone.svg"] },
        shogun8x8: { dimensions: { width: 8, height: 8 }, cg: "cg-512", boardCSS: ["ShogunPlain.svg", "ShogunMaple.png", "ShogunMaple2.png", "ShogunBlue.svg", "8x8brown.svg", "8x8maple.jpg"] },
        chak9x9: { dimensions: { width: 9, height: 9 }, cg: "cg-540", boardCSS: ["StandardChakBoard.svg", "ColoredChakBoard.svg", "ChakArt.jpg"] },
        chennis7x7: { dimensions: { width: 7, height: 7 }, cg: "cg-448", boardCSS: ["WimbledonBoard.svg", "FrenchOpenBoard.svg", "USOpenBoard.svg"] },
    };
    const PIECE_FAMILIES = {
        standard: { pieceCSS: ["standard", "green", "alpha", "chess_kaneo", "santa", "maestro", "dubrovny", "disguised", "atopdown"] },
        capa: { pieceCSS: ["capa0", "capa1", "capa2", "capa3", "capa4", "capa5", "disguised"] },
        seirawan: { pieceCSS: ["seir1", "seir0", "seir2", "seir3", "seir4", "seir5", "disguised"] },
        makruk: { pieceCSS: ["makrukwb", "makrukwr", "makruk", "makruks", "makruki", "disguised"] },
        sittuyin: { pieceCSS: ["sittuyins", "sittuyinkagr", "sittuyinkabr", "sittuyinm", "sittuyini", "disguised"] },
        asean: { pieceCSS: ["aseani", "aseanm", "aseanc", "aseans", "disguised"] },
        shogi: { pieceCSS: ["shogik", "shogi", "shogiw", "shogip", "shogim", "shogip3d", "shogikw3d", "shogid", "shogiim", "shogibw", "portk", "porti", "disguised"] },
        kyoto: { pieceCSS: ["kyoto", "kyotok", "kyotoks", "kyotoi", "kyotod", "disguised"] },
        dobutsu: { pieceCSS: ["dobutsu", "disguised"] },
        tori: { pieceCSS: ["torii", "torik", "torim", "porti", "disguised"] },
        xiangqi: { pieceCSS: ["xiangqi2d", "xiangqi2di", "xiangqi", "xiangqict3", "xiangqihnz", "xiangqict2", "xiangqihnzw", "xiangqict2w", "xiangqiwikim", "xiangqiKa", "xiangqittxqhnz", "xiangqittxqintl", "disguised"] },
        janggi: { pieceCSS: ["janggihb", "janggihg", "janggiikak", "janggiikaw", "janggikak", "janggikaw", "janggiib", "janggiig", "disguised"] },
        shako: { pieceCSS: ["shako0", "shako1", "shako2", "disguised"] },
        shogun: { pieceCSS: ["shogun0", "shogun1", "shogun2", "shogun3", "shogun4", "shogun5", "disguised"] },
        orda: { pieceCSS: ["orda0", "orda1", "disguised"] },
        synochess: { pieceCSS: ["synochess0", "synochess1", "synochess2", "synochess3", "synochess4", "synochess5", "disguised"] },
        hoppel: { pieceCSS: ["hoppel0", "hoppel1", "hoppel2", "disguised"] },
        shinobi: { pieceCSS: ["shinobi0", "shinobi1", "disguised"] },
        empire: { pieceCSS: ["empire0", "empire1", "disguised"] },
        ordamirror: { pieceCSS: ["ordamirror0", "ordamirror1", "disguised"] },
        chak: { pieceCSS: ["chak0", "disguised"] },
        chennis: { pieceCSS: ["chennis0", "chennis1", "chennis2", "disguised"] },
    };
    const alwaysMandatory = () => true;
    function distanceBased(required, boardHeight) {
        return (role, _orig, dest, color) => {
            const letter = letterOf(role);
            return (letter in required) ? distFromLastRank(dest, color, boardHeight) < required[letter] : false;
        };
    }
    function distFromLastRank(dest, color, boardHeight) {
        const rank = key2pos(dest)[1];
        return (color === "white") ? boardHeight - rank - 1 : rank;
    }
    class Variant {
        displayName(chess960 = false) { return _(this._displayName).toUpperCase() + (chess960 ? "960" : ""); }
        tooltip() { return this._tooltip(); }
        get boardDimensions() { return this.boardFamily.dimensions; }
        get boardWidth() { return this.boardDimensions.width; }
        get boardHeight() { return this.boardDimensions.height; }
        get cg() { return this.boardFamily.cg; }
        get boardCSS() { return this.boardFamily.boardCSS; }
        get pieceCSS() { return this.pieceFamily.pieceCSS; }
        icon(chess960 = false) { return chess960 ? this._icon960 : this._icon; }
        constructor(data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z;
            this.name = data.name;
            this._displayName = (_a = data.displayName) !== null && _a !== void 0 ? _a : data.name;
            this._tooltip = data.tooltip;
            this.startFen = data.startFen;
            this.board = data.board;
            this.boardFamily = BOARD_FAMILIES[data.board];
            this.piece = data.piece;
            this.pieceFamily = PIECE_FAMILIES[data.piece];
            this.firstColor = (_b = data.firstColor) !== null && _b !== void 0 ? _b : "White";
            this.secondColor = (_c = data.secondColor) !== null && _c !== void 0 ? _c : "Black";
            this.pieceRoles = {
                white: data.pieceLetters.map(roleOf),
                black: ((_d = data.pieceLetters2) !== null && _d !== void 0 ? _d : data.pieceLetters).map(roleOf)
            };
            this.pocket = !!(data.pocketLetters || data.pocketLetters2);
            this.pocketRoles = data.pocketLetters ? {
                white: data.pocketLetters.map(roleOf),
                black: ((_e = data.pocketLetters2) !== null && _e !== void 0 ? _e : data.pocketLetters).map(roleOf),
            } :
                undefined;
            this.kingRoles = (_g = (_f = data.kingLetters) === null || _f === void 0 ? void 0 : _f.map(roleOf)) !== null && _g !== void 0 ? _g : ["k-piece"];
            this.promotion = (_h = data.promotion) !== null && _h !== void 0 ? _h : "regular";
            this.promotionOrder = (_j = data.promotionOrder) !== null && _j !== void 0 ? _j : (this.promotion === "shogi" || this.promotion === "kyoto" ? ["+", ""] : ["q", "c", "e", "a", "h", "n", "r", "b", "p"]);
            this.promoteableRoles = (_l = (_k = data.promoteableLetters) === null || _k === void 0 ? void 0 : _k.map(roleOf)) !== null && _l !== void 0 ? _l : ["p-piece"];
            this.isMandatoryPromotion = (_m = data.isMandatoryPromotion) !== null && _m !== void 0 ? _m : alwaysMandatory;
            this.timeControl = (_o = data.timeControl) !== null && _o !== void 0 ? _o : "incremental";
            this.counting = data.counting;
            this.materialPoint = data.materialPoint;
            this.enPassant = (_p = data.enPassant) !== null && _p !== void 0 ? _p : false;
            this.autoPromoteable = this.promotionOrder.length > 2;
            this.captureToHand = (_q = data.captureToHand) !== null && _q !== void 0 ? _q : false;
            this.gate = (_r = data.gate) !== null && _r !== void 0 ? _r : false;
            this.duck = (_s = data.duck) !== null && _s !== void 0 ? _s : false;
            this.pass = (_t = data.pass) !== null && _t !== void 0 ? _t : false;
            this.setup = (_u = data.setup) !== null && _u !== void 0 ? _u : false;
            this.boardMark = (_v = data.boardMark) !== null && _v !== void 0 ? _v : 'none';
            this.showPromoted = (_w = data.showPromoted) !== null && _w !== void 0 ? _w : false;
            this.showMaterialDiff = !this.captureToHand;
            this.initialMaterialImbalance = this.showMaterialDiff ? calculateMaterialDiff(this) : new Map();
            this.alternateStart = data.alternateStart;
            this.chess960 = (_x = data.chess960) !== null && _x !== void 0 ? _x : false;
            this._icon = data.icon;
            this._icon960 = (_y = data.icon960) !== null && _y !== void 0 ? _y : data.icon;
            this.pieceSound = (_z = data.pieceSound) !== null && _z !== void 0 ? _z : "regular";
        }
    }
    const VARIANTS = {
        chess: new Variant({
            name: "chess", tooltip: () => _("Chess, unmodified, as it's played by FIDE standards."),
            startFen: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",
            board: "standard8x8", piece: "standard",
            pieceLetters: ["k", "q", "r", "b", "n", "p"],
            enPassant: true,
            alternateStart: {
                '': '',
                'PawnsPushed': "rnbqkbnr/8/8/pppppppp/PPPPPPPP/8/8/RNBQKBNR w KQkq - 0 1",
                'PawnsPassed': "rnbqkbnr/8/8/PPPPPPPP/pppppppp/8/8/RNBQKBNR w KQkq - 0 1",
                'UpsideDown': "RNBKQBNR/PPPPPPPP/8/8/8/8/pppppppp/rnbkqbnr w - - 0 1",
                'Theban': "1p6/2p3kn/3p2pp/4pppp/5ppp/8/PPPPPPPP/PPPPPPKN w - - 0 1",
                'No castle': 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w - - 0 1'
            },
            chess960: true, icon: "M", icon960: "V",
        }),
        crazyhouse: new Variant({
            name: "crazyhouse", tooltip: () => _("Take captured pieces and drop them back on to the board as your own."),
            startFen: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR[] w KQkq - 0 1",
            board: "standard8x8", piece: "standard",
            pieceLetters: ["k", "q", "r", "b", "n", "p"],
            pocketLetters: ["p", "n", "b", "r", "q"],
            enPassant: true, captureToHand: true,
            alternateStart: {
                '': '',
                'PawnsPushed': "rnbqkbnr/8/8/pppppppp/PPPPPPPP/8/8/RNBQKBNR w - - 0 1",
                'PawnsPassed': "rnbqkbnr/8/8/PPPPPPPP/pppppppp/8/8/RNBQKBNR w - - 0 1",
                'UpsideDown': "RNBQKBNR/PPPPPPPP/8/8/8/8/pppppppp/rnbqkbnr w - - 0 1",
                'Theban': "1p6/2p3kn/3p2pp/4pppp/5ppp/8/PPPPPPPP/PPPPPPKN w - - 0 1",
                'No castle': 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w - - 0 1'
            },
            chess960: true, icon: "+", icon960: "%",
        }),
        placement: new Variant({
            name: "placement", tooltip: () => _("Choose where your pieces start."),
            startFen: "8/pppppppp/8/8/8/8/PPPPPPPP/8[KQRRBBNNkqrrbbnn] w - - 0 1",
            board: "standard8x8", piece: "standard",
            pieceLetters: ["k", "q", "r", "b", "n", "p"],
            pocketLetters: ["n", "b", "r", "q", "k"],
            enPassant: true,
            icon: "S",
        }),
        atomic: new Variant({
            name: "atomic", tooltip: () => _("Pieces explode upon capture."),
            startFen: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",
            board: "standard8x8", piece: "standard",
            pieceLetters: ["k", "q", "r", "b", "n", "p"],
            enPassant: true,
            pieceSound: "atomic",
            chess960: true, icon: "~", icon960: "\\",
        }),
        duck: new Variant({
            name: "duck", tooltip: () => _("The duck must be moved to a new square after every turn."),
            startFen: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",
            board: "standard8x8", piece: "standard",
            pieceLetters: ["k", "q", "r", "b", "n", "p", "*"],
            pieceLetters2: ["k", "q", "r", "b", "n", "p"],
            enPassant: true, duck: true,
            icon: "🦆",
        }),
        makruk: new Variant({
            name: "makruk", tooltip: () => _("Thai Chess. A game closely resembling the original Chaturanga. Similar to Chess but with a different queen and bishop."),
            startFen: "rnsmksnr/8/pppppppp/8/8/PPPPPPPP/8/RNSKMSNR w - - 0 1",
            board: "makruk8x8", piece: "makruk",
            pieceLetters: ["k", "s", "m", "n", "r", "p", "m~"],
            promotionOrder: ["m"],
            counting: "makruk",
            showPromoted: true,
            icon: "Q",
        }),
        makpong: new Variant({
            name: "makpong", tooltip: () => _("Makruk variant where kings cannot move to escape out of check."),
            startFen: "rnsmksnr/8/pppppppp/8/8/PPPPPPPP/8/RNSKMSNR w - - 0 1",
            board: "makruk8x8", piece: "makruk",
            pieceLetters: ["k", "s", "m", "n", "r", "p", "m~"],
            promotionOrder: ["m"],
            counting: "makruk",
            showPromoted: true,
            icon: "O",
        }),
        cambodian: new Variant({
            name: "cambodian", displayName: "ouk chaktrang", tooltip: () => _("Cambodian Chess. Makruk with a few additional opening abilities."),
            startFen: "rnsmksnr/8/pppppppp/8/8/PPPPPPPP/8/RNSKMSNR w DEde - 0 1",
            board: "makruk8x8", piece: "makruk",
            pieceLetters: ["k", "s", "m", "n", "r", "p", "m~"],
            promotionOrder: ["m"],
            counting: "makruk",
            showPromoted: true,
            icon: "!",
        }),
        sittuyin: new Variant({
            name: "sittuyin", tooltip: () => _("Burmese Chess. Similar to Makruk, but pieces are placed at the start of the match."),
            startFen: "8/8/4pppp/pppp4/4PPPP/PPPP4/8/8[KFRRSSNNkfrrssnn] w - - 0 1",
            board: "sittuyin8x8", piece: "sittuyin",
            firstColor: "Red", secondColor: "Black",
            pieceLetters: ["k", "f", "s", "n", "r", "p"],
            pocketLetters: ["r", "n", "s", "f", "k"],
            promotionOrder: ["f"],
            counting: "asean",
            icon: ":",
        }),
        asean: new Variant({
            name: "asean", tooltip: () => _("Makruk using the board/pieces from International Chess as well as pawn promotion rules."),
            startFen: "rnbqkbnr/8/pppppppp/8/8/PPPPPPPP/8/RNBQKBNR w - - 0 1",
            board: "standard8x8", piece: "asean",
            pieceLetters: ["k", "q", "b", "n", "r", "p"],
            promotionOrder: ["r", "n", "b", "q"],
            counting: "asean",
            icon: "♻",
        }),
        shogi: new Variant({
            name: "shogi", tooltip: () => _("Japanese Chess, and the standard 9x9 version played today with drops and promotions. "),
            startFen: "lnsgkgsnl/1r5b1/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL[-] w 0 1",
            board: "shogi9x9", piece: "shogi",
            firstColor: "Black", secondColor: "White",
            pieceLetters: ["k", "g", "r", "b", "s", "n", "l", "p"],
            pocketLetters: ["p", "l", "n", "s", "g", "b", "r"],
            promotion: "shogi",
            promoteableLetters: ["p", "l", "n", "s", "r", "b"],
            isMandatoryPromotion: distanceBased({ p: 1, l: 1, n: 2 }, 9),
            timeControl: "byoyomi",
            pieceSound: "shogi",
            captureToHand: true,
            alternateStart: {
                '': '',
                'Lance HC': 'lnsgkgsn1/1r5b1/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL[-] b 0 1',
                'Bishop HC': 'lnsgkgsnl/1r7/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL[-] b 0 1',
                'Rook HC': 'lnsgkgsnl/7b1/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL[-] b 0 1',
                'Rook+Lance HC': 'lnsgkgsn1/7b1/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL[-] b 0 1',
                '2-Piece HC': 'lnsgkgsnl/9/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL[-] b 0 1',
                '4-Piece HC': '1nsgkgsn1/9/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL[-] b 0 1',
                '6-Piece HC': '2sgkgs2/9/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL[-] b 0 1',
                '8-Piece HC': '3gkg3/9/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL[-] b 0 1',
                '9-Piece HC': '3gk4/9/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL[-] b 0 1',
                '10-Piece HC': '4k4/9/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL[-] b 0 1'
            },
            icon: "K",
        }),
        minishogi: new Variant({
            name: "minishogi", tooltip: () => _("5x5 Shogi for more compact and faster games. There are no knights or lances."),
            startFen: "rbsgk/4p/5/P4/KGSBR[-] w 0 1",
            board: "shogi5x5", piece: "shogi",
            firstColor: "Black", secondColor: "White",
            pieceLetters: ["k", "g", "r", "b", "s", "p"],
            pocketLetters: ["p", "s", "g", "b", "r"],
            promotion: "shogi",
            promoteableLetters: ["p", "s", "r", "b"],
            isMandatoryPromotion: distanceBased({ p: 1 }, 5),
            timeControl: "byoyomi",
            pieceSound: "shogi",
            captureToHand: true,
            icon: "6",
        }),
        kyotoshogi: new Variant({
            name: "kyotoshogi", displayName: "kyoto shogi", tooltip: () => _("A wild Shogi variant on a 5x5 board where pieces flip into a different piece after each move."),
            startFen: "p+nks+l/5/5/5/+LSK+NP[-] w 0 1",
            board: "shogi5x5", piece: "kyoto",
            firstColor: "Black", secondColor: "White",
            pieceLetters: ["k", "l", "s", "n", "p"],
            pocketLetters: ["p", "l", "n", "s"],
            promotion: "kyoto",
            promoteableLetters: ["p", "l", "n", "s"],
            isMandatoryPromotion: (_role, orig, _dest, _color) => isKey(orig),
            timeControl: "byoyomi",
            pieceSound: "shogi",
            captureToHand: true,
            icon: ")",
        }),
        dobutsu: new Variant({
            name: "dobutsu", tooltip: () => _("3x4 game with cute animals, designed to teach children how to play Shogi."),
            startFen: "gle/1c1/1C1/ELG[-] w 0 1",
            board: "shogi3x4", piece: "dobutsu",
            firstColor: "Black", secondColor: "White",
            pieceLetters: ["l", "g", "e", "c"],
            pocketLetters: ["e", "g", "c"],
            kingLetters: ["l"],
            promotion: "shogi",
            promoteableLetters: ["c"],
            timeControl: "byoyomi",
            pieceSound: "shogi",
            captureToHand: true,
            icon: "8",
        }),
        gorogoro: new Variant({
            name: "gorogoro", tooltip: () => _("5x6 Shogi designed to introduce tactics with the generals."),
            startFen: "sgkgs/5/1ppp1/1PPP1/5/SGKGS[-] w 0 1",
            board: "shogi5x6", piece: "shogi",
            firstColor: "Black", secondColor: "White",
            pieceLetters: ["k", "g", "s", "p"],
            pocketLetters: ["p", "s", "g"],
            promotion: "shogi",
            promoteableLetters: ["p", "s"],
            isMandatoryPromotion: distanceBased({ p: 1 }, 6),
            timeControl: "byoyomi",
            pieceSound: "shogi",
            captureToHand: true,
            icon: "🐱",
        }),
        gorogoroplus: new Variant({
            name: "gorogoroplus", displayName: "gorogoro+", tooltip: () => _("5x6 Shogi designed to introduce tactics with the generals."),
            startFen: "sgkgs/5/1ppp1/1PPP1/5/SGKGS[LNln] w 0 1",
            board: "shogi5x6", piece: "shogi",
            firstColor: "Black", secondColor: "White",
            pieceLetters: ["k", "g", "s", "n", "l", "p"],
            pocketLetters: ["p", "l", "n", "s", "g"],
            promotion: "shogi",
            promoteableLetters: ["p", "s", "n", "l"],
            isMandatoryPromotion: distanceBased({ p: 1, l: 1, n: 2 }, 6),
            timeControl: "byoyomi",
            pieceSound: "shogi",
            captureToHand: true,
            alternateStart: {
                'Gorogoro Plus N+L': '',
                'Original (No N+L)': 'sgkgs/5/1ppp1/1PPP1/5/SGKGS[-] w 0 1'
            },
            icon: "🐱",
        }),
        torishogi: new Variant({
            name: "torishogi", displayName: "tori shogi", tooltip: () => _("A confrontational 7x7 variant with unique pieces each named after different birds."),
            startFen: "rpckcpl/3f3/sssssss/2s1S2/SSSSSSS/3F3/LPCKCPR[-] w 0 1",
            board: "shogi7x7", piece: "tori",
            firstColor: "Black", secondColor: "White",
            pieceLetters: ["k", "c", "p", "l", "r", "f", "s"],
            pocketLetters: ["s", "p", "l", "r", "c", "f"],
            promotion: "shogi",
            promoteableLetters: ["s", "f"],
            timeControl: "byoyomi",
            pieceSound: "shogi",
            captureToHand: true,
            alternateStart: {
                '': '',
                'Left Quail HC': 'rpckcp1/3f3/sssssss/2s1S2/SSSSSSS/3F3/LPCKCPR[] b 0 1',
                'Falcon HC': 'rpckcpl/7/sssssss/2s1S2/SSSSSSS/3F3/LPCKCPR[] b 0 1',
                'Falcon + Left Quail HC': 'rpckcp1/7/sssssss/2s1S2/SSSSSSS/3F3/LPCKCPR[] b 0 1',
                'Falcon + Both Quails HC': '1pckcp1/7/sssssss/2s1S2/SSSSSSS/3F3/LPCKCPR[] b 0 1',
            },
            icon: "🐦",
        }),
        xiangqi: new Variant({
            name: "xiangqi", tooltip: () => _("Chinese Chess, one of the oldest and most played board games in the world."),
            startFen: "rnbakabnr/9/1c5c1/p1p1p1p1p/9/9/P1P1P1P1P/1C5C1/9/RNBAKABNR w - - 0 1",
            board: "xiangqi9x10", piece: "xiangqi",
            firstColor: "Red", secondColor: "Black",
            pieceLetters: ["k", "a", "c", "r", "b", "n", "p"],
            promoteableLetters: [],
            icon: "|",
        }),
        manchu: new Variant({
            name: "manchu", tooltip: () => _("Xiangqi variant where one side has a chariot that can also move as a cannon or horse."),
            startFen: "rnbakabnr/9/1c5c1/p1p1p1p1p/9/9/P1P1P1P1P/9/9/M1BAKAB2 w - - 0 1",
            board: "xiangqi9x10", piece: "xiangqi",
            firstColor: "Red", secondColor: "Black",
            pieceLetters: ["k", "a", "m", "b", "p"],
            pieceLetters2: ["k", "a", "c", "r", "b", "n", "p"],
            promoteableLetters: [],
            icon: "{",
        }),
        janggi: new Variant({
            name: "janggi", tooltip: () => _("Korean Chess, similar to Xiangqi but plays much differently. Tournament rules are used."),
            startFen: "rnba1abnr/4k4/1c5c1/p1p1p1p1p/9/9/P1P1P1P1P/1C5C1/4K4/RNBA1ABNR w - - 0 1",
            board: "janggi9x10", piece: "janggi",
            firstColor: "Blue", secondColor: "Red",
            pieceLetters: ["k", "a", "c", "r", "b", "n", "p"],
            promoteableLetters: [],
            timeControl: "byoyomi",
            materialPoint: "janggi",
            pass: true, setup: true,
            icon: "=",
        }),
        minixiangqi: new Variant({
            name: "minixiangqi", tooltip: () => _("Compact version of Xiangqi played on a 7x7 board without a river."),
            startFen: "rcnkncr/p1ppp1p/7/7/7/P1PPP1P/RCNKNCR w - - 0 1",
            board: "xiangqi7x7", piece: "xiangqi",
            firstColor: "Red", secondColor: "Black",
            pieceLetters: ["k", "c", "r", "n", "p"],
            promoteableLetters: [],
            icon: "7",
        }),
        capablanca: new Variant({
            name: "capablanca", tooltip: () => _("Play with the hybrid pieces, archbishop (B+N) and chancellor (R+N), on a 10x8 board."),
            startFen: "rnabqkbcnr/pppppppppp/10/10/10/10/PPPPPPPPPP/RNABQKBCNR w KQkq - 0 1",
            board: "standard10x8", piece: "capa",
            pieceLetters: ["k", "q", "c", "a", "r", "b", "n", "p"],
            enPassant: true,
            alternateStart: {
                '': '',
                'Bird': 'rnbcqkabnr/pppppppppp/10/10/10/10/PPPPPPPPPP/RNBCQKABNR w KQkq - 0 1',
                'Carrera': 'rcnbqkbnar/pppppppppp/10/10/10/10/PPPPPPPPPP/RCNBQKBNAR w KQkq - 0 1',
                'Conservative': 'arnbqkbnrc/pppppppppp/10/10/10/10/PPPPPPPPPP/ARNBQKBNRC w KQkq - 0 1',
                'Embassy': 'rnbqkcabnr/pppppppppp/10/10/10/10/PPPPPPPPPP/RNBQKCABNR w KQkq - 0 1',
                'Gothic': 'rnbqckabnr/pppppppppp/10/10/10/10/PPPPPPPPPP/RNBQCKABNR w KQkq - 0 1',
                'Schoolbook': 'rqnbakbncr/pppppppppp/10/10/10/10/PPPPPPPPPP/RQNBAKBNCR w KQkq - 0 1',
            },
            chess960: true, icon: "P", icon960: ",",
        }),
        capahouse: new Variant({
            name: "capahouse", tooltip: () => _("Capablanca with Crazyhouse drop rules."),
            startFen: "rnabqkbcnr/pppppppppp/10/10/10/10/PPPPPPPPPP/RNABQKBCNR[] w KQkq - 0 1",
            board: "standard10x8", piece: "capa",
            pieceLetters: ["k", "q", "c", "a", "r", "b", "n", "p"],
            pocketLetters: ["p", "n", "b", "r", "a", "c", "q"],
            enPassant: true, captureToHand: true,
            alternateStart: {
                '': '',
                'Bird': 'rnbcqkabnr/pppppppppp/10/10/10/10/PPPPPPPPPP/RNBCQKABNR[] w KQkq - 0 1',
                'Carrera': 'rcnbqkbnar/pppppppppp/10/10/10/10/PPPPPPPPPP/RCNBQKBNAR[] w KQkq - 0 1',
                'Conservative': 'arnbqkbnrc/pppppppppp/10/10/10/10/PPPPPPPPPP/ARNBQKBNRC[] w KQkq - 0 1',
                'Embassy': 'rnbqkcabnr/pppppppppp/10/10/10/10/PPPPPPPPPP/RNBQKCABNR[] w KQkq - 0 1',
                'Gothic': 'rnbqckabnr/pppppppppp/10/10/10/10/PPPPPPPPPP/RNBQCKABNR[] w KQkq - 0 1',
                'Schoolbook': 'rqnbakbncr/pppppppppp/10/10/10/10/PPPPPPPPPP/RQNBAKBNCR[] w KQkq - 0 1',
            },
            chess960: true, icon: "&", icon960: "'",
        }),
        seirawan: new Variant({
            name: "seirawan", displayName: "s-chess", tooltip: () => _("Hybrid pieces, the hawk (B+N) and elephant (R+N), can enter the board after moving a back rank piece."),
            startFen: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR[HEhe] w KQBCDFGkqbcdfg - 0 1",
            board: "standard8x8", piece: "seirawan",
            pieceLetters: ["k", "q", "e", "h", "r", "b", "n", "p"],
            pocketLetters: ["h", "e"],
            enPassant: true, gate: true,
            icon: "L", chess960: true, icon960: "}",
        }),
        shouse: new Variant({
            name: "shouse", displayName: "s-house", tooltip: () => _("S-Chess with Crazyhouse drop rules."),
            startFen: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR[HEhe] w KQBCDFGkqbcdfg - 0 1",
            board: "standard8x8", piece: "seirawan",
            pieceLetters: ["k", "q", "e", "h", "r", "b", "n", "p"],
            pocketLetters: ["p", "n", "b", "r", "h", "e", "q"],
            enPassant: true, captureToHand: true, gate: true,
            icon: "$",
        }),
        grand: new Variant({
            name: "grand", tooltip: () => _("Play with the hybrid pieces, archbishop (B+N) and chancellor (R+N), on a grand 10x10 board."),
            startFen: "r8r/1nbqkcabn1/pppppppppp/10/10/10/10/PPPPPPPPPP/1NBQKCABN1/R8R w - - 0 1",
            board: "grand10x10", piece: "capa",
            pieceLetters: ["k", "q", "c", "a", "r", "b", "n", "p"],
            isMandatoryPromotion: distanceBased({ p: 1 }, 10),
            enPassant: true,
            icon: "(",
        }),
        grandhouse: new Variant({
            name: "grandhouse", tooltip: () => _("Grand Chess with Crazyhouse drop rules."),
            startFen: "r8r/1nbqkcabn1/pppppppppp/10/10/10/10/PPPPPPPPPP/1NBQKCABN1/R8R[] w - - 0 1",
            board: "grand10x10", piece: "capa",
            pieceLetters: ["k", "q", "c", "a", "r", "b", "n", "p"],
            pocketLetters: ["p", "n", "b", "r", "a", "c", "q"],
            isMandatoryPromotion: distanceBased({ p: 1 }, 10),
            enPassant: true, captureToHand: true,
            icon: "*",
        }),
        shako: new Variant({
            name: "shako", tooltip: () => _("Introduces the cannon and elephant from Xiangqi into a 10x10 chess board."),
            startFen: "c8c/ernbqkbnre/pppppppppp/10/10/10/10/PPPPPPPPPP/ERNBQKBNRE/C8C w KQkq - 0 1",
            board: "standard10x10", piece: "shako",
            pieceLetters: ["k", "q", "e", "c", "r", "b", "n", "p"],
            promotionOrder: ["q", "n", "c", "r", "e", "b"],
            enPassant: true,
            icon: "9",
        }),
        shogun: new Variant({
            name: "shogun", tooltip: () => _("Pieces promote and can be dropped, similar to Shogi."),
            startFen: "rnb+fkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNB+FKBNR w KQkq - 0 1",
            board: "shogun8x8", piece: "shogun",
            pieceLetters: ["k", "f", "r", "b", "n", "p"],
            pocketLetters: ["p", "n", "b", "r", "f"],
            promotion: "shogi",
            promoteableLetters: ["p", "f", "r", "b", "n"],
            isMandatoryPromotion: distanceBased({ p: 1 }, 8),
            timeControl: "byoyomi",
            enPassant: true, captureToHand: true,
            icon: "-",
        }),
        hoppelpoppel: new Variant({
            name: "hoppelpoppel", displayName: "hoppel-poppel", tooltip: () => _("Knights capture as bishops; bishops  capture as knights."),
            startFen: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",
            board: "standard8x8", piece: "hoppel",
            pieceLetters: ["k", "q", "r", "b", "n", "p"],
            enPassant: true,
            icon: "`",
        }),
        orda: new Variant({
            name: "orda", tooltip: () => _("Asymmetric variant where one army has pieces that move like knights but capture differently."),
            startFen: "lhaykahl/8/pppppppp/8/8/8/PPPPPPPP/RNBQKBNR w KQ - 0 1",
            board: "standard8x8", piece: "orda",
            firstColor: "White", secondColor: "Gold",
            pieceLetters: ["k", "q", "r", "b", "n", "p", "h"],
            pieceLetters2: ["k", "y", "l", "a", "h", "p", "q"],
            promotionOrder: ["q", "h"],
            enPassant: true,
            boardMark: 'campmate',
            icon: "R",
        }),
        synochess: new Variant({
            name: "synochess", tooltip: () => _("Asymmetric East vs. West variant which pits the western Chess army against a Xiangqi and Janggi-styled army."),
            startFen: "rneakenr/8/1c4c1/1ss2ss1/8/8/PPPPPPPP/RNBQKBNR[ss] w KQ - 0 1",
            board: "standard8x8", piece: "synochess",
            firstColor: "White", secondColor: "Red",
            pieceLetters: ["k", "q", "r", "b", "n", "p"],
            pieceLetters2: ["k", "a", "c", "r", "e", "n", "s"],
            pocketLetters: [], pocketLetters2: ["s"],
            boardMark: 'campmate',
            icon: "_",
        }),
        shinobi: new Variant({
            name: "shinobi", tooltip: () => _("Asymmetric variant which pits the western Chess army against a drop-based, Shogi-styled army."),
            startFen: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/LH1CK1HL[LHMMDJ] w kq - 0 1",
            board: "standard8x8", piece: "shinobi",
            firstColor: "Pink", secondColor: "Black",
            pieceLetters: ["k", "d", "j", "c", "l", "h", "m", "p"],
            pieceLetters2: ["k", "q", "r", "b", "n", "p"],
            pocketLetters: ["l", "h", "m", "d", "j"],
            pocketLetters2: [],
            promotion: "shogi",
            promoteableLetters: ["p", "l", "h", "m"],
            enPassant: true,
            boardMark: 'campmate',
            icon: "🐢",
        }),
        empire: new Variant({
            name: "empire", tooltip: () => _("Asymmetric variant where one army has pieces that move like queens but capture as usual."),
            startFen: "rnbqkbnr/pppppppp/8/8/8/PPPSSPPP/8/TECDKCET w kq - 0 1",
            board: "standard8x8", piece: "empire",
            firstColor: "Gold", secondColor: "Black",
            pieceLetters: ["k", "d", "t", "c", "e", "p", "s", "q"],
            pieceLetters2: ["k", "q", "r", "b", "n", "p"],
            enPassant: true,
            boardMark: 'campmate',
            icon: "♚",
        }),
        ordamirror: new Variant({
            name: "ordamirror", displayName: "orda mirror", tooltip: () => _("Orda Chess variant with two Horde armies. The Falcon replaces the Yurt."),
            startFen: "lhafkahl/8/pppppppp/8/8/PPPPPPPP/8/LHAFKAHL w - - 0 1",
            board: "standard8x8", piece: "ordamirror",
            firstColor: "White", secondColor: "Gold",
            pieceLetters: ["k", "f", "l", "a", "h", "p"],
            promotionOrder: ["h", "l", "f", "a"],
            boardMark: 'campmate',
            icon: "◩",
        }),
        chak: new Variant({
            name: "chak", tooltip: () => _("Mayan chess. Inspired by cultural elements of Mesoamerica."),
            startFen: "rvsqkjsvr/4o4/p1p1p1p1p/9/9/9/P1P1P1P1P/4O4/RVSJKQSVR w - - 0 1",
            board: "chak9x9", piece: "chak",
            firstColor: "White", secondColor: "Green",
            pieceLetters: ["r", "v", "s", "q", "k", "j", "o", "p"],
            kingLetters: ["k", "+k"],
            promotion: "shogi",
            promoteableLetters: ["p", "k"],
            icon: "🐬",
        }),
        chennis: new Variant({
            name: "chennis", tooltip: () => _("Pieces alternate between two forms with each move."),
            startFen: "p1m1s1f/1k5/7/7/7/5K1/F1S1M1P[] w - 0 1",
            board: "chennis7x7", piece: "chennis",
            pieceLetters: ["k", "p", "m", "s", "f"],
            pocketLetters: ["p", "m", "s", "f"],
            promotion: "kyoto",
            promoteableLetters: ["p", "m", "s", "f"],
            isMandatoryPromotion: (_role, orig, _dest, _color) => isKey(orig),
            captureToHand: true,
            icon: "🎾",
        }),
        // We support to import/store/analyze some variants
        // but don't want to add them to leaderboard page
        embassy: new Variant({
            name: "embassy", tooltip: () => _("Like Capablanca Chess but with Grand starting setup."),
            startFen: "rnbqkcabnr/pppppppppp/10/10/10/10/PPPPPPPPPP/RNBQKCABNR w KQkq - 0 1",
            board: "standard10x8", piece: "capa",
            pieceLetters: ["k", "q", "c", "a", "r", "b", "n", "p"],
            pocketLetters: ["p", "n", "b", "r", "a", "c", "q"],
            enPassant: true,
            icon: "P",
        }),
        embassyhouse: new Variant({
            name: "embassyhouse", tooltip: () => _("Embassy with Crazyhouse drop rules."),
            startFen: "rnbqkcabnr/pppppppppp/10/10/10/10/PPPPPPPPPP/RNBQKCABNR[] w KQkq - 0 1",
            board: "standard10x8", piece: "capa",
            pieceLetters: ["k", "q", "c", "a", "r", "b", "n", "p"],
            pocketLetters: ["p", "n", "b", "r", "a", "c", "q"],
            enPassant: true, captureToHand: true,
            icon: "&",
        }),
        gothic: new Variant({
            name: "gothic", tooltip: () => _("Like Capablanca Chess but with a different starting setup."),
            startFen: "rnbqckabnr/pppppppppp/10/10/10/10/PPPPPPPPPP/RNBQCKABNR w KQkq - 0 1",
            board: "standard10x8", piece: "capa",
            pieceLetters: ["k", "q", "c", "a", "r", "b", "n", "p"],
            pocketLetters: ["p", "n", "b", "r", "a", "c", "q"],
            enPassant: true,
            icon: "P",
        }),
        gothhouse: new Variant({
            name: "gothhouse", tooltip: () => _("Gothic with Crazyhouse drop rules."),
            startFen: "rnbqckabnr/pppppppppp/10/10/10/10/PPPPPPPPPP/RNBQCKABNR[] w KQkq - 0 1",
            board: "standard10x8", piece: "capa",
            pieceLetters: ["k", "q", "c", "a", "r", "b", "n", "p"],
            pocketLetters: ["p", "n", "b", "r", "a", "c", "q"],
            enPassant: true, captureToHand: true,
            icon: "&",
        }),
    };
    const variants = Object.keys(VARIANTS);
    const disabledVariants = ["gothic", "gothhouse", "embassy", "embassyhouse", "gorogoro"];
    variants.filter(v => !disabledVariants.includes(v));
    const variantGroups = {
        standard: { variants: ["chess", "crazyhouse", "placement", "atomic", "duck"] },
        sea: { variants: ["makruk", "makpong", "cambodian", "sittuyin", "asean"] },
        shogi: { variants: ["shogi", "minishogi", "kyotoshogi", "dobutsu", "gorogoroplus", "torishogi"] },
        xiangqi: { variants: ["xiangqi", "manchu", "janggi", "minixiangqi"] },
        fairy: { variants: ["capablanca", "capahouse", "seirawan", "shouse", "grand", "grandhouse", "shako", "shogun", "hoppelpoppel"] },
        army: { variants: ["orda", "synochess", "shinobi", "empire", "ordamirror", "chak", "chennis"] },
    };
    function variantGroupLabel(group) {
        const groups = {
            standard: _("Chess Variants"),
            sea: _("Makruk Variants"),
            shogi: _("Shogi Variants"),
            xiangqi: _("Xiangqi Variants"),
            fairy: _("Fairy Piece Variants"),
            army: _("New Army Variants"),
        };
        return groups[group];
    }
    function selectVariant(id, selected, onChange, hookInsert) {
        return h('select#' + id, {
            props: { name: id },
            on: { change: onChange },
            hook: { insert: hookInsert },
        }, Object.keys(variantGroups).map(g => {
            const group = variantGroups[g];
            return h('optgroup', { props: { label: variantGroupLabel(g) } }, group.variants.map(v => {
                const variant = VARIANTS[v];
                return h('option', {
                    props: { value: v, title: variant.tooltip() },
                    attrs: { selected: v === selected },
                }, variant.displayName(false));
            }));
        }));
    }
    // Some variants need to be treated differently according to the FEN.
    // Refer to server/fairy.py for more information
    function moddedVariant(variantName, chess960, pieces, castling) {
        if (!chess960 && ["capablanca", "capahouse"].includes(variantName)) {
            const whiteKing = pieces.get('e1');
            const blackKing = pieces.get('e8');
            if (castling !== '-' &&
                ((!castling.includes('K') && !castling.includes('Q')) || (whiteKing && samePiece(whiteKing, { role: 'k-piece', color: 'white' }))) &&
                ((!castling.includes('k') && !castling.includes('q')) || (blackKing && samePiece(blackKing, { role: 'k-piece', color: 'black' }))))
                return variantName.includes("house") ? "embassyhouse" : "embassy";
        }
        return variantName;
    }
    function uci2cg(move) {
        return move.replace(/10/g, ":");
    }
    function uci2LastMove(move) {
        if (!move)
            return undefined;
        let moveStr = uci2cg(move);
        if (moveStr.startsWith('+'))
            moveStr = moveStr.slice(1);
        return [moveStr.slice(0, 2), moveStr.slice(2)];
    }
    function cg2uci(move) {
        return move.replace(/:/g, "10");
    }
    // pocket part of the FEN (including brackets)
    function getPockets(fen) {
        const placement = fen.split(" ")[0];
        let pockets = "";
        const bracketPos = placement.indexOf("[");
        if (bracketPos !== -1)
            pockets = placement.slice(bracketPos);
        return pockets;
    }
    // Get counting information for makruk et al
    function getCounting(fen) {
        const parts = fen.split(" ");
        let countingPly = Number(parts[4]);
        if (isNaN(countingPly))
            countingPly = 0;
        let countingLimit = Number(parts[3]);
        if (isNaN(countingLimit))
            countingLimit = 0;
        const board = parts[0];
        const whitePieces = (board.match(/[A-Z]/g) || []).length;
        const blackPieces = (board.match(/[a-z]/g) || []).length;
        const pawns = (board.match(/[Pp]/g) || []).length;
        const countingType = (countingLimit === 0) ? 'none' : (pawns === 0 && (whitePieces <= 1 || blackPieces <= 1) ? 'piece' : 'board');
        const sideToMove = parts[1];
        const opponent = (sideToMove === 'w') ? 'b' : 'w';
        const countingSide = (countingType === 'none' || countingPly === 0) ? '' : ((countingPly % 2 === 0) ? sideToMove : opponent);
        return [countingPly, countingLimit, countingSide, countingType];
    }
    // Get janggi material points
    function getJanggiPoints(board) {
        let choPoint = 0;
        let hanPoint = 1.5;
        for (const c of board) {
            switch (c) {
                case 'P':
                    choPoint += 2;
                    break;
                case 'A':
                case 'B':
                    choPoint += 3;
                    break;
                case 'N':
                    choPoint += 5;
                    break;
                case 'C':
                    choPoint += 7;
                    break;
                case 'R':
                    choPoint += 13;
                    break;
                case 'p':
                    hanPoint += 2;
                    break;
                case 'a':
                case 'b':
                    hanPoint += 3;
                    break;
                case 'n':
                    hanPoint += 5;
                    break;
                case 'c':
                    hanPoint += 7;
                    break;
                case 'r':
                    hanPoint += 13;
                    break;
            }
        }
        return [choPoint, hanPoint];
    }
    function unpromotedRole(variant, piece) {
        if (piece.promoted) {
            switch (variant.promotion) {
                case 'shogi':
                case 'kyoto':
                    return piece.role.slice(1);
                default:
                    return 'p-piece';
            }
        }
        else {
            return piece.role;
        }
    }
    // Convert a list of moves to chessground destination
    function moveDests(legalMoves) {
        const dests = new Map();
        legalMoves.map(uci2cg).forEach(move => {
            const orig = move.slice(0, 2);
            const dest = move.slice(2, 4);
            if (dests.has(orig))
                dests.get(orig).push(dest);
            else
                dests.set(orig, [dest]);
        });
        return dests;
    }
    // Create duck move dests from valid moves filtered by first leg move
    // Fairy-Stockfish always uses first leg 'to' square as second leg 'from' square, but
    // chessground dests should use real duck from square (except the very first white duck placement)
    // f.e. move list after e2e4 (fromSquare is e4 because there is no duck on the board still)
    // e2e4,e4e2 e2e4,e4a3 e2e4,e4b3 e2e4,e4c3 ...
    // after 1.e2e4,e4e7 d7d5 (fromSquare of the duck is e7 now)
    // d7d5,d5d7 d7d5,d5e2 d7d5,d5a3 d7d5,d5b3 ...
    function duckMoveDests(legalMoves, fromSquare) {
        const dests = new Map();
        const toSqares = legalMoves.map(move => move.slice(-2));
        dests.set(fromSquare, toSqares);
        return dests;
    }
    // Count given letter occurences in a string
    function lc(str, letter, uppercase) {
        if (uppercase)
            letter = letter.toUpperCase();
        else
            letter = letter.toLowerCase();
        let letterCount = 0;
        for (let position = 0; position < str.length; position++)
            if (str.charAt(position) === letter)
                letterCount += 1;
        return letterCount;
    }
    // Convert the string to uppercase if color is white,
    // or convert it to lowercase if color is black
    function colorCase(color, str) {
        if (color === 'white')
            return str.toUpperCase();
        else
            return str.toLowerCase();
    }
    function notation(variant) {
        let cgNotation = 0 /* cg.Notation.ALGEBRAIC */;
        switch (variant.name) {
            case 'janggi':
                cgNotation = 4 /* cg.Notation.JANGGI */;
                break;
            case 'shogi':
            case 'minishogi':
            case 'kyotoshogi':
            case 'dobutsu':
            case 'gorogoro':
            case 'gorogoroplus':
            case 'torishogi':
                cgNotation = 2 /* cg.Notation.SHOGI_ARBNUM */;
                break;
            case 'xiangqi':
            case 'minixiangqi':
                // XIANGQI_WXF can't handle Mmanchu banner piece!
                cgNotation = 5 /* cg.Notation.XIANGQI_ARBNUM */;
                break;
        }
        return cgNotation;
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    var mousetrapExports = {};
    var mousetrap = {
      get exports(){ return mousetrapExports; },
      set exports(v){ mousetrapExports = v; },
    };

    /*global define:false */

    (function (module) {
    	/**
    	 * Copyright 2012-2017 Craig Campbell
    	 *
    	 * Licensed under the Apache License, Version 2.0 (the "License");
    	 * you may not use this file except in compliance with the License.
    	 * You may obtain a copy of the License at
    	 *
    	 * http://www.apache.org/licenses/LICENSE-2.0
    	 *
    	 * Unless required by applicable law or agreed to in writing, software
    	 * distributed under the License is distributed on an "AS IS" BASIS,
    	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    	 * See the License for the specific language governing permissions and
    	 * limitations under the License.
    	 *
    	 * Mousetrap is a simple keyboard shortcut library for Javascript with
    	 * no external dependencies
    	 *
    	 * @version 1.6.5
    	 * @url craig.is/killing/mice
    	 */
    	(function(window, document, undefined$1) {

    	    // Check if mousetrap is used inside browser, if not, return
    	    if (!window) {
    	        return;
    	    }

    	    /**
    	     * mapping of special keycodes to their corresponding keys
    	     *
    	     * everything in this dictionary cannot use keypress events
    	     * so it has to be here to map to the correct keycodes for
    	     * keyup/keydown events
    	     *
    	     * @type {Object}
    	     */
    	    var _MAP = {
    	        8: 'backspace',
    	        9: 'tab',
    	        13: 'enter',
    	        16: 'shift',
    	        17: 'ctrl',
    	        18: 'alt',
    	        20: 'capslock',
    	        27: 'esc',
    	        32: 'space',
    	        33: 'pageup',
    	        34: 'pagedown',
    	        35: 'end',
    	        36: 'home',
    	        37: 'left',
    	        38: 'up',
    	        39: 'right',
    	        40: 'down',
    	        45: 'ins',
    	        46: 'del',
    	        91: 'meta',
    	        93: 'meta',
    	        224: 'meta'
    	    };

    	    /**
    	     * mapping for special characters so they can support
    	     *
    	     * this dictionary is only used incase you want to bind a
    	     * keyup or keydown event to one of these keys
    	     *
    	     * @type {Object}
    	     */
    	    var _KEYCODE_MAP = {
    	        106: '*',
    	        107: '+',
    	        109: '-',
    	        110: '.',
    	        111 : '/',
    	        186: ';',
    	        187: '=',
    	        188: ',',
    	        189: '-',
    	        190: '.',
    	        191: '/',
    	        192: '`',
    	        219: '[',
    	        220: '\\',
    	        221: ']',
    	        222: '\''
    	    };

    	    /**
    	     * this is a mapping of keys that require shift on a US keypad
    	     * back to the non shift equivelents
    	     *
    	     * this is so you can use keyup events with these keys
    	     *
    	     * note that this will only work reliably on US keyboards
    	     *
    	     * @type {Object}
    	     */
    	    var _SHIFT_MAP = {
    	        '~': '`',
    	        '!': '1',
    	        '@': '2',
    	        '#': '3',
    	        '$': '4',
    	        '%': '5',
    	        '^': '6',
    	        '&': '7',
    	        '*': '8',
    	        '(': '9',
    	        ')': '0',
    	        '_': '-',
    	        '+': '=',
    	        ':': ';',
    	        '\"': '\'',
    	        '<': ',',
    	        '>': '.',
    	        '?': '/',
    	        '|': '\\'
    	    };

    	    /**
    	     * this is a list of special strings you can use to map
    	     * to modifier keys when you specify your keyboard shortcuts
    	     *
    	     * @type {Object}
    	     */
    	    var _SPECIAL_ALIASES = {
    	        'option': 'alt',
    	        'command': 'meta',
    	        'return': 'enter',
    	        'escape': 'esc',
    	        'plus': '+',
    	        'mod': /Mac|iPod|iPhone|iPad/.test(navigator.platform) ? 'meta' : 'ctrl'
    	    };

    	    /**
    	     * variable to store the flipped version of _MAP from above
    	     * needed to check if we should use keypress or not when no action
    	     * is specified
    	     *
    	     * @type {Object|undefined}
    	     */
    	    var _REVERSE_MAP;

    	    /**
    	     * loop through the f keys, f1 to f19 and add them to the map
    	     * programatically
    	     */
    	    for (var i = 1; i < 20; ++i) {
    	        _MAP[111 + i] = 'f' + i;
    	    }

    	    /**
    	     * loop through to map numbers on the numeric keypad
    	     */
    	    for (i = 0; i <= 9; ++i) {

    	        // This needs to use a string cause otherwise since 0 is falsey
    	        // mousetrap will never fire for numpad 0 pressed as part of a keydown
    	        // event.
    	        //
    	        // @see https://github.com/ccampbell/mousetrap/pull/258
    	        _MAP[i + 96] = i.toString();
    	    }

    	    /**
    	     * cross browser add event method
    	     *
    	     * @param {Element|HTMLDocument} object
    	     * @param {string} type
    	     * @param {Function} callback
    	     * @returns void
    	     */
    	    function _addEvent(object, type, callback) {
    	        if (object.addEventListener) {
    	            object.addEventListener(type, callback, false);
    	            return;
    	        }

    	        object.attachEvent('on' + type, callback);
    	    }

    	    /**
    	     * takes the event and returns the key character
    	     *
    	     * @param {Event} e
    	     * @return {string}
    	     */
    	    function _characterFromEvent(e) {

    	        // for keypress events we should return the character as is
    	        if (e.type == 'keypress') {
    	            var character = String.fromCharCode(e.which);

    	            // if the shift key is not pressed then it is safe to assume
    	            // that we want the character to be lowercase.  this means if
    	            // you accidentally have caps lock on then your key bindings
    	            // will continue to work
    	            //
    	            // the only side effect that might not be desired is if you
    	            // bind something like 'A' cause you want to trigger an
    	            // event when capital A is pressed caps lock will no longer
    	            // trigger the event.  shift+a will though.
    	            if (!e.shiftKey) {
    	                character = character.toLowerCase();
    	            }

    	            return character;
    	        }

    	        // for non keypress events the special maps are needed
    	        if (_MAP[e.which]) {
    	            return _MAP[e.which];
    	        }

    	        if (_KEYCODE_MAP[e.which]) {
    	            return _KEYCODE_MAP[e.which];
    	        }

    	        // if it is not in the special map

    	        // with keydown and keyup events the character seems to always
    	        // come in as an uppercase character whether you are pressing shift
    	        // or not.  we should make sure it is always lowercase for comparisons
    	        return String.fromCharCode(e.which).toLowerCase();
    	    }

    	    /**
    	     * checks if two arrays are equal
    	     *
    	     * @param {Array} modifiers1
    	     * @param {Array} modifiers2
    	     * @returns {boolean}
    	     */
    	    function _modifiersMatch(modifiers1, modifiers2) {
    	        return modifiers1.sort().join(',') === modifiers2.sort().join(',');
    	    }

    	    /**
    	     * takes a key event and figures out what the modifiers are
    	     *
    	     * @param {Event} e
    	     * @returns {Array}
    	     */
    	    function _eventModifiers(e) {
    	        var modifiers = [];

    	        if (e.shiftKey) {
    	            modifiers.push('shift');
    	        }

    	        if (e.altKey) {
    	            modifiers.push('alt');
    	        }

    	        if (e.ctrlKey) {
    	            modifiers.push('ctrl');
    	        }

    	        if (e.metaKey) {
    	            modifiers.push('meta');
    	        }

    	        return modifiers;
    	    }

    	    /**
    	     * prevents default for this event
    	     *
    	     * @param {Event} e
    	     * @returns void
    	     */
    	    function _preventDefault(e) {
    	        if (e.preventDefault) {
    	            e.preventDefault();
    	            return;
    	        }

    	        e.returnValue = false;
    	    }

    	    /**
    	     * stops propogation for this event
    	     *
    	     * @param {Event} e
    	     * @returns void
    	     */
    	    function _stopPropagation(e) {
    	        if (e.stopPropagation) {
    	            e.stopPropagation();
    	            return;
    	        }

    	        e.cancelBubble = true;
    	    }

    	    /**
    	     * determines if the keycode specified is a modifier key or not
    	     *
    	     * @param {string} key
    	     * @returns {boolean}
    	     */
    	    function _isModifier(key) {
    	        return key == 'shift' || key == 'ctrl' || key == 'alt' || key == 'meta';
    	    }

    	    /**
    	     * reverses the map lookup so that we can look for specific keys
    	     * to see what can and can't use keypress
    	     *
    	     * @return {Object}
    	     */
    	    function _getReverseMap() {
    	        if (!_REVERSE_MAP) {
    	            _REVERSE_MAP = {};
    	            for (var key in _MAP) {

    	                // pull out the numeric keypad from here cause keypress should
    	                // be able to detect the keys from the character
    	                if (key > 95 && key < 112) {
    	                    continue;
    	                }

    	                if (_MAP.hasOwnProperty(key)) {
    	                    _REVERSE_MAP[_MAP[key]] = key;
    	                }
    	            }
    	        }
    	        return _REVERSE_MAP;
    	    }

    	    /**
    	     * picks the best action based on the key combination
    	     *
    	     * @param {string} key - character for key
    	     * @param {Array} modifiers
    	     * @param {string=} action passed in
    	     */
    	    function _pickBestAction(key, modifiers, action) {

    	        // if no action was picked in we should try to pick the one
    	        // that we think would work best for this key
    	        if (!action) {
    	            action = _getReverseMap()[key] ? 'keydown' : 'keypress';
    	        }

    	        // modifier keys don't work as expected with keypress,
    	        // switch to keydown
    	        if (action == 'keypress' && modifiers.length) {
    	            action = 'keydown';
    	        }

    	        return action;
    	    }

    	    /**
    	     * Converts from a string key combination to an array
    	     *
    	     * @param  {string} combination like "command+shift+l"
    	     * @return {Array}
    	     */
    	    function _keysFromString(combination) {
    	        if (combination === '+') {
    	            return ['+'];
    	        }

    	        combination = combination.replace(/\+{2}/g, '+plus');
    	        return combination.split('+');
    	    }

    	    /**
    	     * Gets info for a specific key combination
    	     *
    	     * @param  {string} combination key combination ("command+s" or "a" or "*")
    	     * @param  {string=} action
    	     * @returns {Object}
    	     */
    	    function _getKeyInfo(combination, action) {
    	        var keys;
    	        var key;
    	        var i;
    	        var modifiers = [];

    	        // take the keys from this pattern and figure out what the actual
    	        // pattern is all about
    	        keys = _keysFromString(combination);

    	        for (i = 0; i < keys.length; ++i) {
    	            key = keys[i];

    	            // normalize key names
    	            if (_SPECIAL_ALIASES[key]) {
    	                key = _SPECIAL_ALIASES[key];
    	            }

    	            // if this is not a keypress event then we should
    	            // be smart about using shift keys
    	            // this will only work for US keyboards however
    	            if (action && action != 'keypress' && _SHIFT_MAP[key]) {
    	                key = _SHIFT_MAP[key];
    	                modifiers.push('shift');
    	            }

    	            // if this key is a modifier then add it to the list of modifiers
    	            if (_isModifier(key)) {
    	                modifiers.push(key);
    	            }
    	        }

    	        // depending on what the key combination is
    	        // we will try to pick the best event for it
    	        action = _pickBestAction(key, modifiers, action);

    	        return {
    	            key: key,
    	            modifiers: modifiers,
    	            action: action
    	        };
    	    }

    	    function _belongsTo(element, ancestor) {
    	        if (element === null || element === document) {
    	            return false;
    	        }

    	        if (element === ancestor) {
    	            return true;
    	        }

    	        return _belongsTo(element.parentNode, ancestor);
    	    }

    	    function Mousetrap(targetElement) {
    	        var self = this;

    	        targetElement = targetElement || document;

    	        if (!(self instanceof Mousetrap)) {
    	            return new Mousetrap(targetElement);
    	        }

    	        /**
    	         * element to attach key events to
    	         *
    	         * @type {Element}
    	         */
    	        self.target = targetElement;

    	        /**
    	         * a list of all the callbacks setup via Mousetrap.bind()
    	         *
    	         * @type {Object}
    	         */
    	        self._callbacks = {};

    	        /**
    	         * direct map of string combinations to callbacks used for trigger()
    	         *
    	         * @type {Object}
    	         */
    	        self._directMap = {};

    	        /**
    	         * keeps track of what level each sequence is at since multiple
    	         * sequences can start out with the same sequence
    	         *
    	         * @type {Object}
    	         */
    	        var _sequenceLevels = {};

    	        /**
    	         * variable to store the setTimeout call
    	         *
    	         * @type {null|number}
    	         */
    	        var _resetTimer;

    	        /**
    	         * temporary state where we will ignore the next keyup
    	         *
    	         * @type {boolean|string}
    	         */
    	        var _ignoreNextKeyup = false;

    	        /**
    	         * temporary state where we will ignore the next keypress
    	         *
    	         * @type {boolean}
    	         */
    	        var _ignoreNextKeypress = false;

    	        /**
    	         * are we currently inside of a sequence?
    	         * type of action ("keyup" or "keydown" or "keypress") or false
    	         *
    	         * @type {boolean|string}
    	         */
    	        var _nextExpectedAction = false;

    	        /**
    	         * resets all sequence counters except for the ones passed in
    	         *
    	         * @param {Object} doNotReset
    	         * @returns void
    	         */
    	        function _resetSequences(doNotReset) {
    	            doNotReset = doNotReset || {};

    	            var activeSequences = false,
    	                key;

    	            for (key in _sequenceLevels) {
    	                if (doNotReset[key]) {
    	                    activeSequences = true;
    	                    continue;
    	                }
    	                _sequenceLevels[key] = 0;
    	            }

    	            if (!activeSequences) {
    	                _nextExpectedAction = false;
    	            }
    	        }

    	        /**
    	         * finds all callbacks that match based on the keycode, modifiers,
    	         * and action
    	         *
    	         * @param {string} character
    	         * @param {Array} modifiers
    	         * @param {Event|Object} e
    	         * @param {string=} sequenceName - name of the sequence we are looking for
    	         * @param {string=} combination
    	         * @param {number=} level
    	         * @returns {Array}
    	         */
    	        function _getMatches(character, modifiers, e, sequenceName, combination, level) {
    	            var i;
    	            var callback;
    	            var matches = [];
    	            var action = e.type;

    	            // if there are no events related to this keycode
    	            if (!self._callbacks[character]) {
    	                return [];
    	            }

    	            // if a modifier key is coming up on its own we should allow it
    	            if (action == 'keyup' && _isModifier(character)) {
    	                modifiers = [character];
    	            }

    	            // loop through all callbacks for the key that was pressed
    	            // and see if any of them match
    	            for (i = 0; i < self._callbacks[character].length; ++i) {
    	                callback = self._callbacks[character][i];

    	                // if a sequence name is not specified, but this is a sequence at
    	                // the wrong level then move onto the next match
    	                if (!sequenceName && callback.seq && _sequenceLevels[callback.seq] != callback.level) {
    	                    continue;
    	                }

    	                // if the action we are looking for doesn't match the action we got
    	                // then we should keep going
    	                if (action != callback.action) {
    	                    continue;
    	                }

    	                // if this is a keypress event and the meta key and control key
    	                // are not pressed that means that we need to only look at the
    	                // character, otherwise check the modifiers as well
    	                //
    	                // chrome will not fire a keypress if meta or control is down
    	                // safari will fire a keypress if meta or meta+shift is down
    	                // firefox will fire a keypress if meta or control is down
    	                if ((action == 'keypress' && !e.metaKey && !e.ctrlKey) || _modifiersMatch(modifiers, callback.modifiers)) {

    	                    // when you bind a combination or sequence a second time it
    	                    // should overwrite the first one.  if a sequenceName or
    	                    // combination is specified in this call it does just that
    	                    //
    	                    // @todo make deleting its own method?
    	                    var deleteCombo = !sequenceName && callback.combo == combination;
    	                    var deleteSequence = sequenceName && callback.seq == sequenceName && callback.level == level;
    	                    if (deleteCombo || deleteSequence) {
    	                        self._callbacks[character].splice(i, 1);
    	                    }

    	                    matches.push(callback);
    	                }
    	            }

    	            return matches;
    	        }

    	        /**
    	         * actually calls the callback function
    	         *
    	         * if your callback function returns false this will use the jquery
    	         * convention - prevent default and stop propogation on the event
    	         *
    	         * @param {Function} callback
    	         * @param {Event} e
    	         * @returns void
    	         */
    	        function _fireCallback(callback, e, combo, sequence) {

    	            // if this event should not happen stop here
    	            if (self.stopCallback(e, e.target || e.srcElement, combo, sequence)) {
    	                return;
    	            }

    	            if (callback(e, combo) === false) {
    	                _preventDefault(e);
    	                _stopPropagation(e);
    	            }
    	        }

    	        /**
    	         * handles a character key event
    	         *
    	         * @param {string} character
    	         * @param {Array} modifiers
    	         * @param {Event} e
    	         * @returns void
    	         */
    	        self._handleKey = function(character, modifiers, e) {
    	            var callbacks = _getMatches(character, modifiers, e);
    	            var i;
    	            var doNotReset = {};
    	            var maxLevel = 0;
    	            var processedSequenceCallback = false;

    	            // Calculate the maxLevel for sequences so we can only execute the longest callback sequence
    	            for (i = 0; i < callbacks.length; ++i) {
    	                if (callbacks[i].seq) {
    	                    maxLevel = Math.max(maxLevel, callbacks[i].level);
    	                }
    	            }

    	            // loop through matching callbacks for this key event
    	            for (i = 0; i < callbacks.length; ++i) {

    	                // fire for all sequence callbacks
    	                // this is because if for example you have multiple sequences
    	                // bound such as "g i" and "g t" they both need to fire the
    	                // callback for matching g cause otherwise you can only ever
    	                // match the first one
    	                if (callbacks[i].seq) {

    	                    // only fire callbacks for the maxLevel to prevent
    	                    // subsequences from also firing
    	                    //
    	                    // for example 'a option b' should not cause 'option b' to fire
    	                    // even though 'option b' is part of the other sequence
    	                    //
    	                    // any sequences that do not match here will be discarded
    	                    // below by the _resetSequences call
    	                    if (callbacks[i].level != maxLevel) {
    	                        continue;
    	                    }

    	                    processedSequenceCallback = true;

    	                    // keep a list of which sequences were matches for later
    	                    doNotReset[callbacks[i].seq] = 1;
    	                    _fireCallback(callbacks[i].callback, e, callbacks[i].combo, callbacks[i].seq);
    	                    continue;
    	                }

    	                // if there were no sequence matches but we are still here
    	                // that means this is a regular match so we should fire that
    	                if (!processedSequenceCallback) {
    	                    _fireCallback(callbacks[i].callback, e, callbacks[i].combo);
    	                }
    	            }

    	            // if the key you pressed matches the type of sequence without
    	            // being a modifier (ie "keyup" or "keypress") then we should
    	            // reset all sequences that were not matched by this event
    	            //
    	            // this is so, for example, if you have the sequence "h a t" and you
    	            // type "h e a r t" it does not match.  in this case the "e" will
    	            // cause the sequence to reset
    	            //
    	            // modifier keys are ignored because you can have a sequence
    	            // that contains modifiers such as "enter ctrl+space" and in most
    	            // cases the modifier key will be pressed before the next key
    	            //
    	            // also if you have a sequence such as "ctrl+b a" then pressing the
    	            // "b" key will trigger a "keypress" and a "keydown"
    	            //
    	            // the "keydown" is expected when there is a modifier, but the
    	            // "keypress" ends up matching the _nextExpectedAction since it occurs
    	            // after and that causes the sequence to reset
    	            //
    	            // we ignore keypresses in a sequence that directly follow a keydown
    	            // for the same character
    	            var ignoreThisKeypress = e.type == 'keypress' && _ignoreNextKeypress;
    	            if (e.type == _nextExpectedAction && !_isModifier(character) && !ignoreThisKeypress) {
    	                _resetSequences(doNotReset);
    	            }

    	            _ignoreNextKeypress = processedSequenceCallback && e.type == 'keydown';
    	        };

    	        /**
    	         * handles a keydown event
    	         *
    	         * @param {Event} e
    	         * @returns void
    	         */
    	        function _handleKeyEvent(e) {

    	            // normalize e.which for key events
    	            // @see http://stackoverflow.com/questions/4285627/javascript-keycode-vs-charcode-utter-confusion
    	            if (typeof e.which !== 'number') {
    	                e.which = e.keyCode;
    	            }

    	            var character = _characterFromEvent(e);

    	            // no character found then stop
    	            if (!character) {
    	                return;
    	            }

    	            // need to use === for the character check because the character can be 0
    	            if (e.type == 'keyup' && _ignoreNextKeyup === character) {
    	                _ignoreNextKeyup = false;
    	                return;
    	            }

    	            self.handleKey(character, _eventModifiers(e), e);
    	        }

    	        /**
    	         * called to set a 1 second timeout on the specified sequence
    	         *
    	         * this is so after each key press in the sequence you have 1 second
    	         * to press the next key before you have to start over
    	         *
    	         * @returns void
    	         */
    	        function _resetSequenceTimer() {
    	            clearTimeout(_resetTimer);
    	            _resetTimer = setTimeout(_resetSequences, 1000);
    	        }

    	        /**
    	         * binds a key sequence to an event
    	         *
    	         * @param {string} combo - combo specified in bind call
    	         * @param {Array} keys
    	         * @param {Function} callback
    	         * @param {string=} action
    	         * @returns void
    	         */
    	        function _bindSequence(combo, keys, callback, action) {

    	            // start off by adding a sequence level record for this combination
    	            // and setting the level to 0
    	            _sequenceLevels[combo] = 0;

    	            /**
    	             * callback to increase the sequence level for this sequence and reset
    	             * all other sequences that were active
    	             *
    	             * @param {string} nextAction
    	             * @returns {Function}
    	             */
    	            function _increaseSequence(nextAction) {
    	                return function() {
    	                    _nextExpectedAction = nextAction;
    	                    ++_sequenceLevels[combo];
    	                    _resetSequenceTimer();
    	                };
    	            }

    	            /**
    	             * wraps the specified callback inside of another function in order
    	             * to reset all sequence counters as soon as this sequence is done
    	             *
    	             * @param {Event} e
    	             * @returns void
    	             */
    	            function _callbackAndReset(e) {
    	                _fireCallback(callback, e, combo);

    	                // we should ignore the next key up if the action is key down
    	                // or keypress.  this is so if you finish a sequence and
    	                // release the key the final key will not trigger a keyup
    	                if (action !== 'keyup') {
    	                    _ignoreNextKeyup = _characterFromEvent(e);
    	                }

    	                // weird race condition if a sequence ends with the key
    	                // another sequence begins with
    	                setTimeout(_resetSequences, 10);
    	            }

    	            // loop through keys one at a time and bind the appropriate callback
    	            // function.  for any key leading up to the final one it should
    	            // increase the sequence. after the final, it should reset all sequences
    	            //
    	            // if an action is specified in the original bind call then that will
    	            // be used throughout.  otherwise we will pass the action that the
    	            // next key in the sequence should match.  this allows a sequence
    	            // to mix and match keypress and keydown events depending on which
    	            // ones are better suited to the key provided
    	            for (var i = 0; i < keys.length; ++i) {
    	                var isFinal = i + 1 === keys.length;
    	                var wrappedCallback = isFinal ? _callbackAndReset : _increaseSequence(action || _getKeyInfo(keys[i + 1]).action);
    	                _bindSingle(keys[i], wrappedCallback, action, combo, i);
    	            }
    	        }

    	        /**
    	         * binds a single keyboard combination
    	         *
    	         * @param {string} combination
    	         * @param {Function} callback
    	         * @param {string=} action
    	         * @param {string=} sequenceName - name of sequence if part of sequence
    	         * @param {number=} level - what part of the sequence the command is
    	         * @returns void
    	         */
    	        function _bindSingle(combination, callback, action, sequenceName, level) {

    	            // store a direct mapped reference for use with Mousetrap.trigger
    	            self._directMap[combination + ':' + action] = callback;

    	            // make sure multiple spaces in a row become a single space
    	            combination = combination.replace(/\s+/g, ' ');

    	            var sequence = combination.split(' ');
    	            var info;

    	            // if this pattern is a sequence of keys then run through this method
    	            // to reprocess each pattern one key at a time
    	            if (sequence.length > 1) {
    	                _bindSequence(combination, sequence, callback, action);
    	                return;
    	            }

    	            info = _getKeyInfo(combination, action);

    	            // make sure to initialize array if this is the first time
    	            // a callback is added for this key
    	            self._callbacks[info.key] = self._callbacks[info.key] || [];

    	            // remove an existing match if there is one
    	            _getMatches(info.key, info.modifiers, {type: info.action}, sequenceName, combination, level);

    	            // add this call back to the array
    	            // if it is a sequence put it at the beginning
    	            // if not put it at the end
    	            //
    	            // this is important because the way these are processed expects
    	            // the sequence ones to come first
    	            self._callbacks[info.key][sequenceName ? 'unshift' : 'push']({
    	                callback: callback,
    	                modifiers: info.modifiers,
    	                action: info.action,
    	                seq: sequenceName,
    	                level: level,
    	                combo: combination
    	            });
    	        }

    	        /**
    	         * binds multiple combinations to the same callback
    	         *
    	         * @param {Array} combinations
    	         * @param {Function} callback
    	         * @param {string|undefined} action
    	         * @returns void
    	         */
    	        self._bindMultiple = function(combinations, callback, action) {
    	            for (var i = 0; i < combinations.length; ++i) {
    	                _bindSingle(combinations[i], callback, action);
    	            }
    	        };

    	        // start!
    	        _addEvent(targetElement, 'keypress', _handleKeyEvent);
    	        _addEvent(targetElement, 'keydown', _handleKeyEvent);
    	        _addEvent(targetElement, 'keyup', _handleKeyEvent);
    	    }

    	    /**
    	     * binds an event to mousetrap
    	     *
    	     * can be a single key, a combination of keys separated with +,
    	     * an array of keys, or a sequence of keys separated by spaces
    	     *
    	     * be sure to list the modifier keys first to make sure that the
    	     * correct key ends up getting bound (the last key in the pattern)
    	     *
    	     * @param {string|Array} keys
    	     * @param {Function} callback
    	     * @param {string=} action - 'keypress', 'keydown', or 'keyup'
    	     * @returns void
    	     */
    	    Mousetrap.prototype.bind = function(keys, callback, action) {
    	        var self = this;
    	        keys = keys instanceof Array ? keys : [keys];
    	        self._bindMultiple.call(self, keys, callback, action);
    	        return self;
    	    };

    	    /**
    	     * unbinds an event to mousetrap
    	     *
    	     * the unbinding sets the callback function of the specified key combo
    	     * to an empty function and deletes the corresponding key in the
    	     * _directMap dict.
    	     *
    	     * TODO: actually remove this from the _callbacks dictionary instead
    	     * of binding an empty function
    	     *
    	     * the keycombo+action has to be exactly the same as
    	     * it was defined in the bind method
    	     *
    	     * @param {string|Array} keys
    	     * @param {string} action
    	     * @returns void
    	     */
    	    Mousetrap.prototype.unbind = function(keys, action) {
    	        var self = this;
    	        return self.bind.call(self, keys, function() {}, action);
    	    };

    	    /**
    	     * triggers an event that has already been bound
    	     *
    	     * @param {string} keys
    	     * @param {string=} action
    	     * @returns void
    	     */
    	    Mousetrap.prototype.trigger = function(keys, action) {
    	        var self = this;
    	        if (self._directMap[keys + ':' + action]) {
    	            self._directMap[keys + ':' + action]({}, keys);
    	        }
    	        return self;
    	    };

    	    /**
    	     * resets the library back to its initial state.  this is useful
    	     * if you want to clear out the current keyboard shortcuts and bind
    	     * new ones - for example if you switch to another page
    	     *
    	     * @returns void
    	     */
    	    Mousetrap.prototype.reset = function() {
    	        var self = this;
    	        self._callbacks = {};
    	        self._directMap = {};
    	        return self;
    	    };

    	    /**
    	     * should we stop this event before firing off callbacks
    	     *
    	     * @param {Event} e
    	     * @param {Element} element
    	     * @return {boolean}
    	     */
    	    Mousetrap.prototype.stopCallback = function(e, element) {
    	        var self = this;

    	        // if the element has the class "mousetrap" then no need to stop
    	        if ((' ' + element.className + ' ').indexOf(' mousetrap ') > -1) {
    	            return false;
    	        }

    	        if (_belongsTo(element, self.target)) {
    	            return false;
    	        }

    	        // Events originating from a shadow DOM are re-targetted and `e.target` is the shadow host,
    	        // not the initial event target in the shadow tree. Note that not all events cross the
    	        // shadow boundary.
    	        // For shadow trees with `mode: 'open'`, the initial event target is the first element in
    	        // the event’s composed path. For shadow trees with `mode: 'closed'`, the initial event
    	        // target cannot be obtained.
    	        if ('composedPath' in e && typeof e.composedPath === 'function') {
    	            // For open shadow trees, update `element` so that the following check works.
    	            var initialEventTarget = e.composedPath()[0];
    	            if (initialEventTarget !== e.target) {
    	                element = initialEventTarget;
    	            }
    	        }

    	        // stop for input, select, and textarea
    	        return element.tagName == 'INPUT' || element.tagName == 'SELECT' || element.tagName == 'TEXTAREA' || element.isContentEditable;
    	    };

    	    /**
    	     * exposes _handleKey publicly so it can be overwritten by extensions
    	     */
    	    Mousetrap.prototype.handleKey = function() {
    	        var self = this;
    	        return self._handleKey.apply(self, arguments);
    	    };

    	    /**
    	     * allow custom key mappings
    	     */
    	    Mousetrap.addKeycodes = function(object) {
    	        for (var key in object) {
    	            if (object.hasOwnProperty(key)) {
    	                _MAP[key] = object[key];
    	            }
    	        }
    	        _REVERSE_MAP = null;
    	    };

    	    /**
    	     * Init the global mousetrap functions
    	     *
    	     * This method is needed to allow the global mousetrap functions to work
    	     * now that mousetrap is a constructor function.
    	     */
    	    Mousetrap.init = function() {
    	        var documentMousetrap = Mousetrap(document);
    	        for (var method in documentMousetrap) {
    	            if (method.charAt(0) !== '_') {
    	                Mousetrap[method] = (function(method) {
    	                    return function() {
    	                        return documentMousetrap[method].apply(documentMousetrap, arguments);
    	                    };
    	                } (method));
    	            }
    	        }
    	    };

    	    Mousetrap.init();

    	    // expose mousetrap to the global object
    	    window.Mousetrap = Mousetrap;

    	    // expose as a common js module
    	    if (module.exports) {
    	        module.exports = Mousetrap;
    	    }

    	    // expose mousetrap as an AMD module
    	    if (typeof undefined$1 === 'function' && undefined$1.amd) {
    	        undefined$1(function() {
    	            return Mousetrap;
    	        });
    	    }
    	}) (typeof window !== 'undefined' ? window : null, typeof  window !== 'undefined' ? document : null);
    } (mousetrap));

    class Gating {
        constructor(ctrl) {
            this.ctrl = ctrl;
            this.gating = null;
            this.choices = [];
        }
        start(fen, orig, dest) {
            var _a;
            const ground = this.ctrl.chessground;
            if (this.canGate(fen, orig)) {
                const pocket = getPockets(fen);
                const color = this.ctrl.turnColor;
                this.choices = ['h', 'e', 'q', 'r', 'b', 'n'].filter(letter => lc(pocket, letter, color === "white") > 0).map(roleOf);
                // prevent empty only choices in s-house (when H and E dropped before any gating move)
                if (this.choices.length === 0)
                    return false;
                // add (first) empty gating choice
                this.choices.unshift("");
                const orientation = ground.state.orientation;
                const moves = { "normal": [orig, dest] };
                let castling = false;
                let rookOrig = null;
                const moveLength = dest.charCodeAt(0) - orig.charCodeAt(0);
                const movedPiece = ground.state.boardState.pieces.get(dest);
                const movedRole = (_a = movedPiece === null || movedPiece === void 0 ? void 0 : movedPiece.role) !== null && _a !== void 0 ? _a : "k-piece";
                if (movedRole === "k-piece") {
                    // King long move is always castling move
                    if (Math.abs(moveLength) > 1) {
                        castling = true;
                        rookOrig = (((moveLength > 1) ? "h" : "a") + orig[1]);
                    }
                    // King takes own Rook is always castling move in 960 games
                    if (this.ctrl.chess960 && this.ctrl.prevPieces !== undefined) {
                        const prevPiece = this.ctrl.prevPieces.get(dest);
                        if (prevPiece !== undefined && prevPiece.role === "r-piece" && prevPiece.color === color) {
                            castling = true;
                            rookOrig = dest;
                            // remove gating possibility if king move orig is in castling destination squares 
                            if (this.inCastlingTargets(orig, color, moveLength)) {
                                delete moves["normal"];
                            }
                        }
                    }
                }
                if (castling) {
                    // UCI move castling + gating to rook vacant square is rook takes king!
                    if (rookOrig !== null && !this.inCastlingTargets(rookOrig, color, moveLength)) {
                        moves["special"] = [rookOrig, orig, dest];
                    }
                    ground.setPieces(new Map([
                        [((moveLength > 0) ? "f" : "d") + orig[1], { color: color, role: 'r-piece' }],
                        [((moveLength > 0) ? "g" : "c") + orig[1], { color: color, role: 'k-piece' }],
                    ]));
                }
                // It is possible in 960 that we have no valid gating square finally
                if (Object.keys(moves).length === 0)
                    return false;
                this.drawGating(moves, color, orientation);
                this.gating = {
                    moves: moves,
                };
                return true;
            }
            return false;
        }
        inCastlingTargets(key, color, moveLength) {
            if (color === "white") {
                if (moveLength > 0) {
                    // O-O
                    return (key === 'f1') || (key === 'g1');
                }
                else {
                    // O-O-O
                    return (key === 'c1') || (key === 'd1');
                }
            }
            else {
                if (moveLength > 0) {
                    return (key === 'f8') || (key === 'g8');
                }
                else {
                    return (key === 'c8') || (key === 'd8');
                }
            }
        }
        canGate(fen, orig) {
            const parts = fen.split(" ");
            const castling = parts[2];
            const color = parts[1] === 'w' ? 'white' : 'black';
            const cc = (str) => colorCase(color, str);
            const gateRank = color === 'white' ? '1' : '8';
            if (orig[1] === gateRank) {
                if (castling.includes(cc(orig[0]))) {
                    return true;
                }
                if (!this.ctrl.chess960) {
                    // In non-960, if both the king and the corresponding rook haven't moved,
                    // the virginity of BOTH pieces will be encoded in the castling right
                    if (orig[0] === 'e' || orig[0] === 'h')
                        if (castling.includes(cc('K')))
                            return true;
                    if (orig[0] === 'e' || orig[0] === 'a')
                        if (castling.includes(cc('Q')))
                            return true;
                }
            }
            return false;
        }
        gate(orig, color, role) {
            this.ctrl.chessground.newPiece({ "role": role, "color": color }, orig, true);
        }
        drawGating(moves, color, orientation) {
            const container = toVNode(document.querySelector('extension'));
            patch(container, this.view(moves, color, orientation));
        }
        drawNoGating() {
            const container = document.getElementById('extension_choice');
            patch(container, h('extension'));
        }
        finish(gatedPieceRole, moveType, color) {
            if (this.gating) {
                this.drawNoGating();
                const move = this.gating.moves[moveType];
                if (gatedPieceRole && move)
                    this.gate(move[0], color, gatedPieceRole);
                const gatedPieceLetter = gatedPieceRole ? letterOf(gatedPieceRole) : "";
                if (move) {
                    if (moveType === "special") {
                        if (gatedPieceLetter === "") {
                            // empty gating was chosen on vacant rook square (simple castling)
                            this.ctrl.sendMove(move[1], move[2], gatedPieceLetter);
                        }
                        else {
                            // gating to rook square while castling need special UCI move (rook takes king)
                            this.ctrl.sendMove(move[0], move[1], gatedPieceLetter);
                        }
                    }
                    else {
                        this.ctrl.sendMove(move[0], move[1], gatedPieceLetter);
                    }
                }
                this.gating = null;
            }
        }
        cancel() {
            this.drawNoGating();
            this.ctrl.goPly(this.ctrl.ply);
            return;
        }
        squareView(orig, color, orientation, moveType) {
            const leftFile = key2pos(orig)[0];
            const left = (orientation === "white" ? leftFile : 7 - leftFile) * 12.5;
            return this.choices.map((gatedPieceRole, i) => {
                const top = (color === orientation ? 7 - i : i) * 12.5;
                return h("square", {
                    style: { top: top + "%", left: left + "%" },
                    hook: bind("click", e => {
                        e.stopPropagation();
                        this.finish(gatedPieceRole, moveType, color);
                    }, null)
                }, [
                    h("piece." + gatedPieceRole + "." + color)
                ]);
            });
        }
        view(moves, color, orientation) {
            const direction = color === orientation ? "top" : "bottom";
            let squares = [];
            if (moves.normal)
                squares = this.squareView(moves.normal[0], color, orientation, "normal");
            if (moves.special)
                squares = squares.concat(this.squareView(moves.special[0], color, orientation, "special"));
            return h("div#extension_choice." + direction, {
                hook: {
                    insert: vnode => {
                        const el = vnode.elm;
                        el.addEventListener("click", () => this.cancel());
                        el.addEventListener("contextmenu", e => {
                            e.preventDefault();
                            return false;
                        });
                    }
                }
            }, squares);
        }
    }

    class Promotion {
        constructor(ctrl) {
            this.ctrl = ctrl;
            this.choices = {};
        }
        start(movingRole, orig, dest, disableAutoPromote = false) {
            const ground = this.ctrl.chessground;
            // in 960 castling case (king takes rook) dest piece may be undefined
            if (ground.state.boardState.pieces.get(dest) === undefined)
                return false;
            if (this.canPromote(movingRole, orig, dest)) {
                const color = this.ctrl.turnColor;
                const orientation = ground.state.orientation;
                const pchoices = this.promotionChoices(movingRole, orig, dest);
                const autoSuffix = this.ctrl.variant.promotionOrder[0];
                const autoRole = ["shogi", "kyoto"].includes(this.ctrl.variant.promotion) ?
                    undefined :
                    roleOf(autoSuffix);
                if (this.ctrl.variant.autoPromoteable &&
                    this.ctrl.autoPromote &&
                    !disableAutoPromote &&
                    autoRole &&
                    autoRole in pchoices)
                    this.choices = { [autoRole]: autoSuffix };
                else
                    this.choices = pchoices;
                if (Object.keys(this.choices).length === 1) {
                    const role = Object.keys(this.choices)[0];
                    const promo = this.choices[role];
                    this.promote(ground, dest, role);
                    this.ctrl.sendMove(orig, dest, promo);
                }
                else {
                    this.drawPromo(dest, color, orientation);
                    this.promoting = {
                        orig: orig,
                        dest: dest,
                    };
                }
                return true;
            }
            return false;
        }
        promotionFilter(move, role, orig, dest) {
            if (this.ctrl.variant.promotion === 'kyoto')
                if (isDropOrig(orig))
                    return move.startsWith("+" + letterOf(role, true));
            return move.slice(0, -1) === orig + dest;
        }
        canPromote(role, orig, dest) {
            return this.ctrl.promotions.some(move => this.promotionFilter(move, role, orig, dest));
        }
        promotionChoices(role, orig, dest) {
            const variant = this.ctrl.variant;
            const possiblePromotions = this.ctrl.promotions.filter(move => this.promotionFilter(move, role, orig, dest));
            const choice = {};
            switch (variant.promotion) {
                case 'shogi':
                    choice["p" + role] = "+";
                    break;
                case 'kyoto':
                    if (isDropOrig(orig) || possiblePromotions[0].slice(-1) === "+")
                        choice["p" + role] = "+";
                    else
                        choice[role.slice(1)] = "-";
                    break;
                default:
                    possiblePromotions.
                        map(move => move.slice(-1)).
                        sort((a, b) => variant.promotionOrder.indexOf(a) - variant.promotionOrder.indexOf(b)).
                        forEach(letter => {
                        choice[roleOf(letter)] = letter;
                    });
            }
            if (!this.isMandatoryPromotion(role, orig, dest))
                choice[role] = "";
            return choice;
        }
        isMandatoryPromotion(role, orig, dest) {
            return this.ctrl.variant.isMandatoryPromotion(role, orig, dest, this.ctrl.mycolor);
        }
        promote(g, key, role) {
            const piece = g.state.boardState.pieces.get(key);
            if (piece && piece.role !== role) {
                g.setPieces(new Map([[key, {
                            color: piece.color,
                            role: role,
                            promoted: true
                        }]]));
            }
        }
        drawPromo(dest, color, orientation) {
            const container = toVNode(document.querySelector('extension'));
            patch(container, this.view(dest, color, orientation));
        }
        drawNoPromo() {
            const container = document.getElementById('extension_choice');
            patch(container, h('extension'));
        }
        finish(role) {
            if (this.promoting) {
                this.drawNoPromo();
                this.promote(this.ctrl.chessground, this.promoting.dest, role);
                const promo = this.choices[role];
                if (this.ctrl.variant.promotion === 'kyoto') {
                    const dropOrig = dropOrigOf(role);
                    this.ctrl.sendMove(dropOrig, this.promoting.dest, "");
                }
                else {
                    this.ctrl.sendMove(this.promoting.orig, this.promoting.dest, promo);
                }
                this.promoting = undefined;
            }
        }
        cancel() {
            this.drawNoPromo();
            this.ctrl.goPly(this.ctrl.ply);
            return;
        }
        view(dest, color, orientation) {
            const width = this.ctrl.variant.boardWidth;
            const height = this.ctrl.variant.boardHeight;
            const pos = key2pos(dest);
            const choices = Object.keys(this.choices);
            const direction = color === orientation ? "bottom" : "top";
            const leftFile = (orientation === "white") ? pos[0] : width - 1 - pos[0];
            const left = leftFile * (100 / width);
            const topRank = (orientation === "white") ? height - 1 - pos[1] : pos[1];
            const side = color === orientation ? "ally" : "enemy";
            return h("div#extension_choice", {
                hook: {
                    insert: vnode => {
                        const el = vnode.elm;
                        el.addEventListener("click", () => this.cancel());
                        el.addEventListener("contextmenu", e => {
                            e.preventDefault();
                            return false;
                        });
                    }
                }
            }, choices.map((role, i) => {
                const rank = topRank + (direction === "bottom" ? i : -i);
                const top = rank * (100 / height);
                return h("square", {
                    style: { top: top + "%", left: left + "%" },
                    hook: bind("click", e => {
                        e.stopPropagation();
                        this.finish(role);
                    }, null)
                }, [h(`piece.${role}.${color}.${side}`)]);
            }));
        }
    }

    const diff = (a, b) => Math.abs(a - b);
    const pawn = (color) => (x1, y1, x2, y2) => diff(x1, x2) < 2 &&
        (color === 'white'
            ? // allow 2 squares from first two ranks, for horde
                y2 === y1 + 1 || (y1 <= 1 && y2 === y1 + 2 && x1 === x2)
            : y2 === y1 - 1 || (y1 >= 6 && y2 === y1 - 2 && x1 === x2));
    const knight = (x1, y1, x2, y2) => {
        const xd = diff(x1, x2);
        const yd = diff(y1, y2);
        return (xd === 1 && yd === 2) || (xd === 2 && yd === 1);
    };
    const bishop = (x1, y1, x2, y2) => {
        return diff(x1, x2) === diff(y1, y2);
    };
    const rook = (x1, y1, x2, y2) => {
        return x1 === x2 || y1 === y2;
    };
    const queen = (x1, y1, x2, y2) => {
        return bishop(x1, y1, x2, y2) || rook(x1, y1, x2, y2);
    };
    const king = (color, rookFiles, canCastle) => (x1, y1, x2, y2) => (diff(x1, x2) < 2 && diff(y1, y2) < 2) ||
        (canCastle &&
            y1 === y2 &&
            y1 === (color === 'white' ? 0 : 7) &&
            ((x1 === 4 && ((x2 === 2 && rookFiles.includes(0)) || (x2 === 6 && rookFiles.includes(7)))) ||
                rookFiles.includes(x2)));
    function rookFilesOf(pieces, color) {
        const backrank = color === 'white' ? '1' : '8';
        const files = [];
        for (const [key, piece] of pieces) {
            if (key[1] === backrank && piece.color === color && piece.role === 'r-piece') {
                files.push(key2pos(key)[0]);
            }
        }
        return files;
    }
    /* TODO make use of these
    function and(...ms: Mobility[]): Mobility {
      return (x1, y1, x2, y2) => ms.map(m => m(x1, y1, x2, y2)).reduce((a, b) => a && b);
    }

    function or(...ms: Mobility[]): Mobility {
      return (x1, y1, x2, y2) => ms.map(m => m(x1, y1, x2, y2)).reduce((a, b) => a || b);
    }

    function not(m: Mobility): Mobility {
      return (x1, y1, x2, y2) => !m(x1, y1, x2, y2);
    }
    */
    function backrank(color) {
        return color === 'white' ? 0 : 7;
    }
    // king without castling
    const kingNoCastling = (x1, y1, x2, y2) => {
        return diff(x1, x2) < 2 && diff(y1, y2) < 2;
    };
    // 960 king (can only castle with king takes rook)
    function king960(color, rookFiles, canCastle) {
        return (x1, y1, x2, y2) => kingNoCastling(x1, y1, x2, y2) || (canCastle && y1 === y2 && y1 === backrank(color) && rookFiles.includes(x2));
    }
    // capablanca king (different castling files from standard chess king)
    function kingCapa(color, rookFiles, canCastle) {
        return (x1, y1, x2, y2) => kingNoCastling(x1, y1, x2, y2) ||
            (canCastle &&
                y1 === y2 &&
                y1 === backrank(color) &&
                x1 === 5 &&
                ((x2 === 8 && rookFiles.includes(9)) || (x2 === 2 && rookFiles.includes(0))));
    }
    // shako king (different castling files and ranks from standard chess king)
    function kingShako(color, rookFiles, canCastle) {
        return (x1, y1, x2, y2) => kingNoCastling(x1, y1, x2, y2) ||
            (canCastle &&
                y1 === y2 &&
                y1 === (color === 'white' ? 1 : 8) &&
                x1 === 5 &&
                ((x2 === 7 && rookFiles.includes(8)) || (x2 === 3 && rookFiles.includes(1))));
    }
    function rookFilesOfShako(pieces, color) {
        const backrank = color === 'white' ? '2' : '9';
        const files = [];
        for (const [key, piece] of pieces) {
            if (key[1] === backrank && piece.color === color && piece.role === 'r-piece') {
                files.push(key2pos(key)[0]);
            }
        }
        return files;
    }
    // ouk king (can jump like a knight to the second row on its first move)
    function kingOuk(color, canCastle) {
        return (x1, y1, x2, y2) => kingNoCastling(x1, y1, x2, y2) ||
            (canCastle && (color === 'white' ?
                x1 === 3 && y1 === 0 && (x2 === 1 || x2 === 5) && y2 === 1 :
                x1 === 4 && y1 === 7 && (x2 === 6 || x2 === 2) && y2 === 6));
    }
    function pawnNoDoubleStep(color) {
        return (x1, y1, x2, y2) => diff(x1, x2) < 2 && (color === 'white' ? y2 === y1 + 1 : y2 === y1 - 1);
    }
    // grand pawn (10x10 board, can move two squares on third row)
    function pawnGrand(color) {
        return (x1, y1, x2, y2) => diff(x1, x2) < 2 &&
            (color === 'white'
                ? y2 === y1 + 1 || (y1 <= 2 && y2 === y1 + 2 && x1 === x2)
                : y2 === y1 - 1 || (y1 >= 7 && y2 === y1 - 2 && x1 === x2));
    }
    // sittuyin pawn (8x8 board, can move diagonally backward to promote on some squares)
    function pawnSittuyin(pieces, color) {
        return (x1, y1, x2, y2) => {
            let canPromote = (color === 'white' ? y1 >= 4 : y1 <= 3) && (x1 === y1 || 7 - x1 === y1);
            if (!canPromote) {
                let pawnCount = 0;
                for (const [_, piece] of pieces)
                    if (piece.role === 'p-piece' && piece.color === color)
                        pawnCount += 1;
                canPromote || (canPromote = pawnCount === 1);
            }
            return pawnNoDoubleStep(color)(x1, y1, x2, y2) || (canPromote && ferz(x1, y1, x2, y2));
        };
    }
    // wazir
    const wazir = (x1, y1, x2, y2) => {
        const xd = diff(x1, x2);
        const yd = diff(y1, y2);
        return (xd === 1 && yd === 0) || (xd === 0 && yd === 1);
    };
    // ferz, met
    const ferz = (x1, y1, x2, y2) => diff(x1, x2) === diff(y1, y2) && diff(x1, x2) === 1;
    // ouk ferz (can jump two squares forward on its first move)
    function ferzOuk(color) {
        return (x1, y1, x2, y2) => ferz(x1, y1, x2, y2) ||
            (color === 'white' ?
                x1 === 4 && y1 === 0 && x2 === 4 && y2 === 2 :
                x1 === 3 && y1 === 7 && x2 === 3 && y2 === 5);
    }
    // shatranj elephant
    const elephant = (x1, y1, x2, y2) => {
        const xd = diff(x1, x2);
        const yd = diff(y1, y2);
        return xd === yd && xd === 2;
    };
    // archbishop (knight + bishop)
    const archbishop = (x1, y1, x2, y2) => {
        return bishop(x1, y1, x2, y2) || knight(x1, y1, x2, y2);
    };
    // chancellor (knight + rook)
    const chancellor = (x1, y1, x2, y2) => {
        return rook(x1, y1, x2, y2) || knight(x1, y1, x2, y2);
    };
    // amazon (knight + queen)
    const amazon = (x1, y1, x2, y2) => {
        return bishop(x1, y1, x2, y2) || rook(x1, y1, x2, y2) || knight(x1, y1, x2, y2);
    };
    // shogun general (knight + king)
    const centaur = (x1, y1, x2, y2) => {
        return kingNoCastling(x1, y1, x2, y2) || knight(x1, y1, x2, y2);
    };
    // shogi lance
    function shogiLance(color) {
        return (x1, y1, x2, y2) => x2 === x1 && (color === 'white' ? y2 > y1 : y2 < y1);
    }
    // shogi silver, makruk khon, sittuyin elephant
    function shogiSilver(color) {
        return (x1, y1, x2, y2) => ferz(x1, y1, x2, y2) || (x1 === x2 && (color === 'white' ? y2 === y1 + 1 : y2 === y1 - 1));
    }
    // shogi gold, promoted pawn/knight/lance/silver
    function shogiGold(color) {
        return (x1, y1, x2, y2) => wazir(x1, y1, x2, y2) || (diff(x1, x2) < 2 && (color === 'white' ? y2 === y1 + 1 : y2 === y1 - 1));
    }
    // shogi pawn
    function shogiPawn(color) {
        return (x1, y1, x2, y2) => x2 === x1 && (color === 'white' ? y2 === y1 + 1 : y2 === y1 - 1);
    }
    // shogi knight
    function shogiKnight(color) {
        return (x1, y1, x2, y2) => (x2 === x1 - 1 || x2 === x1 + 1) && (color === 'white' ? y2 === y1 + 2 : y2 === y1 - 2);
    }
    // shogi promoted rook (dragon king)
    const shogiDragon = (x1, y1, x2, y2) => {
        return rook(x1, y1, x2, y2) || ferz(x1, y1, x2, y2);
    };
    // shogi promoted bishop (dragon horse)
    const shogiHorse = (x1, y1, x2, y2) => {
        return bishop(x1, y1, x2, y2) || wazir(x1, y1, x2, y2);
    };
    function _palace(bd, color) {
        const middleFile = Math.floor(bd.width / 2);
        const startingRank = color === 'white' ? 0 : bd.height - 3;
        return [
            [middleFile - 1, startingRank + 2],
            [middleFile, startingRank + 2],
            [middleFile + 1, startingRank + 2],
            [middleFile - 1, startingRank + 1],
            [middleFile, startingRank + 1],
            [middleFile + 1, startingRank + 1],
            [middleFile - 1, startingRank],
            [middleFile, startingRank],
            [middleFile + 1, startingRank],
        ];
    }
    function memoizePalace() {
        const cache = {};
        return (bd, color) => {
            const key = `${bd.width}x${bd.height}${color.slice(0, 1)}`;
            if (!(key in cache))
                cache[key] = _palace(bd, color);
            return cache[key];
        };
    }
    const palace = memoizePalace();
    // xiangqi pawn
    function xiangqiPawn(color) {
        return (x1, y1, x2, y2) => (x2 === x1 && (color === 'white' ? y2 === y1 + 1 : y2 === y1 - 1)) ||
            (y2 === y1 && diff(x1, x2) < 2 && (color === 'white' ? y1 > 4 : y1 < 5));
    }
    // minixiangqi pawn
    function minixiangqiPawn(color) {
        return (x1, y1, x2, y2) => (x2 === x1 && (color === 'white' ? y2 === y1 + 1 : y2 === y1 - 1)) || (y2 === y1 && diff(x1, x2) < 2);
    }
    // xiangqi elephant
    function xiangqiElephant(color) {
        return (x1, y1, x2, y2) => elephant(x1, y1, x2, y2) && (color === 'white' ? y2 < 5 : y2 > 4);
    }
    // xiangqi advisor
    function xiangqiAdvisor(color, bd) {
        const p = palace(bd, color);
        return (x1, y1, x2, y2) => ferz(x1, y1, x2, y2) && p.some(point => point[0] === x2 && point[1] === y2);
    }
    // xiangqi general (king)
    function xiangqiKing(color, bd) {
        const p = palace(bd, color);
        return (x1, y1, x2, y2) => wazir(x1, y1, x2, y2) && p.some(point => point[0] === x2 && point[1] === y2);
    }
    // shako elephant
    const shakoElephant = (x1, y1, x2, y2) => {
        return diff(x1, x2) === diff(y1, y2) && diff(x1, x2) < 3;
    };
    // janggi elephant
    const janggiElephant = (x1, y1, x2, y2) => {
        const xd = diff(x1, x2);
        const yd = diff(y1, y2);
        return (xd === 2 && yd === 3) || (xd === 3 && yd === 2);
    };
    // janggi pawn
    function janggiPawn(color, bd) {
        const oppPalace = palace(bd, opposite(color));
        return (x1, y1, x2, y2) => {
            const palacePos = oppPalace.findIndex(point => point[0] === x1 && point[1] === y1);
            let additionalMobility;
            switch (palacePos) {
                case 0:
                    additionalMobility = (x1, y1, x2, y2) => x2 === x1 + 1 && color === 'black' && y2 === y1 - 1;
                    break;
                case 2:
                    additionalMobility = (x1, y1, x2, y2) => x2 === x1 - 1 && color === 'black' && y2 === y1 - 1;
                    break;
                case 4:
                    additionalMobility = (x1, y1, x2, y2) => diff(x1, x2) === 1 && (color === 'white' ? y2 === y1 + 1 : y2 === y1 - 1);
                    break;
                case 6:
                    additionalMobility = (x1, y1, x2, y2) => x2 === x1 + 1 && color === 'white' && y2 === y1 + 1;
                    break;
                case 8:
                    additionalMobility = (x1, y1, x2, y2) => x2 === x1 - 1 && color === 'white' && y2 === y1 + 1;
                    break;
                default:
                    additionalMobility = () => false;
            }
            return minixiangqiPawn(color)(x1, y1, x2, y2) || additionalMobility(x1, y1, x2, y2);
        };
    }
    // janggi rook
    function janggiRook(bd) {
        const wPalace = palace(bd, 'white');
        const bPalace = palace(bd, 'black');
        return (x1, y1, x2, y2) => {
            let additionalMobility;
            const wPalacePos = wPalace.findIndex(point => point[0] === x1 && point[1] === y1);
            const bPalacePos = bPalace.findIndex(point => point[0] === x1 && point[1] === y1);
            const palacePos = wPalacePos !== -1 ? wPalacePos : bPalacePos;
            const xd = diff(x1, x2);
            const yd = diff(y1, y2);
            switch (palacePos) {
                case 0:
                    additionalMobility = (x1, y1, x2, y2) => xd === yd && x2 > x1 && x2 <= x1 + 2 && y2 < y1 && y2 >= y1 - 2;
                    break;
                case 2:
                    additionalMobility = (x1, y1, x2, y2) => xd === yd && x2 < x1 && x2 >= x1 - 2 && y2 < y1 && y2 >= y1 - 2;
                    break;
                case 4:
                    additionalMobility = ferz;
                    break;
                case 6:
                    additionalMobility = (x1, y1, x2, y2) => xd === yd && x2 > x1 && x2 <= x1 + 2 && y2 > y1 && y2 <= y1 + 2;
                    break;
                case 8:
                    additionalMobility = (x1, y1, x2, y2) => xd === yd && x2 < x1 && x2 >= x1 - 2 && y2 > y1 && y2 <= y1 + 2;
                    break;
                default:
                    additionalMobility = () => false;
            }
            return rook(x1, y1, x2, y2) || additionalMobility(x1, y1, x2, y2);
        };
    }
    // janggi general (king)
    function janggiKing(color, bd) {
        const ownPalace = palace(bd, color);
        return (x1, y1, x2, y2) => {
            const palacePos = ownPalace.findIndex(point => point[0] === x1 && point[1] === y1);
            let additionalMobility;
            switch (palacePos) {
                case 0:
                    additionalMobility = (x1, y1, x2, y2) => x2 === x1 + 1 && y2 === y1 - 1;
                    break;
                case 2:
                    additionalMobility = (x1, y1, x2, y2) => x2 === x1 - 1 && y2 === y1 - 1;
                    break;
                case 4:
                    additionalMobility = ferz;
                    break;
                case 6:
                    additionalMobility = (x1, y1, x2, y2) => x2 === x1 + 1 && y2 === y1 + 1;
                    break;
                case 8:
                    additionalMobility = (x1, y1, x2, y2) => x2 === x1 - 1 && y2 === y1 + 1;
                    break;
                default:
                    additionalMobility = () => false;
            }
            return ((wazir(x1, y1, x2, y2) || additionalMobility(x1, y1, x2, y2)) &&
                ownPalace.some(point => point[0] === x2 && point[1] === y2));
        };
    }
    // musketeer leopard
    const musketeerLeopard = (x1, y1, x2, y2) => {
        const xd = diff(x1, x2);
        const yd = diff(y1, y2);
        return (xd === 1 || xd === 2) && (yd === 1 || yd === 2);
    };
    // musketeer hawk
    const musketeerHawk = (x1, y1, x2, y2) => {
        const xd = diff(x1, x2);
        const yd = diff(y1, y2);
        return ((xd === 0 && (yd === 2 || yd === 3)) ||
            (yd === 0 && (xd === 2 || xd === 3)) ||
            (xd === yd && (xd === 2 || xd === 3)));
    };
    // musketeer elephant
    const musketeerElephant = (x1, y1, x2, y2) => {
        const xd = diff(x1, x2);
        const yd = diff(y1, y2);
        return xd === 1 || yd === 1 || (xd === 2 && (yd === 0 || yd === 2)) || (xd === 0 && yd === 2);
    };
    // musketeer cannon
    const musketeerCannon = (x1, y1, x2, y2) => {
        const xd = diff(x1, x2);
        const yd = diff(y1, y2);
        return xd < 3 && (yd < 2 || (yd === 2 && xd === 0));
    };
    // musketeer unicorn
    const musketeerUnicorn = (x1, y1, x2, y2) => {
        const xd = diff(x1, x2);
        const yd = diff(y1, y2);
        return knight(x1, y1, x2, y2) || (xd === 1 && yd === 3) || (xd === 3 && yd === 1);
    };
    // musketeer dragon
    const musketeerDragon = (x1, y1, x2, y2) => {
        return knight(x1, y1, x2, y2) || queen(x1, y1, x2, y2);
    };
    // musketeer fortress
    const musketeerFortress = (x1, y1, x2, y2) => {
        const xd = diff(x1, x2);
        const yd = diff(y1, y2);
        return (xd === yd && xd < 4) || (yd === 0 && xd === 2) || (yd === 2 && xd < 2);
    };
    // musketeer spider
    const musketeerSpider = (x1, y1, x2, y2) => {
        const xd = diff(x1, x2);
        const yd = diff(y1, y2);
        return xd < 3 && yd < 3 && !(xd === 1 && yd === 0) && !(xd === 0 && yd === 1);
    };
    // tori shogi goose (promoted swallow)
    function toriGoose(color) {
        return (x1, y1, x2, y2) => {
            const xd = diff(x1, x2);
            return color === 'white'
                ? (xd === 2 && y2 === y1 + 2) || (xd === 0 && y2 === y1 - 2)
                : (xd === 2 && y2 === y1 - 2) || (xd === 0 && y2 === y1 + 2);
        };
    }
    // tori shogi left quail
    function toriLeftQuail(color) {
        return (x1, y1, x2, y2) => {
            const xd = diff(x1, x2);
            const yd = diff(y1, y2);
            return color === 'white'
                ? (x2 === x1 && y2 > y1) || (xd === yd && x2 > x1 && y2 < y1) || (x2 === x1 - 1 && y2 === y1 - 1)
                : (x2 === x1 && y2 < y1) || (xd === yd && x2 < x1 && y2 > y1) || (x2 === x1 + 1 && y2 === y1 + 1);
        };
    }
    // tori shogi right quail
    function toriRightQuail(color) {
        return (x1, y1, x2, y2) => {
            const xd = diff(x1, x2);
            const yd = diff(y1, y2);
            return color === 'white'
                ? (x2 === x1 && y2 > y1) || (xd === yd && x2 < x1 && y2 < y1) || (x2 === x1 + 1 && y2 === y1 - 1)
                : (x2 === x1 && y2 < y1) || (xd === yd && x2 > x1 && y2 > y1) || (x2 === x1 - 1 && y2 === y1 + 1);
        };
    }
    // tori shogi pheasant
    function toriPheasant(color) {
        return (x1, y1, x2, y2) => {
            const xd = diff(x1, x2);
            return color === 'white'
                ? (x2 === x1 && y2 === y1 + 2) || (xd === 1 && y2 === y1 - 1)
                : (x2 === x1 && y2 === y1 - 2) || (xd === 1 && y2 === y1 + 1);
        };
    }
    // tori shogi crane
    const toriCrane = (x1, y1, x2, y2) => {
        return kingNoCastling(x1, y1, x2, y2) && y2 !== y1;
    };
    // tori shogi falcon
    function toriFalcon(color) {
        return (x1, y1, x2, y2) => {
            return color === 'white'
                ? kingNoCastling(x1, y1, x2, y2) && !(x2 === x1 && y2 === y1 - 1)
                : kingNoCastling(x1, y1, x2, y2) && !(x2 === x1 && y2 === y1 + 1);
        };
    }
    // tori shogi eagle (promoted falcon)
    function toriEagle(color) {
        return (x1, y1, x2, y2) => {
            const xd = diff(x1, x2);
            const yd = diff(y1, y2);
            return color === 'white'
                ? kingNoCastling(x1, y1, x2, y2) || (xd === yd && (y2 > y1 || (y2 < y1 && yd <= 2))) || (x2 === x1 && y2 < y1)
                : kingNoCastling(x1, y1, x2, y2) || (xd === yd && (y2 < y1 || (y2 > y1 && yd <= 2))) || (x2 === x1 && y2 > y1);
        };
    }
    // chak pawn
    function pawnChak(color) {
        return (x1, y1, x2, y2) => {
            const xd = diff(x1, x2);
            return color === 'white' ? y2 >= y1 && y2 - y1 <= 1 && xd <= 1 : y1 >= y2 && y1 - y2 <= 1 && xd <= 1;
        };
    }
    // chak warrior
    function chakWarrior(color) {
        return (x1, y1, x2, y2) => toriCrane(x1, y1, x2, y2) && (color === 'white' ? y2 >= 4 : y2 <= 4);
    }
    // chak divine king
    function chakDivineKing(color) {
        return (x1, y1, x2, y2) => {
            const xd = diff(x1, x2);
            const yd = diff(y1, y2);
            return queen(x1, y1, x2, y2) && xd <= 2 && yd <= 2 && (color === 'white' ? y2 >= 4 : y2 <= 4);
        };
    }
    // chennis king
    function kingChennis(color) {
        return (x1, y1, x2, y2) => kingNoCastling(x1, y1, x2, y2) && x2 >= 1 && x2 <= 5 && (color === 'white' ? y2 <= 3 : y2 >= 3);
    }
    // cannot premove
    const noMove = () => false;
    function premove(variant, chess960, bd) {
        const mobility = builtinMobility$1(variant, chess960, bd);
        return (boardState, key, canCastle) => {
            const pos = key2pos(key);
            return allPos(bd)
                .filter(pos2 => (pos[0] !== pos2[0] || pos[1] !== pos2[1]) &&
                mobility(boardState, key, canCastle)(pos[0], pos[1], pos2[0], pos2[1]))
                .map(pos2key);
        };
    }
    function builtinMobility$1(variant, chess960, bd) {
        switch (variant) {
            case 'xiangqi':
            case 'manchu':
                return (boardState, key) => {
                    const piece = boardState.pieces.get(key);
                    const role = piece.role;
                    const color = piece.color;
                    switch (role) {
                        case 'p-piece': // pawn (soldier)
                            return xiangqiPawn(color);
                        case 'c-piece': // cannon
                        case 'r-piece': // chariot
                            return rook;
                        case 'n-piece': // horse
                            return knight;
                        case 'b-piece': // elephant
                            return xiangqiElephant(color);
                        case 'a-piece': // advisor
                            return xiangqiAdvisor(color, bd);
                        case 'k-piece': // king
                            return xiangqiKing(color, bd);
                        case 'm-piece': // banner
                            return chancellor;
                        default:
                            return noMove;
                    }
                };
            case 'janggi':
                return (boardState, key) => {
                    const piece = boardState.pieces.get(key);
                    const role = piece.role;
                    const color = piece.color;
                    switch (role) {
                        case 'p-piece': // pawn (soldier)
                            return janggiPawn(color, bd);
                        case 'c-piece': // cannon
                        case 'r-piece': // chariot
                            return janggiRook(bd);
                        case 'n-piece': // horse
                            return knight;
                        case 'b-piece': // elephant
                            return janggiElephant;
                        case 'a-piece': // advisor
                        case 'k-piece': // king
                            return janggiKing(color, bd);
                        default:
                            return noMove;
                    }
                };
            case 'minixiangqi':
                return (boardState, key) => {
                    const piece = boardState.pieces.get(key);
                    const role = piece.role;
                    const color = piece.color;
                    switch (role) {
                        case 'p-piece': // pawn (soldier
                            return minixiangqiPawn(color);
                        case 'c-piece': // cannon
                        case 'r-piece': // chariot
                            return rook;
                        case 'n-piece': // horse
                            return knight;
                        case 'k-piece': // king
                            return xiangqiKing(color, bd);
                        default:
                            return noMove;
                    }
                };
            case 'shogi':
            case 'minishogi':
            case 'gorogoro':
            case 'gorogoroplus':
                return (boardState, key) => {
                    const piece = boardState.pieces.get(key);
                    const role = piece.role;
                    const color = piece.color;
                    switch (role) {
                        case 'p-piece': // pawn
                            return shogiPawn(color);
                        case 'l-piece': // lance
                            return shogiLance(color);
                        case 'n-piece': // knight
                            return shogiKnight(color);
                        case 'k-piece': // king
                            return kingNoCastling;
                        case 's-piece': // silver
                            return shogiSilver(color);
                        case 'g-piece': // gold
                        case 'pp-piece': // tokin
                        case 'pl-piece': // promoted lance
                        case 'pn-piece': // promoted knight
                        case 'ps-piece': // promoted silver
                            return shogiGold(color);
                        case 'b-piece': // bishop
                            return bishop;
                        case 'r-piece': // rook
                            return rook;
                        case 'pr-piece': // dragon (promoted rook)
                            return shogiDragon;
                        case 'pb-piece': // horse (promoted bishop), not to be confused with the knight
                            return shogiHorse;
                        default:
                            return noMove;
                    }
                };
            case 'kyotoshogi':
                return (boardState, key) => {
                    const piece = boardState.pieces.get(key);
                    const role = piece.role;
                    const color = piece.color;
                    switch (role) {
                        case 'l-piece': // kyoto - lance-tokin
                            return shogiLance(color);
                        case 'pl-piece':
                            return shogiGold(color);
                        case 's-piece': // ginkaku - silver-bishop
                            return shogiSilver(color);
                        case 'ps-piece':
                            return bishop;
                        case 'n-piece': // kinkei gold-knight
                            return shogiKnight(color);
                        case 'pn-piece':
                            return shogiGold(color);
                        case 'p-piece': // hifu - rook-pawn
                            return shogiPawn(color);
                        case 'pp-piece':
                            return rook;
                        case 'k-piece': // king
                            return kingNoCastling;
                        default:
                            return noMove;
                    }
                };
            case 'dobutsu':
                return (boardState, key) => {
                    const piece = boardState.pieces.get(key);
                    const role = piece.role;
                    const color = piece.color;
                    switch (role) {
                        case 'c-piece': // chick
                            return shogiPawn(color);
                        case 'e-piece': // elephant
                            return ferz;
                        case 'g-piece': // giraffe
                            return wazir;
                        case 'l-piece': // lion
                            return kingNoCastling;
                        case 'pc-piece': // hen (promoted chick)
                            return shogiGold(color);
                        default:
                            return noMove;
                    }
                };
            case 'torishogi':
                return (boardState, key) => {
                    const piece = boardState.pieces.get(key);
                    const role = piece.role;
                    const color = piece.color;
                    switch (role) {
                        case 's-piece': // swallow
                            return shogiPawn(color);
                        case 'ps-piece': // goose (promoted swallow)
                            return toriGoose(color);
                        case 'l-piece': // left quail
                            return toriLeftQuail(color);
                        case 'r-piece': // right quail
                            return toriRightQuail(color);
                        case 'p-piece': // pheasant (NOT pawn)
                            return toriPheasant(color);
                        case 'c-piece': // crane
                            return toriCrane;
                        case 'f-piece': // falcon
                            return toriFalcon(color);
                        case 'pf-piece': // eagle (promoted falcon)
                            return toriEagle(color);
                        case 'k-piece': // phoenix
                            return kingNoCastling;
                        default:
                            return noMove;
                    }
                };
            case 'makruk':
            case 'makpong':
            case 'sittuyin':
            case 'cambodian':
            case 'asean':
                return (boardState, key, canCastle) => {
                    const piece = boardState.pieces.get(key);
                    const role = piece.role;
                    const color = piece.color;
                    switch (role) {
                        case 'p-piece': // pawn
                            return variant === 'sittuyin' ? pawnSittuyin(boardState.pieces, color) : pawnNoDoubleStep(color);
                        case 'r-piece': // rook
                            return rook;
                        case 'n-piece': // knight
                            return knight;
                        case 'b-piece': // ASEAN khon
                        case 's-piece': // khon
                            return shogiSilver(color);
                        case 'q-piece': // ASEAN met
                        case 'f-piece': // Sittuyin ferz
                        case 'm-piece': // met
                            return variant === 'cambodian' ? ferzOuk(color) : ferz;
                        case 'k-piece': // king
                            return variant === 'cambodian' ? kingOuk(color, canCastle) : kingNoCastling;
                        default:
                            return noMove;
                    }
                };
            case 'grand':
            case 'grandhouse':
                return (boardState, key) => {
                    const piece = boardState.pieces.get(key);
                    const role = piece.role;
                    const color = piece.color;
                    switch (role) {
                        case 'p-piece': // pawn
                            return pawnGrand(color);
                        case 'r-piece': // rook
                            return rook;
                        case 'n-piece': // knight
                            return knight;
                        case 'b-piece': // bishop
                            return bishop;
                        case 'q-piece': // queen
                            return queen;
                        case 'c-piece': // chancellor
                            return chancellor;
                        case 'a-piece': // archbishop
                            return archbishop;
                        case 'k-piece': // king
                            return kingNoCastling;
                        default:
                            return noMove;
                    }
                };
            case 'shako':
                return (boardState, key, canCastle) => {
                    const piece = boardState.pieces.get(key);
                    const role = piece.role;
                    const color = piece.color;
                    switch (role) {
                        case 'p-piece': // pawn
                            return pawnGrand(color);
                        case 'c-piece': // cannon
                        case 'r-piece': // rook
                            return rook;
                        case 'n-piece': // knight
                            return knight;
                        case 'b-piece': // bishop
                            return bishop;
                        case 'q-piece': // queen
                            return queen;
                        case 'e-piece': // elephant
                            return shakoElephant;
                        case 'k-piece': // king
                            return kingShako(color, rookFilesOfShako(boardState.pieces, color), canCastle);
                        default:
                            return noMove;
                    }
                };
            case 'shogun':
                return (boardState, key, canCastle) => {
                    const piece = boardState.pieces.get(key);
                    const role = piece.role;
                    const color = piece.color;
                    switch (role) {
                        case 'p-piece': // pawn
                            return pawn(color);
                        case 'pp-piece': // captain
                            return kingNoCastling;
                        case 'r-piece': // rook
                            return rook;
                        case 'pr-piece': // mortar
                            return chancellor;
                        case 'n-piece': // knight
                            return knight;
                        case 'pn-piece': // general
                            return centaur;
                        case 'b-piece': // bishop
                            return bishop;
                        case 'pb-piece': // archbishop
                            return archbishop;
                        case 'f-piece': // duchess
                            return ferz;
                        case 'pf-piece': // queen
                            return queen;
                        case 'k-piece': // king
                            return king(color, rookFilesOf(boardState.pieces, color), canCastle);
                        default:
                            return noMove;
                    }
                };
            case 'orda':
            case 'ordamirror':
                return (boardState, key, canCastle) => {
                    const piece = boardState.pieces.get(key);
                    const role = piece.role;
                    const color = piece.color;
                    switch (role) {
                        case 'p-piece': // pawn
                            return pawn(color);
                        case 'r-piece': // rook
                            return rook;
                        case 'n-piece': // knight
                            return knight;
                        case 'b-piece': // bishop
                            return bishop;
                        case 'q-piece': // queen
                            return queen;
                        case 'l-piece': // lancer
                            return chancellor;
                        case 'h-piece': // kheshig
                            return centaur;
                        case 'a-piece': // archer
                            return archbishop;
                        case 'y-piece': // yurt
                            return shogiSilver(color);
                        case 'f-piece': // falcon
                            return amazon;
                        case 'k-piece': // king
                            return king(color, rookFilesOf(boardState.pieces, color), canCastle);
                        default:
                            return noMove;
                    }
                };
            case 'synochess':
                return (boardState, key, canCastle) => {
                    const piece = boardState.pieces.get(key);
                    const role = piece.role;
                    const color = piece.color;
                    switch (role) {
                        case 'p-piece': // pawn
                            return pawn(color);
                        case 'c-piece': // cannon
                        case 'r-piece': // rook
                            return rook;
                        case 'n-piece': // knight
                            return knight;
                        case 'b-piece': // bishop
                            return bishop;
                        case 'q-piece': // queen
                            return queen;
                        case 's-piece': // soldier
                            return minixiangqiPawn(color);
                        case 'e-piece': // elephant
                            return shakoElephant;
                        case 'a-piece': // advisor
                            return kingNoCastling;
                        case 'k-piece': // king
                            return king(color, rookFilesOf(boardState.pieces, color), canCastle && color === 'white');
                        default:
                            return noMove;
                    }
                };
            case 'musketeer':
                return (boardState, key, canCastle) => {
                    const piece = boardState.pieces.get(key);
                    const role = piece.role;
                    const color = piece.color;
                    switch (role) {
                        case 'p-piece': // pawn
                            return pawn(color);
                        case 'r-piece': // rook
                            return rook;
                        case 'n-piece': // knight
                            return knight;
                        case 'b-piece': // bishop
                            return bishop;
                        case 'q-piece': // queen
                            return queen;
                        case 'l-piece': // leopard
                            return musketeerLeopard;
                        case 'o-piece': // cannon
                            return musketeerCannon;
                        case 'u-piece': // unicorn
                            return musketeerUnicorn;
                        case 'd-piece': // dragon
                            return musketeerDragon;
                        case 'c-piece': // chancellor
                            return chancellor;
                        case 'a-piece': // archbishop
                            return archbishop;
                        case 'e-piece': // elephant
                            return musketeerElephant;
                        case 'h-piece': // hawk
                            return musketeerHawk; // hawk
                        case 'f-piece': // fortress
                            return musketeerFortress;
                        case 's-piece': // spider
                            return musketeerSpider;
                        case 'k-piece':
                            return king(color, rookFilesOf(boardState.pieces, color), canCastle);
                        default:
                            return noMove;
                    }
                };
            case 'hoppelpoppel':
                return (boardState, key, canCastle) => {
                    const piece = boardState.pieces.get(key);
                    const role = piece.role;
                    const color = piece.color;
                    switch (role) {
                        case 'p-piece': // pawn
                            return pawn(color);
                        case 'r-piece': // rook
                            return rook;
                        case 'n-piece': // knight (takes like bishop)
                        case 'b-piece': // bishop (takes like knight)
                            return archbishop;
                        case 'q-piece': // queen
                            return queen;
                        case 'k-piece': // king
                            return king(color, rookFilesOf(boardState.pieces, color), canCastle);
                        default:
                            return noMove;
                    }
                };
            case 'shinobi':
                return (boardState, key, canCastle) => {
                    const piece = boardState.pieces.get(key);
                    const role = piece.role;
                    const color = piece.color;
                    switch (role) {
                        case 'p-piece': // pawn
                            return pawn(color);
                        case 'pl-piece':
                        case 'r-piece': // rook
                            return rook;
                        case 'ph-piece':
                        case 'n-piece': // knight
                            return knight;
                        case 'pm-piece':
                        case 'b-piece': // bishop
                            return bishop;
                        case 'q-piece': // queen
                            return queen;
                        case 'pp-piece':
                        case 'c-piece': // captain
                            return kingNoCastling;
                        case 'l-piece': // lance
                            return shogiLance(color);
                        case 'h-piece': // horse
                            return shogiKnight(color);
                        case 'm-piece': // monk
                            return ferz;
                        case 'd-piece': // dragon
                            return shogiDragon;
                        case 'j-piece': // ninja
                            return archbishop;
                        case 'k-piece': // king
                            return king(color, rookFilesOf(boardState.pieces, color), canCastle);
                        default:
                            return noMove;
                    }
                };
            case 'empire':
                return (boardState, key, canCastle) => {
                    const piece = boardState.pieces.get(key);
                    const role = piece.role;
                    const color = piece.color;
                    switch (role) {
                        case 'p-piece': // pawn
                            return pawn(color);
                        case 's-piece': // soldier
                            return minixiangqiPawn(color);
                        case 'r-piece': // rook
                            return rook;
                        case 'n-piece': // knight
                            return knight;
                        case 'b-piece': // bishop
                            return bishop;
                        case 'q-piece': // queen
                        case 'd-piece': // duke
                        case 't-piece': // tower
                        case 'c-piece': // cardinal
                            return queen;
                        case 'e-piece': // eagle
                            return amazon;
                        case 'k-piece': // king
                            return king(color, rookFilesOf(boardState.pieces, color), canCastle);
                        default:
                            return noMove;
                    }
                };
            case 'chak':
                return (boardState, key) => {
                    const piece = boardState.pieces.get(key);
                    const role = piece.role;
                    const color = piece.color;
                    switch (role) {
                        case 'p-piece': // pawn
                            return pawnChak(color);
                        case 'pp-piece': // warrior
                            return chakWarrior(color);
                        case 'r-piece': // serpent
                            return rook;
                        case 'v-piece': // vulture
                            return knight;
                        case 's-piece': // shaman
                            return toriCrane;
                        case 'j-piece': // jaguar
                            return centaur;
                        case 'q-piece': // quetzal
                            return queen;
                        case 'k-piece': // king
                            return kingNoCastling;
                        case 'pk-piece': // divine king
                            return chakDivineKing(color);
                        case 'o-piece': // offering
                        default:
                            return noMove;
                    }
                };
            case 'chennis':
                return (boardState, key) => {
                    const piece = boardState.pieces.get(key);
                    const role = piece.role;
                    const color = piece.color;
                    switch (role) {
                        case 'p-piece': // pawn
                            return pawnNoDoubleStep(color);
                        case 'pp-piece': // rook
                            return rook;
                        case 's-piece': // soldier
                            return minixiangqiPawn(color);
                        case 'ps-piece': // bishop
                            return bishop;
                        case 'f-piece': // ferz
                            return ferz;
                        case 'pf-piece': // cannon
                            return rook;
                        case 'm-piece': // mann
                            return kingNoCastling;
                        case 'pm-piece': // knight
                            return knight;
                        case 'k-piece': // king
                            return kingChennis(color);
                        default:
                            return noMove;
                    }
                };
            case 'capablanca':
            case 'capahouse':
                return (boardState, key, canCastle) => {
                    const piece = boardState.pieces.get(key);
                    const role = piece.role;
                    const color = piece.color;
                    switch (role) {
                        case 'p-piece': // pawn
                            return pawn(color);
                        case 'r-piece': // rook
                            return rook;
                        case 'n-piece': // knight
                            return knight;
                        case 'b-piece': // bishop
                            return bishop;
                        case 'q-piece': // queen
                            return queen;
                        case 'c-piece': // chancellor
                            return chancellor;
                        case 'a-piece': // archbishop
                            return archbishop;
                        case 'k-piece': // king
                            return chess960
                                ? king960(color, rookFilesOf(boardState.pieces, color), canCastle)
                                : kingCapa(color, rookFilesOf(boardState.pieces, color), canCastle);
                        default:
                            return noMove;
                    }
                };
            // Variants using standard pieces and additional fairy pieces like S-chess etc.
            default:
                return (boardState, key, canCastle) => {
                    const piece = boardState.pieces.get(key);
                    const role = piece.role;
                    const color = piece.color;
                    switch (role) {
                        case 'p-piece': // pawn
                            return pawn(color);
                        case 'r-piece': // rook
                            return rook;
                        case 'n-piece': // knight
                            return knight;
                        case 'b-piece': // bishop
                            return bishop;
                        case 'q-piece': // queen
                            return queen;
                        case 'e-piece': // S-chess elephant
                        case 'c-piece': // chancellor
                            return chancellor;
                        case 'h-piece': // S-chess hawk
                        case 'a-piece': // archbishop
                            return archbishop;
                        case 'k-piece': // king
                            return chess960
                                ? king960(color, rookFilesOf(boardState.pieces, color), canCastle)
                                : king(color, rookFilesOf(boardState.pieces, color), canCastle);
                        default:
                            return noMove;
                    }
                };
        }
    }

    function callUserFunction(f, ...args) {
        if (f)
            setTimeout(() => f(...args), 1);
    }
    function toggleOrientation(state) {
        state.orientation = opposite(state.orientation);
        state.animation.current = state.draggable.current = state.selectable.selected = undefined;
    }
    function setPieces(state, pieces) {
        for (const [key, piece] of pieces) {
            if (piece)
                state.boardState.pieces.set(key, piece);
            else
                state.boardState.pieces.delete(key);
        }
    }
    function setCheck(state, color) {
        state.check = undefined;
        if (color === true)
            color = state.turnColor;
        if (color)
            for (const [k, p] of state.boardState.pieces) {
                if (state.kingRoles.includes(p.role) && p.color === color) {
                    state.check = k;
                    break;
                }
            }
    }
    function setPremove(state, orig, dest, meta) {
        state.premovable.current = [orig, dest];
        callUserFunction(state.premovable.events.set, orig, dest, meta);
    }
    function unsetPremove(state) {
        if (state.premovable.current) {
            state.premovable.current = undefined;
            callUserFunction(state.premovable.events.unset);
        }
    }
    function tryAutoCastle(state, orig, dest) {
        if (!state.autoCastle)
            return false;
        const king = state.boardState.pieces.get(orig);
        if (!king || king.role !== 'k-piece')
            return false;
        const origPos = key2pos(orig);
        const destPos = key2pos(dest);
        if ((origPos[1] !== 0 && origPos[1] !== 7) || origPos[1] !== destPos[1])
            return false;
        if (origPos[0] === 4 && !state.boardState.pieces.has(dest)) {
            if (destPos[0] === 6)
                dest = pos2key([7, destPos[1]]);
            else if (destPos[0] === 2)
                dest = pos2key([0, destPos[1]]);
        }
        const rook = state.boardState.pieces.get(dest);
        if (!rook || rook.color !== king.color || rook.role !== 'r-piece')
            return false;
        state.boardState.pieces.delete(orig);
        state.boardState.pieces.delete(dest);
        if (origPos[0] < destPos[0]) {
            state.boardState.pieces.set(pos2key([6, destPos[1]]), king);
            state.boardState.pieces.set(pos2key([5, destPos[1]]), rook);
        }
        else {
            state.boardState.pieces.set(pos2key([2, destPos[1]]), king);
            state.boardState.pieces.set(pos2key([3, destPos[1]]), rook);
        }
        return true;
    }
    function baseMove(state, orig, dest) {
        const origPiece = state.boardState.pieces.get(orig), destPiece = state.boardState.pieces.get(dest);
        if (orig === dest || !origPiece)
            return false;
        const captured = destPiece && destPiece.color !== origPiece.color ? destPiece : undefined;
        if (dest === state.selectable.selected)
            unselect(state);
        callUserFunction(state.events.move, orig, dest, captured);
        if (!tryAutoCastle(state, orig, dest)) {
            state.boardState.pieces.set(dest, origPiece);
            state.boardState.pieces.delete(orig);
        }
        state.lastMove = [orig, dest];
        state.check = undefined;
        callUserFunction(state.events.change);
        return captured || true;
    }
    function baseNewPiece(state, piece, dest, fromPocket, force) {
        if (state.boardState.pieces.has(dest)) {
            if (force)
                state.boardState.pieces.delete(dest);
            else
                return false;
        }
        callUserFunction(state.events.dropNewPiece, piece, dest);
        state.boardState.pieces.set(dest, piece);
        if (fromPocket)
            changeNumber(state.boardState.pockets[piece.color], piece.role, -1);
        state.lastMove = [dropOrigOf(piece.role), dest];
        state.check = undefined;
        callUserFunction(state.events.change);
        state.movable.dests = undefined;
        state.turnColor = opposite(state.turnColor);
        return true;
    }
    function baseUserMove(state, orig, dest, fromPocket, force) {
        const result = isKey(orig) ? baseMove(state, orig, dest) : baseNewPiece(state, orig, dest, fromPocket, force);
        if (result) {
            state.movable.dests = undefined;
            state.turnColor = opposite(state.turnColor);
            state.animation.current = undefined;
        }
        return result;
    }
    function userMove(state, orig, dest, fromPocket, force) {
        if (canMove(state, orig, dest, fromPocket) || force) {
            const result = baseUserMove(state, orig, dest, fromPocket, force);
            if (result) {
                const holdTime = state.hold.stop();
                unselect(state);
                const metadata = {
                    premove: false,
                    ctrlKey: state.stats.ctrlKey,
                    holdTime,
                };
                if (result !== true)
                    metadata.captured = result;
                if (isKey(orig))
                    callUserFunction(state.movable.events.after, orig, dest, metadata);
                else
                    callUserFunction(state.movable.events.afterNewPiece, orig, dest, metadata);
                return true;
            }
        }
        else if (canPremove(state, orig, dest, fromPocket)) {
            setPremove(state, isKey(orig) ? orig : dropOrigOf(orig.role), dest, {
                ctrlKey: state.stats.ctrlKey,
            });
            unselect(state);
            return true;
        }
        unselect(state);
        return false;
    }
    function select(state, selected, force) {
        if (isKey(selected))
            callUserFunction(state.events.select, selected);
        else
            callUserFunction(state.events.selectPocket, selected);
        if (state.selectable.selected) {
            if (isSame(state.selectable.selected, selected) && !state.draggable.enabled) {
                unselect(state);
                state.hold.cancel();
                return;
            }
            else if ((state.selectable.enabled || force) && isKey(selected) && state.selectable.selected !== selected) {
                if (userMove(state, state.selectable.selected, selected, !!state.selectable.fromPocket)) {
                    state.stats.dragged = false;
                    return;
                }
            }
        }
        if ((state.selectable.enabled || state.draggable.enabled) &&
            (isMovable(state, selected, true) || isPremovable(state, selected, true))) {
            setSelected(state, selected, true);
            state.hold.start();
        }
    }
    function setSelected(state, selected, fromPocket) {
        if (isKey(selected))
            setSelectedKey(state, selected);
        else
            setDropMode(state, selected, !!fromPocket);
    }
    function setSelectedKey(state, key) {
        state.selectable.selected = key;
        state.selectable.fromPocket = false;
        if (isPremovable(state, key, false)) {
            state.premovable.dests = state.premovable.premoveFunc(state.boardState, key, state.premovable.castle);
        }
        else {
            state.premovable.dests = undefined;
        }
    }
    function setDropMode(state, piece, fromPocket) {
        state.selectable.selected = piece;
        state.selectable.fromPocket = fromPocket;
        if (isPremovable(state, piece, fromPocket)) {
            state.premovable.dests = state.premovable.predropFunc(state.boardState, piece);
        }
        else {
            state.premovable.dests = undefined;
        }
    }
    function unselect(state) {
        state.selectable.selected = undefined;
        state.premovable.dests = undefined;
        state.hold.cancel();
    }
    function pieceAvailability(state, orig, fromPocket) {
        var _a, _b;
        let piece;
        let available = false;
        if (isKey(orig)) {
            piece = state.boardState.pieces.get(orig);
            available = !!piece;
        }
        else {
            piece = orig;
            const num = (_b = (_a = state.boardState.pockets) === null || _a === void 0 ? void 0 : _a[piece.color].get(piece.role)) !== null && _b !== void 0 ? _b : 0;
            available = !fromPocket || num > 0;
        }
        return [piece, available];
    }
    function isMovable(state, orig, fromPocket) {
        const [piece, available] = pieceAvailability(state, orig, fromPocket);
        return (available &&
            (state.movable.color === 'both' || (state.movable.color === piece.color && state.turnColor === piece.color)));
    }
    const canMove = (state, orig, dest, fromPocket) => {
        var _a, _b;
        return orig !== dest &&
            isMovable(state, orig, fromPocket) &&
            (state.movable.free || !!((_b = (_a = state.movable.dests) === null || _a === void 0 ? void 0 : _a.get(isKey(orig) ? orig : dropOrigOf(orig.role))) === null || _b === void 0 ? void 0 : _b.includes(dest)));
    };
    function isPremovable(state, orig, fromPocket) {
        const [piece, available] = pieceAvailability(state, orig, fromPocket);
        return (available && state.premovable.enabled && state.movable.color === piece.color && state.turnColor !== piece.color);
    }
    const canPremove = (state, orig, dest, fromPocket) => orig !== dest &&
        isPremovable(state, orig, fromPocket) &&
        (isKey(orig)
            ? state.premovable.premoveFunc(state.boardState, orig, state.premovable.castle).includes(dest)
            : state.premovable.predropFunc(state.boardState, orig).includes(dest));
    function isDraggable(state, orig, fromPocket) {
        const [piece, available] = pieceAvailability(state, orig, fromPocket);
        return (available &&
            state.draggable.enabled &&
            (state.movable.color === 'both' ||
                (state.movable.color === piece.color && (state.turnColor === piece.color || state.premovable.enabled))));
    }
    function playPremove(state) {
        const move = state.premovable.current;
        if (!move)
            return false;
        const orig = isKey(move[0]) ? move[0] : { role: roleOf(move[0]), color: state.turnColor };
        const dest = move[1];
        let success = false;
        if (canMove(state, orig, dest, true)) {
            const result = baseUserMove(state, orig, dest, true);
            if (result) {
                const metadata = { premove: true };
                if (result !== true)
                    metadata.captured = result;
                if (isKey(orig))
                    callUserFunction(state.movable.events.after, orig, dest, metadata);
                else
                    callUserFunction(state.movable.events.afterNewPiece, orig, dest, metadata);
                success = true;
            }
        }
        unsetPremove(state);
        return success;
    }
    function cancelMove(state) {
        unsetPremove(state);
        unselect(state);
    }
    function stop(state) {
        state.movable.color = state.movable.dests = state.animation.current = undefined;
        cancelMove(state);
    }
    function getKeyAtDomPos(pos, asWhite, bounds, bd) {
        let file = Math.floor((bd.width * (pos[0] - bounds.left)) / bounds.width);
        if (!asWhite)
            file = bd.width - 1 - file;
        let rank = bd.height - 1 - Math.floor((bd.height * (pos[1] - bounds.top)) / bounds.height);
        if (!asWhite)
            rank = bd.height - 1 - rank;
        return file >= 0 && file < bd.width && rank >= 0 && rank < bd.height ? pos2key([file, rank]) : undefined;
    }
    function getSnappedKeyAtDomPos(orig, pos, asWhite, bounds, bd) {
        const origPos = key2pos(orig);
        const validSnapPos = allPos(bd).filter(pos2 => {
            return (queen(origPos[0], origPos[1], pos2[0], pos2[1]) ||
                knight(origPos[0], origPos[1], pos2[0], pos2[1]) ||
                // Only apply this to 9x10 board to avoid interfering with other variants beside Janggi
                (bd.width === 9 && bd.height === 10 && janggiElephant(origPos[0], origPos[1], pos2[0], pos2[1])));
        });
        const validSnapCenters = validSnapPos.map(pos2 => computeSquareCenter(pos2key(pos2), asWhite, bounds, bd));
        const validSnapDistances = validSnapCenters.map(pos2 => distanceSq(pos, pos2));
        const [, closestSnapIndex] = validSnapDistances.reduce((a, b, index) => (a[0] < b ? a : [b, index]), [validSnapDistances[0], 0]);
        return pos2key(validSnapPos[closestSnapIndex]);
    }
    const whitePov = (s) => s.orientation === 'white';

    function applyAnimation(state, config) {
        if (config.animation) {
            deepMerge(state.animation, config.animation);
            // no need for such short animations
            if ((state.animation.duration || 0) < 70)
                state.animation.enabled = false;
        }
    }
    function configure(state, config) {
        var _a, _b, _c;
        // don't merge destinations and autoShapes. Just override.
        if ((_a = config.movable) === null || _a === void 0 ? void 0 : _a.dests)
            state.movable.dests = undefined;
        if ((_b = config.drawable) === null || _b === void 0 ? void 0 : _b.autoShapes)
            state.drawable.autoShapes = [];
        deepMerge(state, config);
        // if a fen was provided, replace the pieces
        if (config.fen) {
            const boardState = read(config.fen, state.dimensions);
            // prevent calling cancel() if piece drag is already started from pocket!
            const draggedPiece = state.boardState.pieces.get('a0');
            if (draggedPiece !== undefined)
                boardState.pieces.set('a0', draggedPiece);
            // set the pocket to empty instead of undefined if pocketRoles exists
            // likewise, set the pocket to undefined if pocketRoles is undefined
            if (state.pocketRoles)
                boardState.pockets = (_c = boardState.pockets) !== null && _c !== void 0 ? _c : { white: new Map(), black: new Map() };
            else
                boardState.pockets = undefined;
            state.boardState = boardState;
            state.drawable.shapes = [];
        }
        // apply config values that could be undefined yet meaningful
        if ('check' in config || 'kingRoles' in config)
            setCheck(state, config.check || false);
        if ('lastMove' in config && !config.lastMove)
            state.lastMove = undefined;
        // in case of ZH drop last move, there's a single square.
        // if the previous last move had two squares,
        // the merge algorithm will incorrectly keep the second square.
        else if (config.lastMove)
            state.lastMove = config.lastMove;
        // fix move/premove dests
        if (state.selectable.selected)
            setSelected(state, state.selectable.selected, state.selectable.fromPocket);
        applyAnimation(state, config);
        if (!state.movable.rookCastle && state.movable.dests) {
            const rank = state.movable.color === 'white' ? '1' : '8', kingStartPos = ('e' + rank), dests = state.movable.dests.get(kingStartPos), king = state.boardState.pieces.get(kingStartPos);
            if (!dests || !king || king.role !== 'k-piece')
                return;
            state.movable.dests.set(kingStartPos, dests.filter(d => !(d === 'a' + rank && dests.includes(('c' + rank))) &&
                !(d === 'h' + rank && dests.includes(('g' + rank)))));
        }
    }
    function deepMerge(base, extend) {
        for (const key in extend) {
            if (Object.prototype.hasOwnProperty.call(extend, key)) {
                if (Object.prototype.hasOwnProperty.call(base, key) && isPlainObject(base[key]) && isPlainObject(extend[key]))
                    deepMerge(base[key], extend[key]);
                else
                    base[key] = extend[key];
            }
        }
    }
    function isPlainObject(o) {
        if (typeof o !== 'object' || o === null)
            return false;
        const proto = Object.getPrototypeOf(o);
        return proto === Object.prototype || proto === null;
    }

    const anim = (mutation, state) => state.animation.enabled ? animate(mutation, state) : render$2(mutation, state);
    function render$2(mutation, state) {
        const result = mutation(state);
        state.dom.redraw();
        return result;
    }
    const makePiece = (key, piece) => ({
        key: key,
        pos: key2pos(key),
        piece: piece,
    });
    const closer = (piece, pieces) => pieces.sort((p1, p2) => distanceSq(piece.pos, p1.pos) - distanceSq(piece.pos, p2.pos))[0];
    function computePlan(prevPieces, current) {
        const anims = new Map(), animedOrigs = [], fadings = new Map(), missings = [], news = [], prePieces = new Map();
        let curP, preP, vector;
        for (const [k, p] of prevPieces) {
            prePieces.set(k, makePiece(k, p));
        }
        for (const key of allKeys(current.dimensions)) {
            curP = current.boardState.pieces.get(key);
            preP = prePieces.get(key);
            if (curP) {
                if (preP) {
                    if (!samePiece(curP, preP.piece)) {
                        missings.push(preP);
                        news.push(makePiece(key, curP));
                    }
                }
                else
                    news.push(makePiece(key, curP));
            }
            else if (preP)
                missings.push(preP);
        }
        for (const newP of news) {
            preP = closer(newP, missings.filter(p => samePiece(newP.piece, p.piece)));
            if (preP) {
                vector = [preP.pos[0] - newP.pos[0], preP.pos[1] - newP.pos[1]];
                anims.set(newP.key, vector.concat(vector));
                animedOrigs.push(preP.key);
            }
        }
        for (const p of missings) {
            if (!animedOrigs.includes(p.key))
                fadings.set(p.key, p.piece);
        }
        return {
            anims: anims,
            fadings: fadings,
        };
    }
    function step(state, now) {
        const cur = state.animation.current;
        if (cur === undefined) {
            // animation was canceled :(
            if (!state.dom.destroyed)
                state.dom.redrawNow();
            return;
        }
        const rest = 1 - (now - cur.start) * cur.frequency;
        if (rest <= 0) {
            state.animation.current = undefined;
            state.dom.redrawNow();
        }
        else {
            const ease = easing(rest);
            for (const cfg of cur.plan.anims.values()) {
                cfg[2] = cfg[0] * ease;
                cfg[3] = cfg[1] * ease;
            }
            state.dom.redrawNow(true); // optimisation: don't render SVG changes during animations
            requestAnimationFrame((now = performance.now()) => step(state, now));
        }
    }
    function animate(mutation, state) {
        // clone state before mutating it
        const prevPieces = new Map(state.boardState.pieces);
        const result = mutation(state);
        const plan = computePlan(prevPieces, state);
        if (plan.anims.size || plan.fadings.size) {
            const alreadyRunning = state.animation.current && state.animation.current.start;
            state.animation.current = {
                start: performance.now(),
                frequency: 1 / state.animation.duration,
                plan: plan,
            };
            if (!alreadyRunning)
                step(state, performance.now());
        }
        else {
            // don't animate, just render right away
            state.dom.redraw();
        }
        return result;
    }
    // https://gist.github.com/gre/1650294
    const easing = (t) => (t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1);

    const brushes = ['green', 'red', 'blue', 'yellow'];
    function start$3(state, e) {
        // support one finger touch only
        if (e.touches && e.touches.length > 1)
            return;
        e.stopPropagation();
        e.preventDefault();
        e.ctrlKey ? unselect(state) : cancelMove(state);
        const pos = eventPosition(e), orig = getKeyAtDomPos(pos, whitePov(state), state.dom.bounds(), state.dimensions);
        if (!orig)
            return;
        state.drawable.current = {
            orig,
            pos,
            brush: eventBrush(e),
            snapToValidMove: state.drawable.defaultSnapToValidMove,
        };
        processDraw(state);
    }
    function processDraw(state) {
        requestAnimationFrame(() => {
            const cur = state.drawable.current;
            if (cur) {
                const keyAtDomPos = getKeyAtDomPos(cur.pos, whitePov(state), state.dom.bounds(), state.dimensions);
                if (!keyAtDomPos) {
                    cur.snapToValidMove = false;
                }
                const mouseSq = cur.snapToValidMove
                    ? getSnappedKeyAtDomPos(cur.orig, cur.pos, whitePov(state), state.dom.bounds(), state.dimensions)
                    : keyAtDomPos;
                if (mouseSq !== cur.mouseSq) {
                    cur.mouseSq = mouseSq;
                    cur.dest = mouseSq !== cur.orig ? mouseSq : undefined;
                    state.dom.redrawNow();
                }
                processDraw(state);
            }
        });
    }
    function move$1(state, e) {
        if (state.drawable.current)
            state.drawable.current.pos = eventPosition(e);
    }
    function end$1(state) {
        const cur = state.drawable.current;
        if (cur) {
            if (cur.mouseSq)
                addShape(state.drawable, cur);
            cancel$1(state);
        }
    }
    function cancel$1(state) {
        if (state.drawable.current) {
            state.drawable.current = undefined;
            state.dom.redraw();
        }
    }
    function clear(state) {
        if (state.drawable.shapes.length) {
            state.drawable.shapes = [];
            state.dom.redraw();
            onChange(state.drawable);
        }
    }
    function eventBrush(e) {
        var _a;
        const modA = (e.shiftKey || e.ctrlKey) && isRightButton(e);
        const modB = e.altKey || e.metaKey || ((_a = e.getModifierState) === null || _a === void 0 ? void 0 : _a.call(e, 'AltGraph'));
        return brushes[(modA ? 1 : 0) + (modB ? 2 : 0)];
    }
    function addShape(drawable, cur) {
        const sameShape = (s) => s.orig === cur.orig && s.dest === cur.dest;
        const similar = drawable.shapes.find(sameShape);
        if (similar)
            drawable.shapes = drawable.shapes.filter(s => !sameShape(s));
        if (!similar || similar.brush !== cur.brush)
            drawable.shapes.push(cur);
        onChange(drawable);
    }
    function onChange(drawable) {
        if (drawable.onChange)
            drawable.onChange(drawable.shapes);
    }

    function start$2(s, e) {
        if (!e.isTrusted || (e.button !== undefined && e.button !== 0))
            return; // only touch or left click
        if (e.touches && e.touches.length > 1)
            return; // support one finger touch only
        const bounds = s.dom.bounds(), position = eventPosition(e), orig = getKeyAtDomPos(position, whitePov(s), bounds, s.dimensions);
        if (!orig)
            return;
        const piece = s.boardState.pieces.get(orig);
        const previouslySelected = s.selectable.selected;
        if (!previouslySelected && s.drawable.enabled && (s.drawable.eraseOnClick || !piece || piece.color !== s.turnColor))
            clear(s);
        // Prevent touch scroll and create no corresponding mouse event, if there
        // is an intent to interact with the board.
        if (e.cancelable !== false &&
            (!e.touches || s.blockTouchScroll || piece || previouslySelected || pieceCloseTo(s, position)))
            e.preventDefault();
        const hadPremove = !!s.premovable.current;
        s.stats.ctrlKey = e.ctrlKey;
        if (s.selectable.selected && canMove(s, s.selectable.selected, orig, !!s.selectable.fromPocket)) {
            anim(state => select(state, orig), s);
        }
        else {
            select(s, orig);
        }
        const stillSelected = s.selectable.selected === orig;
        const element = pieceElementByKey(s, orig);
        if (piece && element && stillSelected && isDraggable(s, orig, false)) {
            s.draggable.current = {
                orig,
                piece,
                origPos: position,
                pos: position,
                started: s.draggable.autoDistance && s.stats.dragged,
                element,
                previouslySelected,
                originTarget: e.target,
                keyHasChanged: false,
            };
            element.cgDragging = true;
            element.classList.add('dragging');
            // place ghost
            const ghost = s.dom.elements.ghost;
            if (ghost) {
                ghost.className = 'ghost ' + pieceClasses(piece, s.orientation);
                translate(ghost, posToTranslate(bounds, s.dimensions)(key2pos(orig), whitePov(s)));
                setVisible(ghost, true);
            }
            processDrag(s);
        }
        else {
            if (hadPremove)
                unsetPremove(s);
        }
        s.dom.redraw();
    }
    function pieceCloseTo(s, pos) {
        const asWhite = whitePov(s), bounds = s.dom.bounds(), radiusSq = Math.pow(bounds.width / s.dimensions.width, 2);
        for (const key of s.boardState.pieces.keys()) {
            const center = computeSquareCenter(key, asWhite, bounds, s.dimensions);
            if (distanceSq(center, pos) <= radiusSq)
                return true;
        }
        return false;
    }
    function dragNewPiece(s, piece, fromPocket, e, previouslySelected, force) {
        s.dom.redraw();
        const position = eventPosition(e);
        s.boardState.pieces.set('a0', piece);
        s.draggable.current = {
            orig: 'a0',
            piece,
            origPos: position,
            pos: position,
            started: true,
            element: () => pieceElementByKey(s, 'a0'),
            previouslySelected,
            originTarget: e.target,
            fromPocket: fromPocket,
            force: !!force,
            keyHasChanged: false,
        };
        processDrag(s);
    }
    function processDrag(s) {
        requestAnimationFrame(() => {
            var _a;
            const cur = s.draggable.current;
            if (!cur)
                return;
            // cancel animations while dragging
            if ((_a = s.animation.current) === null || _a === void 0 ? void 0 : _a.plan.anims.has(cur.orig))
                s.animation.current = undefined;
            // if moving piece is gone, cancel
            const origPiece = s.boardState.pieces.get(cur.orig);
            if (!samePiece(origPiece, cur.piece))
                cancel(s);
            else {
                if (!cur.started && distanceSq(cur.pos, cur.origPos) >= Math.pow(s.draggable.distance, 2))
                    cur.started = true;
                if (cur.started) {
                    // support lazy elements
                    if (typeof cur.element === 'function') {
                        const found = cur.element();
                        if (!found)
                            return;
                        found.cgDragging = true;
                        found.classList.add('dragging');
                        cur.element = found;
                    }
                    const bounds = s.dom.bounds();
                    translate(cur.element, [
                        cur.pos[0] - bounds.left - bounds.width / (2 * s.dimensions.width),
                        cur.pos[1] - bounds.top - bounds.height / (2 * s.dimensions.height),
                    ]);
                    if (cur.orig !== 'a0')
                        cur.keyHasChanged || (cur.keyHasChanged = cur.orig !== getKeyAtDomPos(cur.pos, whitePov(s), bounds, s.dimensions));
                }
            }
            processDrag(s);
        });
    }
    function move(s, e) {
        // support one finger touch only
        if (s.draggable.current && (!e.touches || e.touches.length < 2)) {
            s.draggable.current.pos = eventPosition(e);
        }
    }
    function end(s, e) {
        var _a;
        const cur = s.draggable.current;
        if (!cur)
            return;
        // create no corresponding mouse event
        if (e.type === 'touchend' && e.cancelable !== false)
            e.preventDefault();
        // comparing with the origin target is an easy way to test that the end event
        // has the same touch origin
        if (e.type === 'touchend' && cur.originTarget !== e.target) {
            s.draggable.current = undefined;
            return;
        }
        unsetPremove(s);
        // touchend has no position; so use the last touchmove position instead
        const eventPos = eventPosition(e) || cur.pos;
        const dest = getKeyAtDomPos(eventPos, whitePov(s), s.dom.bounds(), s.dimensions);
        const target = e.target;
        const onPocket = Number((_a = target.getAttribute('data-nb')) !== null && _a !== void 0 ? _a : -1) >= 0;
        const targetPiece = onPocket
            ? { role: target.getAttribute('data-role'), color: target.getAttribute('data-color') }
            : undefined;
        if (dest && cur.started && cur.orig !== dest) {
            s.stats.ctrlKey = e.ctrlKey;
            if (userMove(s, cur.orig !== 'a0' ? cur.orig : cur.piece, dest, !!cur.fromPocket))
                s.stats.dragged = true;
        }
        else if (s.draggable.deleteOnDropOff && !dest) {
            s.boardState.pieces.delete(cur.orig);
            if (cur.fromPocket)
                changeNumber(s.boardState.pockets[cur.piece.color], cur.piece.role, -1);
            callUserFunction(s.events.change);
        }
        if (((cur.previouslySelected &&
            (cur.orig === cur.previouslySelected || isSame(cur.piece, cur.previouslySelected))) ||
            cur.keyHasChanged) &&
            (cur.orig === dest || !dest))
            unselect(s);
        if (cur.orig === 'a0' && (!targetPiece || !samePiece(cur.piece, targetPiece)))
            unselect(s);
        else if (!s.selectable.enabled)
            unselect(s);
        if (cur.orig === 'a0')
            s.boardState.pieces.delete('a0');
        removeDragElements(s);
        s.draggable.current = undefined;
        s.dom.redraw();
    }
    function cancel(s) {
        const cur = s.draggable.current;
        if (cur) {
            s.draggable.current = undefined;
            s.boardState.pieces.delete('a0');
            unselect(s);
            removeDragElements(s);
            s.dom.redraw();
        }
    }
    function removeDragElements(s) {
        const e = s.dom.elements;
        if (e.ghost)
            setVisible(e.ghost, false);
    }
    function pieceElementByKey(s, key) {
        let el = s.dom.elements.board.firstChild;
        while (el) {
            if (el.cgKey === key && el.tagName === 'PIECE')
                return el;
            el = el.nextSibling;
        }
        return;
    }

    function explosion(state, keys) {
        state.exploding = { stage: 1, keys };
        state.dom.redraw();
        setTimeout(() => {
            setStage(state, 2);
            setTimeout(() => setStage(state, undefined), 120);
        }, 120);
    }
    function setStage(state, stage) {
        if (state.exploding) {
            if (stage)
                state.exploding.stage = stage;
            else
                state.exploding = undefined;
            state.dom.redraw();
        }
    }

    // see API types and documentations in dts/api.d.ts
    function start$1(state, redrawAll) {
        function toggleOrientation$1() {
            toggleOrientation(state);
            redrawAll();
        }
        return {
            set(config) {
                if (config.orientation && config.orientation !== state.orientation)
                    toggleOrientation$1();
                applyAnimation(state, config);
                (config.fen ? anim : render$2)(state => configure(state, config), state);
            },
            state,
            getFen: () => write(state.boardState, state.dimensions),
            toggleOrientation: toggleOrientation$1,
            setPieces(pieces) {
                anim(state => setPieces(state, pieces), state);
            },
            changePocket(piece, num) {
                var _a;
                if ((_a = state.pocketRoles) === null || _a === void 0 ? void 0 : _a[piece.color].includes(piece.role)) {
                    changeNumber(state.boardState.pockets[piece.color], piece.role, num);
                    state.dom.redraw();
                }
            },
            selectSquare(key, force) {
                if (key)
                    anim(state => select(state, key, force), state);
                else if (state.selectable.selected) {
                    unselect(state);
                    state.dom.redraw();
                }
            },
            selectPocket(piece) {
                if (piece)
                    anim(state => select(state, piece), state);
                else if (state.selectable.selected) {
                    unselect(state);
                    state.dom.redraw();
                }
            },
            unselect() {
                unselect(state);
            },
            move(orig, dest) {
                if (isDropOrig(orig))
                    baseNewPiece(state, { role: roleOf(orig), color: state.turnColor }, dest, true);
                else
                    anim(state => baseMove(state, orig, dest), state);
            },
            newPiece(piece, key, fromPocket) {
                anim(state => baseNewPiece(state, piece, key, fromPocket), state);
            },
            playPremove() {
                if (state.premovable.current) {
                    if (anim(playPremove, state))
                        return true;
                    // if the premove couldn't be played, redraw to clear it up
                    state.dom.redraw();
                }
                return false;
            },
            cancelPremove() {
                render$2(unsetPremove, state);
            },
            cancelMove() {
                render$2(state => {
                    cancelMove(state);
                    cancel(state);
                }, state);
            },
            stop() {
                render$2(state => {
                    stop(state);
                    cancel(state);
                }, state);
            },
            explode(keys) {
                explosion(state, keys);
            },
            setAutoShapes(shapes) {
                render$2(state => (state.drawable.autoShapes = shapes), state);
            },
            setShapes(shapes) {
                render$2(state => (state.drawable.shapes = shapes), state);
            },
            getKeyAtDomPos(pos) {
                return getKeyAtDomPos(pos, whitePov(state), state.dom.bounds(), state.dimensions);
            },
            redrawAll,
            dragNewPiece(piece, fromPocket, event, force) {
                dragNewPiece(state, piece, fromPocket, event, undefined, force);
            },
            destroy() {
                stop(state);
                state.dom.unbind && state.dom.unbind();
                state.dom.destroyed = true;
            },
        };
    }

    const wholeBoard = () => true;
    /**
     *
     * @param from	0-based index from given color's PoV, inclusive
     * @param to	0-based index from given color's PoV, exclusive
     * @param color The piece's color
     * @param bd    The board's dimensions
     *
     * Returns a function that checks if a position's rank is inside the from-to range, where from and to are indices of rank when counting from
     * current "color"'s point of view (i.e. if from=to=1 and color=black the function will return true only if the position's rank is 8 in case of 8x8 board)
     * from and to can be zero or negative to denote that many ranks counting from the last
     *
     * */
    function rankRange(from, to, color, bd) {
        if (from < 0)
            from += bd.height;
        if (to < 0)
            to += bd.height;
        return (_x, y) => {
            if (color === 'black')
                y = bd.height - 1 - y;
            return from <= y && y < to;
        };
    }
    function predrop(variant, bd) {
        const mobility = builtinMobility(variant, bd);
        return (boardState, piece) => allPos(bd)
            .filter(pos => { var _a; return ((_a = boardState.pieces.get(pos2key(pos))) === null || _a === void 0 ? void 0 : _a.color) !== piece.color && mobility(piece)(pos[0], pos[1]); })
            .map(pos2key);
    }
    function builtinMobility(variant, bd) {
        switch (variant) {
            case 'crazyhouse':
            case 'shouse':
            case 'capahouse':
            case 'gothhouse':
                // pawns can't be dropped on the first or last rank
                return piece => (piece.role === 'p-piece' ? rankRange(1, -1, piece.color, bd) : wholeBoard);
            case 'placement':
                // the "drop" is the placement phase where pieces can only be placed on the first rank
                return piece => rankRange(0, 1, piece.color, bd);
            case 'sittuyin':
                // the "drop" is the placement phase where pieces can only be placed on the player's half
                // rooks can only be dropped on the first rank
                return piece => (piece.role === 'r-piece' ? rankRange(0, 1, piece.color, bd) : rankRange(0, 3, piece.color, bd));
            case 'shogi':
            case 'minishogi':
            case 'gorogoro':
            case 'gorogoroplus':
                return piece => {
                    switch (piece.role) {
                        case 'p-piece': // pawns and lances can't be dropped on the last rank
                        case 'l-piece':
                            return rankRange(0, -1, piece.color, bd);
                        case 'n-piece': // knights can't be dropped on the last two ranks
                            return rankRange(0, -2, piece.color, bd);
                        default:
                            return wholeBoard;
                    }
                };
            case 'torishogi':
                // swallows can't be dropped on the last rank
                return piece => (piece.role === 's-piece' ? rankRange(0, -1, piece.color, bd) : wholeBoard);
            case 'grandhouse':
                // pawns can't be dropped on the 1st, or 8th to 10th ranks
                return piece => (piece.role === 'p-piece' ? rankRange(1, 7, piece.color, bd) : wholeBoard);
            case 'shogun':
                // shogun only permits drops on ranks 1-5 for all pieces
                return piece => rankRange(0, 5, piece.color, bd);
            case 'synochess':
                // Only black can drop, and the only droppable rank is the literal rank five.
                return () => (_x, y) => y === 4;
            case 'shinobi':
                // Only white can drop, and only on their own half of the board
                return () => (_x, y) => y <= 3;
            // These cases are unnecessary but is here anyway to be explicit
            case 'kyotoshogi':
            case 'dobutsu':
            case 'chennis':
            default:
                return () => wholeBoard;
        }
    }

    function defaults() {
        return {
            boardState: read(initial, { width: 8, height: 8 }),
            orientation: 'white',
            turnColor: 'white',
            coordinates: true,
            ranksPosition: 'right',
            autoCastle: true,
            viewOnly: false,
            disableContextMenu: false,
            addPieceZIndex: false,
            blockTouchScroll: false,
            pieceKey: false,
            highlight: {
                lastMove: true,
                check: true,
            },
            animation: {
                enabled: true,
                duration: 200,
            },
            movable: {
                free: true,
                color: 'both',
                showDests: true,
                events: {},
                rookCastle: true,
            },
            premovable: {
                enabled: true,
                premoveFunc: premove('chess', false, { width: 8, height: 8 }),
                predropFunc: predrop('chess', { width: 8, height: 8 }),
                castle: true,
                events: {},
            },
            draggable: {
                enabled: true,
                distance: 3,
                autoDistance: true,
                showGhost: true,
                deleteOnDropOff: false,
            },
            selectable: {
                enabled: true,
            },
            stats: {
                // on touchscreen, default to "tap-tap" moves
                // instead of drag
                dragged: !('ontouchstart' in window),
            },
            events: {},
            drawable: {
                enabled: true,
                visible: true,
                defaultSnapToValidMove: true,
                eraseOnClick: true,
                shapes: [],
                autoShapes: [],
                brushes: {
                    green: { key: 'g', color: '#15781B', opacity: 1, lineWidth: 10 },
                    red: { key: 'r', color: '#882020', opacity: 1, lineWidth: 10 },
                    blue: { key: 'b', color: '#003088', opacity: 1, lineWidth: 10 },
                    yellow: { key: 'y', color: '#e68f00', opacity: 1, lineWidth: 10 },
                    paleBlue: { key: 'pb', color: '#003088', opacity: 0.4, lineWidth: 15 },
                    paleGreen: { key: 'pg', color: '#15781B', opacity: 0.4, lineWidth: 15 },
                    paleRed: { key: 'pr', color: '#882020', opacity: 0.4, lineWidth: 15 },
                    paleGrey: {
                        key: 'pgr',
                        color: '#4a4a4a',
                        opacity: 0.35,
                        lineWidth: 15,
                    },
                },
                prevSvgHash: '',
            },
            hold: timer(),
            dimensions: { width: 8, height: 8 },
            notation: 0 /* cg.Notation.ALGEBRAIC */,
            kingRoles: ['k-piece'],
        };
    }

    // append and remove only. No updates.
    function syncShapes(shapes, root, renderShape) {
        const hashesInDom = new Map(), // by hash
        toRemove = [];
        for (const sc of shapes)
            hashesInDom.set(sc.hash, false);
        let el = root.firstChild, elHash;
        while (el) {
            elHash = el.getAttribute('cgHash');
            // found a shape element that's here to stay
            if (hashesInDom.has(elHash))
                hashesInDom.set(elHash, true);
            // or remove it
            else
                toRemove.push(el);
            el = el.nextSibling;
        }
        // remove old shapes
        for (const el of toRemove)
            root.removeChild(el);
        // insert shapes that are not yet in dom
        for (const sc of shapes) {
            if (!hashesInDom.get(sc.hash))
                root.appendChild(renderShape(sc));
        }
    }

    function createElement(tagName) {
        return document.createElementNS('http://www.w3.org/2000/svg', tagName);
    }
    function renderSvg(state, svg, customSvg) {
        const d = state.drawable, curD = d.current, cur = curD && curD.mouseSq ? curD : undefined, arrowDests = new Map(), bounds = state.dom.bounds(), nonPieceAutoShapes = d.autoShapes.filter(autoShape => !autoShape.piece);
        for (const s of d.shapes.concat(nonPieceAutoShapes).concat(cur ? [cur] : [])) {
            if (s.dest)
                arrowDests.set(s.dest, (arrowDests.get(s.dest) || 0) + 1);
        }
        const shapes = d.shapes.concat(nonPieceAutoShapes).map((s) => {
            return {
                shape: s,
                current: false,
                hash: shapeHash(s, arrowDests, false, bounds),
            };
        });
        if (cur)
            shapes.push({
                shape: cur,
                current: true,
                hash: shapeHash(cur, arrowDests, true, bounds),
            });
        const fullHash = shapes.map(sc => sc.hash).join(';');
        if (fullHash === state.drawable.prevSvgHash)
            return;
        state.drawable.prevSvgHash = fullHash;
        /*
          -- DOM hierarchy --
          <svg class="cg-shapes">      (<= svg)
            <defs>
              ...(for brushes)...
            </defs>
            <g>
              ...(for arrows and circles)...
            </g>
          </svg>
          <svg class="cg-custom-svgs"> (<= customSvg)
            <g>
              ...(for custom svgs)...
            </g>
          </svg>
        */
        const defsEl = svg.querySelector('defs');
        const shapesEl = svg.querySelector('g');
        const customSvgsEl = customSvg.querySelector('g');
        syncDefs(d, shapes, defsEl);
        syncShapes(shapes.filter(s => !s.shape.customSvg), shapesEl, shape => renderShape$1(state, shape, d.brushes, arrowDests, bounds));
        syncShapes(shapes.filter(s => s.shape.customSvg), customSvgsEl, shape => renderShape$1(state, shape, d.brushes, arrowDests, bounds));
    }
    // append only. Don't try to update/remove.
    function syncDefs(d, shapes, defsEl) {
        const brushes = new Map();
        let brush;
        for (const s of shapes) {
            if (s.shape.dest) {
                brush = d.brushes[s.shape.brush];
                if (s.shape.modifiers)
                    brush = makeCustomBrush(brush, s.shape.modifiers);
                brushes.set(brush.key, brush);
            }
        }
        const keysInDom = new Set();
        let el = defsEl.firstChild;
        while (el) {
            keysInDom.add(el.getAttribute('cgKey'));
            el = el.nextSibling;
        }
        for (const [key, brush] of brushes.entries()) {
            if (!keysInDom.has(key))
                defsEl.appendChild(renderMarker(brush));
        }
    }
    function shapeHash({ orig, dest, brush, piece, modifiers, customSvg }, arrowDests, current, bounds) {
        return [
            bounds.width,
            bounds.height,
            current,
            orig,
            dest,
            brush,
            dest && (arrowDests.get(dest) || 0) > 1,
            piece && pieceHash(piece),
            modifiers && modifiersHash(modifiers),
            customSvg && customSvgHash(customSvg),
        ]
            .filter(x => x)
            .join(',');
    }
    function pieceHash(piece) {
        return [piece.color, piece.role, piece.promoted, piece.scale].filter(x => x).join(',');
    }
    function modifiersHash(m) {
        return '' + (m.lineWidth || '');
    }
    function customSvgHash(s) {
        // Rolling hash with base 31 (cf. https://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript)
        let h = 0;
        for (let i = 0; i < s.length; i++) {
            h = ((h << 5) - h + s.charCodeAt(i)) >>> 0;
        }
        return 'custom-' + h.toString();
    }
    function renderShape$1(state, { shape, current, hash }, brushes, arrowDests, bounds) {
        let el;
        const orig = orient(key2pos(shape.orig), state.orientation, state.dimensions);
        if (shape.customSvg) {
            el = renderCustomSvg(shape.customSvg, orig, bounds, state.dimensions);
        }
        else {
            if (shape.dest) {
                let brush = brushes[shape.brush];
                if (shape.modifiers)
                    brush = makeCustomBrush(brush, shape.modifiers);
                el = renderArrow(brush, orig, orient(key2pos(shape.dest), state.orientation, state.dimensions), current, (arrowDests.get(shape.dest) || 0) > 1, bounds, state.dimensions);
            }
            else
                el = renderCircle(brushes[shape.brush], orig, current, bounds, state.dimensions);
        }
        el.setAttribute('cgHash', hash);
        return el;
    }
    function renderCustomSvg(customSvg, pos, bounds, bd) {
        const [x, y] = pos2user(pos, bounds, bd);
        // Translate to top-left of `orig` square
        const g = setAttributes(createElement('g'), { transform: `translate(${x},${y})` });
        // Give 100x100 coordinate system to the user for `orig` square
        const svg = setAttributes(createElement('svg'), { width: 1, height: 1, viewBox: '0 0 100 100' });
        g.appendChild(svg);
        svg.innerHTML = customSvg;
        return g;
    }
    function renderCircle(brush, pos, current, bounds, bd) {
        const o = pos2user(pos, bounds, bd), widths = circleWidth(), radius = (bounds.width + bounds.height) / (4 * Math.max(bounds.width, bounds.height));
        return setAttributes(createElement('circle'), {
            stroke: brush.color,
            'stroke-width': widths[current ? 0 : 1],
            fill: 'none',
            opacity: opacity(brush, current),
            cx: o[0],
            cy: o[1],
            r: radius - widths[1] / 2,
        });
    }
    function renderArrow(brush, orig, dest, current, shorten, bounds, bd) {
        const m = arrowMargin(shorten && !current), a = pos2user(orig, bounds, bd), b = pos2user(dest, bounds, bd), dx = b[0] - a[0], dy = b[1] - a[1], angle = Math.atan2(dy, dx), xo = Math.cos(angle) * m, yo = Math.sin(angle) * m;
        return setAttributes(createElement('line'), {
            stroke: brush.color,
            'stroke-width': lineWidth(brush, current),
            'stroke-linecap': 'round',
            'marker-end': 'url(#arrowhead-' + brush.key + ')',
            opacity: opacity(brush, current),
            x1: a[0],
            y1: a[1],
            x2: b[0] - xo,
            y2: b[1] - yo,
        });
    }
    function renderMarker(brush) {
        const marker = setAttributes(createElement('marker'), {
            id: 'arrowhead-' + brush.key,
            orient: 'auto',
            markerWidth: 4,
            markerHeight: 8,
            refX: 2.05,
            refY: 2.01,
        });
        marker.appendChild(setAttributes(createElement('path'), {
            d: 'M0,0 V4 L3,2 Z',
            fill: brush.color,
        }));
        marker.setAttribute('cgKey', brush.key);
        return marker;
    }
    function setAttributes(el, attrs) {
        for (const key in attrs) {
            if (Object.prototype.hasOwnProperty.call(attrs, key))
                el.setAttribute(key, attrs[key]);
        }
        return el;
    }
    function orient(pos, color, bd) {
        return color === 'white' ? pos : [bd.width - 1 - pos[0], bd.height - 1 - pos[1]];
    }
    function makeCustomBrush(base, modifiers) {
        return {
            color: base.color,
            opacity: Math.round(base.opacity * 10) / 10,
            lineWidth: Math.round(modifiers.lineWidth || base.lineWidth),
            key: [base.key, modifiers.lineWidth].filter(x => x).join(''),
        };
    }
    function circleWidth() {
        return [3 / 64, 4 / 64];
    }
    function lineWidth(brush, current) {
        return ((brush.lineWidth || 10) * (current ? 0.85 : 1)) / 64;
    }
    function opacity(brush, current) {
        return (brush.opacity || 1) * (current ? 0.9 : 1);
    }
    function arrowMargin(shorten) {
        return (shorten ? 20 : 10) / 64;
    }
    function pos2user(pos, bounds, bd) {
        const xScale = Math.min(1, bounds.width / bounds.height) * Math.max(1, bd.height / bd.width);
        const yScale = Math.min(1, bounds.height / bounds.width) * Math.max(1, bd.width / bd.height);
        return [(pos[0] - (bd.width - 1) / 2) * xScale, ((bd.height - 1) / 2 - pos[1]) * yScale];
    }

    // Need to support up to 16 ranks or files
    // Since some countries never had variants that big, some letters and numbers here are theoretical
    const LETTER_ENGLISH = letters;
    const LETTER_THAI = ['ก', 'ข', 'ค', 'ง', 'จ', 'ฉ', 'ช', 'ญ', 'ต', 'ถ', 'ท', 'น', 'ป', 'ผ', 'พ', 'ม'];
    const NUMBER_ARABIC = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16'];
    const NUMBER_JANGGI = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6'];
    const NUMBER_HANZI = [
        '一',
        '二',
        '三',
        '四',
        '五',
        '六',
        '七',
        '八',
        '九',
        '十',
        '十一',
        '十二',
        '十三',
        '十四',
        '十五',
        '十六',
    ];
    const NUMBER_THAI = ['๑', '๒', '๓', '๔', '๕', '๖', '๗', '๘', '๙', '๑๐', '๑๑', '๑๒', '๑๓', '๑๔', '๑๕', '๑๖'];
    const coordFormat = {
        [0 /* Notation.ALGEBRAIC */]: [
            {
                coords: LETTER_ENGLISH,
                position: 'bottom',
                direction: 'forward',
            },
            {
                coords: NUMBER_ARABIC,
                position: 'side',
                direction: 'forward',
            },
        ],
        [1 /* Notation.SHOGI_ENGLET */]: [
            {
                coords: NUMBER_ARABIC,
                position: 'top',
                direction: 'backward',
            },
            {
                coords: LETTER_ENGLISH,
                position: 'side',
                direction: 'backward',
            },
        ],
        [2 /* Notation.SHOGI_ARBNUM */]: [
            {
                coords: NUMBER_ARABIC,
                position: 'top',
                direction: 'backward',
            },
            {
                coords: NUMBER_ARABIC,
                position: 'side',
                direction: 'backward',
            },
        ],
        [3 /* Notation.SHOGI_HANNUM */]: [
            {
                coords: NUMBER_ARABIC,
                position: 'top',
                direction: 'backward',
            },
            {
                coords: NUMBER_HANZI,
                position: 'side',
                direction: 'backward',
            },
        ],
        [4 /* Notation.JANGGI */]: [
            {
                coords: NUMBER_ARABIC,
                position: 'bottom',
                direction: 'forward',
            },
            {
                coords: NUMBER_JANGGI,
                position: 'side',
                direction: 'backward',
            },
        ],
        [5 /* Notation.XIANGQI_ARBNUM */]: [
            {
                coords: NUMBER_ARABIC,
                position: 'top',
                direction: 'forward',
                noBlackReverse: true,
            },
            {
                coords: NUMBER_ARABIC,
                position: 'bottom',
                direction: 'backward',
                noBlackReverse: true,
            },
        ],
        [6 /* Notation.XIANGQI_HANNUM */]: [
            {
                coords: NUMBER_ARABIC,
                position: 'top',
                direction: 'forward',
                noBlackReverse: true,
            },
            {
                coords: NUMBER_HANZI,
                position: 'bottom',
                direction: 'backward',
                noBlackReverse: true,
            },
        ],
        [7 /* Notation.THAI_ALGEBRAIC */]: [
            {
                coords: LETTER_THAI,
                position: 'bottom',
                direction: 'forward',
            },
            {
                coords: NUMBER_THAI,
                position: 'side',
                direction: 'forward',
            },
        ],
    };
    function renderWrap(element, s) {
        // .cg-wrap (element passed to Chessground)
        //   cg-container
        //     cg-board
        //     svg.cg-shapes
        //       defs
        //       g
        //     svg.cg-custom-svgs
        //       g
        //     cg-auto-pieces
        //     coords.ranks
        //     coords.files
        //     piece.ghost
        element.innerHTML = '';
        // ensure the cg-wrap class is set
        // so bounds calculation can use the CSS width/height values
        // add that class yourself to the element before calling chessground
        // for a slight performance improvement! (avoids recomputing style)
        element.classList.add('cg-wrap');
        for (const c of colors)
            element.classList.toggle('orientation-' + c, s.orientation === c);
        element.classList.toggle('manipulable', !s.viewOnly);
        const container = createEl('cg-container');
        element.appendChild(container);
        const extension = createEl('extension');
        container.appendChild(extension);
        const board = createEl('cg-board');
        container.appendChild(board);
        let pocketBottom, pocketTop;
        if (isMiniBoard(element)) {
            if (s.boardState.pockets) {
                pocketBottom = createEl('pocketBottom');
                pocketTop = createEl('pocketTop');
                container.insertBefore(s.orientation === 'white' ? pocketTop : pocketBottom, board);
                container.insertBefore(s.orientation === 'white' ? pocketBottom : pocketTop, board.nextSibling);
            }
        }
        let svg;
        let customSvg;
        let autoPieces;
        if (s.drawable.visible) {
            const width = s.dimensions.width;
            const height = s.dimensions.height;
            svg = setAttributes(createElement('svg'), {
                class: 'cg-shapes',
                viewBox: `${-width / 2} ${-height / 2} ${width} ${height}`,
                preserveAspectRatio: 'xMidYMid slice',
            });
            svg.appendChild(createElement('defs'));
            svg.appendChild(createElement('g'));
            customSvg = setAttributes(createElement('svg'), {
                class: 'cg-custom-svgs',
                viewBox: `${-(width - 1) / 2} ${-(height - 1) / 2} ${width} ${height}`,
                preserveAspectRatio: 'xMidYMid slice',
            });
            customSvg.appendChild(createElement('g'));
            autoPieces = createEl('cg-auto-pieces');
            container.appendChild(svg);
            container.appendChild(customSvg);
            container.appendChild(autoPieces);
        }
        if (s.coordinates) {
            coordFormat[s.notation].forEach(f => {
                const max = f.position === 'side' ? s.dimensions.height : s.dimensions.width;
                const pos = f.position; // TODO pos = f.position === 'side' ? s.ranksPosition : f.position;
                const coords = f.coords.slice(0, max);
                container.appendChild(renderCoords(coords, `${pos} ${f.direction}${f.noBlackReverse ? '' : ' ' + s.orientation}`));
            });
        }
        let ghost;
        if (s.draggable.enabled && s.draggable.showGhost) {
            ghost = createEl('piece', 'ghost');
            setVisible(ghost, false);
            container.appendChild(ghost);
        }
        return {
            pocketTop,
            pocketBottom,
            board,
            container,
            wrap: element,
            ghost,
            svg,
            customSvg,
            autoPieces,
        };
    }
    function renderCoords(elems, className) {
        const el = createEl('coords', className);
        let f;
        for (const elem of elems) {
            f = createEl('coord');
            f.textContent = elem;
            el.appendChild(f);
        }
        return el;
    }

    function renderPocketsInitial(state, elements, pocketTop, pocketBottom) {
        if (pocketTop) {
            pocketTop.innerHTML = '';
            elements.pocketTop = pocketTop;
            pocketView(state, elements.pocketTop, 'top');
        }
        if (pocketBottom) {
            pocketBottom.innerHTML = '';
            elements.pocketBottom = pocketBottom;
            pocketView(state, elements.pocketBottom, 'bottom');
        }
    }
    function pocketView(state, pocketEl, position) {
        if (!state.pocketRoles)
            return;
        const color = position === 'top' ? opposite(state.orientation) : state.orientation;
        const roles = state.pocketRoles[color];
        const pl = String(roles.length);
        const files = String(state.dimensions.width);
        const ranks = String(state.dimensions.height);
        pocketEl.setAttribute('style', `--pocketLength: ${pl}; --files: ${files}; --ranks: ${ranks}`);
        pocketEl.classList.add('pocket', position);
        roles.forEach(role => {
            const pieceName = pieceClasses({ role: role, color: color }, state.orientation);
            const sq = createEl('square');
            const p = createEl('piece', pieceName);
            sq.appendChild(p);
            p.setAttribute('data-color', color);
            p.setAttribute('data-role', role);
            renderPiece(state, sq);
            pocketEl.appendChild(sq);
        });
    }
    /**
     * updates each piece element attributes based on state
     * */
    function renderPockets(state) {
        renderPocket(state, state.dom.elements.pocketBottom);
        renderPocket(state, state.dom.elements.pocketTop);
    }
    function renderPocket(state, pocketEl) {
        var _a;
        if (pocketEl) {
            let sq = pocketEl.firstChild;
            const color = (_a = sq === null || sq === void 0 ? void 0 : sq.firstChild) === null || _a === void 0 ? void 0 : _a.getAttribute('data-color');
            pocketEl.classList.toggle('usable', !state.viewOnly && (state.movable.free || state.movable.color === 'both' || (!!color && state.movable.color === color)));
            while (sq) {
                renderPiece(state, sq);
                sq = sq.nextSibling;
            }
        }
    }
    function renderPiece(state, sq) {
        var _a, _b, _c;
        const p = sq.firstChild;
        const role = p.getAttribute('data-role');
        const color = p.getAttribute('data-color');
        p.setAttribute('data-nb', '' + ((_a = state.boardState.pockets[color].get(role)) !== null && _a !== void 0 ? _a : 0));
        const piece = { role, color };
        const selected = state.selectable.selected;
        sq.classList.toggle('selected-square', !!selected && isPiece(selected) && state.selectable.fromPocket && samePiece(selected, piece));
        const premoveOrig = (_b = state.premovable.current) === null || _b === void 0 ? void 0 : _b[0];
        sq.classList.toggle('premove', !!premoveOrig && isDropOrig(premoveOrig) && roleOf(premoveOrig) === role && state.turnColor !== color);
        const lastMoveOrig = (_c = state.lastMove) === null || _c === void 0 ? void 0 : _c[0];
        sq.classList.toggle('last-move', state.highlight.lastMove && !!lastMoveOrig && isDropOrig(lastMoveOrig) && roleOf(lastMoveOrig) === role && state.turnColor !== color);
    }
    function drag(s, e) {
        if (!e.isTrusted || (e.button !== undefined && e.button !== 0))
            return; // only touch or left click
        if (e.touches && e.touches.length > 1)
            return; // support one finger touch only
        const el = e.target, role = el.getAttribute('data-role'), color = el.getAttribute('data-color'), n = Number(el.getAttribute('data-nb'));
        if (n === 0)
            return;
        const piece = { role, color };
        const previouslySelected = s.selectable.selected;
        if (!previouslySelected && s.drawable.enabled && (s.drawable.eraseOnClick || piece.color !== s.turnColor))
            clear(s);
        // Prevent touch scroll and create no corresponding mouse event
        if (e.cancelable !== false)
            e.preventDefault();
        const hadPremove = !!s.premovable.current;
        s.stats.ctrlKey = e.ctrlKey;
        select(s, piece);
        const selected = s.selectable.selected;
        const stillSelected = selected && isSame(selected, piece);
        if (stillSelected && isDraggable(s, piece, true)) {
            dragNewPiece(s, piece, true, e, previouslySelected);
        }
        else {
            if (hadPremove)
                unsetPremove(s);
        }
        s.dom.redraw();
    }

    function bindBoard(s, onResize) {
        const boardEl = s.dom.elements.board;
        if ('ResizeObserver' in window)
            new ResizeObserver(onResize).observe(s.dom.elements.wrap);
        if (s.viewOnly)
            return;
        // Cannot be passive, because we prevent touch scrolling and dragging of
        // selected elements.
        const onStart = startDragOrDraw(s);
        boardEl.addEventListener('touchstart', onStart, {
            passive: false,
        });
        boardEl.addEventListener('mousedown', onStart, {
            passive: false,
        });
        if (s.disableContextMenu || s.drawable.enabled) {
            boardEl.addEventListener('contextmenu', e => e.preventDefault());
        }
    }
    // returns the unbind function
    function bindDocument(s, onResize) {
        const unbinds = [];
        // Old versions of Edge and Safari do not support ResizeObserver. Send
        // chessground.resize if a user action has changed the bounds of the board.
        if (!('ResizeObserver' in window))
            unbinds.push(unbindable(document.body, 'chessground.resize', onResize));
        if (!s.viewOnly) {
            const onmove = dragOrDraw(s, move, move$1);
            const onend = dragOrDraw(s, end, end$1);
            for (const ev of ['touchmove', 'mousemove'])
                unbinds.push(unbindable(document, ev, onmove));
            for (const ev of ['touchend', 'mouseup'])
                unbinds.push(unbindable(document, ev, onend));
            const onScroll = () => s.dom.bounds.clear();
            unbinds.push(unbindable(document, 'scroll', onScroll, { capture: true, passive: true }));
            unbinds.push(unbindable(window, 'resize', onScroll, { passive: true }));
            const pocketTop = s.dom.elements.pocketTop;
            const pocketBottom = s.dom.elements.pocketBottom;
            const pocketStart = startDragOrDrawPocket(s);
            [pocketTop, pocketBottom].forEach(el => {
                if (el) {
                    for (const ev of ['touchstart', 'mousedown'])
                        unbinds.push(unbindable(el, ev, pocketStart));
                    if (s.disableContextMenu || s.drawable.enabled)
                        unbinds.push(unbindable(el, 'contextmenu', e => e.preventDefault()));
                }
            });
        }
        return () => unbinds.forEach(f => f());
    }
    function unbindable(el, eventName, callback, options) {
        el.addEventListener(eventName, callback, options);
        return () => el.removeEventListener(eventName, callback, options);
    }
    const startDragOrDraw = (s) => e => {
        if (s.draggable.current)
            cancel(s);
        else if (s.drawable.current)
            cancel$1(s);
        else if (e.shiftKey || isRightButton(e)) {
            if (s.drawable.enabled)
                start$3(s, e);
        }
        else if (!s.viewOnly) {
            start$2(s, e);
        }
    };
    const startDragOrDrawPocket = (s) => e => {
        if (s.draggable.current)
            cancel(s);
        else if (s.drawable.current)
            cancel$1(s);
        else if (e.shiftKey || isRightButton(e)) {
            if (s.drawable.enabled)
                start$3(s, e);
        }
        else if (!s.viewOnly) {
            drag(s, e);
        }
    };
    const dragOrDraw = (s, withDrag, withDraw) => e => {
        if (s.drawable.current) {
            if (s.drawable.enabled)
                withDraw(s, e);
        }
        else if (!s.viewOnly)
            withDrag(s, e);
    };

    // ported from https://github.com/lichess-org/lichobile/blob/master/src/chessground/render.ts
    // in case of bugs, blame @veloce
    function render$1(s) {
        const asWhite = whitePov(s), posToTranslate$1 = posToTranslate(s.dom.bounds(), s.dimensions), boardEl = s.dom.elements.board, pieces = s.boardState.pieces, curAnim = s.animation.current, anims = curAnim ? curAnim.plan.anims : new Map(), fadings = curAnim ? curAnim.plan.fadings : new Map(), curDrag = s.draggable.current, squares = computeSquareClasses(s), samePieces = new Set(), sameSquares = new Set(), movedPieces = new Map(), movedSquares = new Map(); // by class name
        let k, el, pieceAtKey, elPieceName, anim, fading, pMvdset, pMvd, sMvdset, sMvd;
        // walk over all board dom elements, apply animations and flag moved pieces
        el = boardEl.firstChild;
        while (el) {
            k = el.cgKey;
            if (isPieceNode(el)) {
                pieceAtKey = pieces.get(k);
                anim = anims.get(k);
                fading = fadings.get(k);
                elPieceName = el.cgPiece;
                // if piece not being dragged anymore, remove dragging style
                if (el.cgDragging && (!curDrag || curDrag.orig !== k)) {
                    el.classList.remove('dragging');
                    translate(el, posToTranslate$1(key2pos(k), asWhite));
                    el.cgDragging = false;
                }
                // remove fading class if it still remains
                if (!fading && el.cgFading) {
                    el.cgFading = false;
                    el.classList.remove('fading');
                }
                // there is now a piece at this dom key
                if (pieceAtKey) {
                    // continue animation if already animating and same piece
                    // (otherwise it could animate a captured piece)
                    if (anim && el.cgAnimating && elPieceName === pieceClasses(pieceAtKey, s.orientation)) {
                        const pos = key2pos(k);
                        pos[0] += anim[2];
                        pos[1] += anim[3];
                        el.classList.add('anim');
                        translate(el, posToTranslate$1(pos, asWhite));
                    }
                    else if (el.cgAnimating) {
                        el.cgAnimating = false;
                        el.classList.remove('anim');
                        translate(el, posToTranslate$1(key2pos(k), asWhite));
                        if (s.addPieceZIndex)
                            el.style.zIndex = posZIndex(key2pos(k), asWhite);
                    }
                    // same piece: flag as same
                    if (elPieceName === pieceClasses(pieceAtKey, s.orientation) && (!fading || !el.cgFading)) {
                        samePieces.add(k);
                    }
                    // different piece: flag as moved unless it is a fading piece
                    else {
                        if (fading && elPieceName === pieceClasses(fading, s.orientation)) {
                            el.classList.add('fading');
                            el.cgFading = true;
                        }
                        else {
                            appendValue(movedPieces, elPieceName, el);
                        }
                    }
                }
                // no piece: flag as moved
                else {
                    appendValue(movedPieces, elPieceName, el);
                }
            }
            else if (isSquareNode(el)) {
                const cn = el.className;
                if (squares.get(k) === cn)
                    sameSquares.add(k);
                else
                    appendValue(movedSquares, cn, el);
            }
            el = el.nextSibling;
        }
        // walk over all squares in current set, apply dom changes to moved squares
        // or append new squares
        for (const [sk, className] of squares) {
            if (!sameSquares.has(sk)) {
                sMvdset = movedSquares.get(className);
                sMvd = sMvdset && sMvdset.pop();
                const translation = posToTranslate$1(key2pos(sk), asWhite);
                if (sMvd) {
                    sMvd.cgKey = sk;
                    translate(sMvd, translation);
                }
                else {
                    const squareNode = createEl('square', className);
                    squareNode.cgKey = sk;
                    translate(squareNode, translation);
                    boardEl.insertBefore(squareNode, boardEl.firstChild);
                }
            }
        }
        // walk over all pieces in current set, apply dom changes to moved pieces
        // or append new pieces
        for (const [k, p] of pieces) {
            anim = anims.get(k);
            if (!samePieces.has(k)) {
                pMvdset = movedPieces.get(pieceClasses(p, s.orientation));
                pMvd = pMvdset && pMvdset.pop();
                // a same piece was moved
                if (pMvd) {
                    // apply dom changes
                    pMvd.cgKey = k;
                    if (pMvd.cgFading) {
                        pMvd.classList.remove('fading');
                        pMvd.cgFading = false;
                    }
                    const pos = key2pos(k);
                    if (s.addPieceZIndex)
                        pMvd.style.zIndex = posZIndex(pos, asWhite);
                    if (anim) {
                        pMvd.cgAnimating = true;
                        pMvd.classList.add('anim');
                        pos[0] += anim[2];
                        pos[1] += anim[3];
                    }
                    translate(pMvd, posToTranslate$1(pos, asWhite));
                }
                // no piece in moved obj: insert the new piece
                // assumes the new piece is not being dragged
                else {
                    const pieceName = pieceClasses(p, s.orientation), pieceNode = createEl('piece', pieceName), pos = key2pos(k);
                    pieceNode.cgPiece = pieceName;
                    pieceNode.cgKey = k;
                    if (anim) {
                        pieceNode.cgAnimating = true;
                        pos[0] += anim[2];
                        pos[1] += anim[3];
                    }
                    translate(pieceNode, posToTranslate$1(pos, asWhite));
                    if (s.addPieceZIndex)
                        pieceNode.style.zIndex = posZIndex(pos, asWhite);
                    boardEl.appendChild(pieceNode);
                }
            }
        }
        // remove any element that remains in the moved sets
        for (const nodes of movedPieces.values())
            removeNodes(s, nodes);
        for (const nodes of movedSquares.values())
            removeNodes(s, nodes);
    }
    function renderResized$1(s) {
        const asWhite = whitePov(s), posToTranslate$1 = posToTranslate(s.dom.bounds(), s.dimensions);
        let el = s.dom.elements.board.firstChild;
        while (el) {
            if ((isPieceNode(el) && !el.cgAnimating) || isSquareNode(el)) {
                translate(el, posToTranslate$1(key2pos(el.cgKey), asWhite));
            }
            el = el.nextSibling;
        }
    }
    function updateBounds(s) {
        var _a, _b, _c, _d, _e, _f;
        const bounds = s.dom.elements.wrap.getBoundingClientRect();
        const container = s.dom.elements.container;
        const ratio = bounds.height / bounds.width;
        const width = (Math.floor((bounds.width * window.devicePixelRatio) / s.dimensions.width) * s.dimensions.width) /
            window.devicePixelRatio;
        const height = width * ratio;
        container.style.width = width + 'px';
        container.style.height = height + 'px';
        s.dom.bounds.clear();
        (_a = s.addDimensionsCssVarsTo) === null || _a === void 0 ? void 0 : _a.style.setProperty('--cg-width', width + 'px');
        (_b = s.addDimensionsCssVarsTo) === null || _b === void 0 ? void 0 : _b.style.setProperty('--cg-height', height + 'px');
        (_c = s.dom.elements.pocketTop) === null || _c === void 0 ? void 0 : _c.style.setProperty('--cg-width', width + 'px');
        (_d = s.dom.elements.pocketTop) === null || _d === void 0 ? void 0 : _d.style.setProperty('--cg-height', height + 'px');
        (_e = s.dom.elements.pocketBottom) === null || _e === void 0 ? void 0 : _e.style.setProperty('--cg-width', width + 'px');
        (_f = s.dom.elements.pocketBottom) === null || _f === void 0 ? void 0 : _f.style.setProperty('--cg-height', height + 'px');
    }
    const isPieceNode = (el) => el.tagName === 'PIECE';
    const isSquareNode = (el) => el.tagName === 'SQUARE';
    function removeNodes(s, nodes) {
        for (const node of nodes)
            s.dom.elements.board.removeChild(node);
    }
    function posZIndex(pos, asWhite) {
        const minZ = 3;
        const rank = pos[1];
        const z = asWhite ? minZ + 7 - rank : minZ + rank;
        return `${z}`;
    }
    function computeSquareClasses(s) {
        var _a;
        const squares = new Map();
        if (s.lastMove && s.highlight.lastMove)
            for (const k of s.lastMove) {
                if (isKey(k) && k !== 'a0')
                    addSquare(squares, k, 'last-move');
            }
        if (s.check && s.highlight.check)
            addSquare(squares, s.check, 'check');
        const selected = s.selectable.selected;
        if (selected) {
            if (isKey(selected))
                addSquare(squares, selected, 'selected');
            if (s.movable.showDests) {
                const dests = (_a = s.movable.dests) === null || _a === void 0 ? void 0 : _a.get(isKey(selected) ? selected : dropOrigOf(selected.role));
                if (dests)
                    for (const k of dests) {
                        addSquare(squares, k, 'move-dest' + (s.boardState.pieces.has(k) ? ' oc' : ''));
                    }
                const pDests = s.premovable.dests;
                if (pDests)
                    for (const k of pDests) {
                        addSquare(squares, k, 'premove-dest' + (s.boardState.pieces.has(k) ? ' oc' : ''));
                    }
            }
        }
        const premove = s.premovable.current;
        if (premove)
            for (const k of premove)
                if (isKey(k))
                    addSquare(squares, k, 'current-premove');
        const o = s.exploding;
        if (o)
            for (const k of o.keys)
                addSquare(squares, k, 'exploding' + o.stage);
        return squares;
    }
    function addSquare(squares, key, klass) {
        const classes = squares.get(key);
        if (classes)
            squares.set(key, `${classes} ${klass}`);
        else
            squares.set(key, klass);
    }
    function appendValue(map, key, value) {
        const arr = map.get(key);
        if (arr)
            arr.push(value);
        else
            map.set(key, [value]);
    }

    function render(state, autoPieceEl) {
        const autoPieces = state.drawable.autoShapes.filter(autoShape => autoShape.piece);
        const autoPieceShapes = autoPieces.map((s) => {
            return {
                shape: s,
                hash: hash(s),
                current: false,
            };
        });
        syncShapes(autoPieceShapes, autoPieceEl, shape => renderShape(state, shape, state.dom.bounds()));
    }
    function renderResized(state) {
        var _a;
        const asWhite = whitePov(state), posToTranslate$1 = posToTranslate(state.dom.bounds(), state.dimensions);
        let el = (_a = state.dom.elements.autoPieces) === null || _a === void 0 ? void 0 : _a.firstChild;
        while (el) {
            translateAndScale(el, posToTranslate$1(key2pos(el.cgKey), asWhite), el.cgScale);
            el = el.nextSibling;
        }
    }
    function renderShape(state, { shape, hash }, bounds) {
        if (shape.piece) {
            const orig = shape.orig;
            const scale = shape.piece.scale;
            const pieceEl = createEl('piece', pieceClasses(shape.piece, state.orientation));
            pieceEl.setAttribute('cgHash', hash);
            pieceEl.cgKey = orig;
            pieceEl.cgScale = scale;
            translateAndScale(pieceEl, posToTranslate(bounds, state.dimensions)(key2pos(orig), whitePov(state)), scale);
            return pieceEl;
        }
        else {
            return createEl('piece', '');
        }
    }
    const hash = (autoPiece) => { var _a, _b, _c; return [autoPiece.orig, (_a = autoPiece.piece) === null || _a === void 0 ? void 0 : _a.role, (_b = autoPiece.piece) === null || _b === void 0 ? void 0 : _b.color, (_c = autoPiece.piece) === null || _c === void 0 ? void 0 : _c.scale].join(','); };

    function Chessground(element, config, pocketTop, pocketBottom) {
        const maybeState = defaults();
        configure(maybeState, config || {});
        function redrawAll() {
            const prevUnbind = 'dom' in maybeState ? maybeState.dom.unbind : undefined;
            // compute bounds from existing board element if possible
            // this allows non-square boards from CSS to be handled (for 3D)
            const elements = renderWrap(element, maybeState), bounds = memo(() => elements.board.getBoundingClientRect()), redrawNow = (skipSvg) => {
                render$1(state);
                renderPockets(state);
                if (elements.autoPieces)
                    render(state, elements.autoPieces);
                if (!skipSvg && elements.svg)
                    renderSvg(state, elements.svg, elements.customSvg);
            }, onResize = () => {
                updateBounds(state);
                renderResized$1(state);
                if (elements.autoPieces)
                    renderResized(state);
            };
            if (elements.pocketTop)
                pocketTop = elements.pocketTop;
            if (elements.pocketBottom)
                pocketBottom = elements.pocketBottom;
            renderPocketsInitial(maybeState, elements, pocketTop, pocketBottom);
            const state = maybeState;
            state.dom = {
                elements,
                bounds,
                redraw: debounceRedraw(redrawNow),
                redrawNow,
                unbind: prevUnbind,
            };
            state.drawable.prevSvgHash = '';
            updateBounds(state);
            redrawNow(false);
            bindBoard(state, onResize);
            if (!prevUnbind)
                state.dom.unbind = bindDocument(state, onResize);
            state.events.insert && state.events.insert(elements);
            return state;
        }
        return start$1(redrawAll(), redrawAll);
    }
    function debounceRedraw(redrawNow) {
        let redrawing = false;
        return () => {
            if (redrawing)
                return;
            redrawing = true;
            requestAnimationFrame(() => {
                redrawNow();
                redrawing = false;
            });
        };
    }

    var Module = (function() {
      var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
      
      return (
    function(Module) {
      Module = Module || {};

    var Module=typeof Module!=="undefined"?Module:{};var readyPromiseResolve;Module["ready"]=new Promise(function(resolve,reject){readyPromiseResolve=resolve;});var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key];}}var thisProgram="./this.program";var quit_=function(status,toThrow){throw toThrow};var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;ENVIRONMENT_IS_WEB=typeof window==="object";ENVIRONMENT_IS_WORKER=typeof importScripts==="function";typeof process==="object"&&typeof process.versions==="object"&&typeof process.versions.node==="string";var scriptDirectory="";function locateFile(path){if(Module["locateFile"]){return Module["locateFile"](path,scriptDirectory)}return scriptDirectory+path}var read_,readBinary;if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href;}else if(document.currentScript){scriptDirectory=document.currentScript.src;}if(_scriptDir){scriptDirectory=_scriptDir;}if(scriptDirectory.indexOf("blob:")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf("/")+1);}else {scriptDirectory="";}{read_=function shell_read(url){var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){readBinary=function readBinary(url){var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.responseType="arraybuffer";xhr.send(null);return new Uint8Array(xhr.response)};}}}var out=Module["print"]||console.log.bind(console);var err=Module["printErr"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key];}}moduleOverrides=null;if(Module["arguments"])Module["arguments"];if(Module["thisProgram"])thisProgram=Module["thisProgram"];if(Module["quit"])quit_=Module["quit"];var wasmBinary;if(Module["wasmBinary"])wasmBinary=Module["wasmBinary"];var noExitRuntime;if(Module["noExitRuntime"])noExitRuntime=Module["noExitRuntime"];if(typeof WebAssembly!=="object"){err("no native wasm support detected");}var wasmMemory;var wasmTable=new WebAssembly.Table({"initial":590,"maximum":590+0,"element":"anyfunc"});var ABORT=false;function assert(condition,text){if(!condition){abort("Assertion failed: "+text);}}var UTF8Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf8"):undefined;function UTF8ArrayToString(heap,idx,maxBytesToRead){var endIdx=idx+maxBytesToRead;var endPtr=idx;while(heap[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&heap.subarray&&UTF8Decoder){return UTF8Decoder.decode(heap.subarray(idx,endPtr))}else {var str="";while(idx<endPtr){var u0=heap[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=heap[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=heap[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2;}else {u0=(u0&7)<<18|u1<<12|u2<<6|heap[idx++]&63;}if(u0<65536){str+=String.fromCharCode(u0);}else {var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023);}}}return str}function UTF8ToString(ptr,maxBytesToRead){return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):""}function stringToUTF8Array(str,heap,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023;}if(u<=127){if(outIdx>=endIdx)break;heap[outIdx++]=u;}else if(u<=2047){if(outIdx+1>=endIdx)break;heap[outIdx++]=192|u>>6;heap[outIdx++]=128|u&63;}else if(u<=65535){if(outIdx+2>=endIdx)break;heap[outIdx++]=224|u>>12;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63;}else {if(outIdx+3>=endIdx)break;heap[outIdx++]=240|u>>18;heap[outIdx++]=128|u>>12&63;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63;}}heap[outIdx]=0;return outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127)++len;else if(u<=2047)len+=2;else if(u<=65535)len+=3;else len+=4;}return len}var UTF16Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf-16le"):undefined;function UTF16ToString(ptr,maxBytesToRead){var endPtr=ptr;var idx=endPtr>>1;var maxIdx=idx+maxBytesToRead/2;while(!(idx>=maxIdx)&&HEAPU16[idx])++idx;endPtr=idx<<1;if(endPtr-ptr>32&&UTF16Decoder){return UTF16Decoder.decode(HEAPU8.subarray(ptr,endPtr))}else {var i=0;var str="";while(1){var codeUnit=HEAP16[ptr+i*2>>1];if(codeUnit==0||i==maxBytesToRead/2)return str;++i;str+=String.fromCharCode(codeUnit);}}}function stringToUTF16(str,outPtr,maxBytesToWrite){if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647;}if(maxBytesToWrite<2)return 0;maxBytesToWrite-=2;var startPtr=outPtr;var numCharsToWrite=maxBytesToWrite<str.length*2?maxBytesToWrite/2:str.length;for(var i=0;i<numCharsToWrite;++i){var codeUnit=str.charCodeAt(i);HEAP16[outPtr>>1]=codeUnit;outPtr+=2;}HEAP16[outPtr>>1]=0;return outPtr-startPtr}function lengthBytesUTF16(str){return str.length*2}function UTF32ToString(ptr,maxBytesToRead){var i=0;var str="";while(!(i>=maxBytesToRead/4)){var utf32=HEAP32[ptr+i*4>>2];if(utf32==0)break;++i;if(utf32>=65536){var ch=utf32-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023);}else {str+=String.fromCharCode(utf32);}}return str}function stringToUTF32(str,outPtr,maxBytesToWrite){if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647;}if(maxBytesToWrite<4)return 0;var startPtr=outPtr;var endPtr=startPtr+maxBytesToWrite-4;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343){var trailSurrogate=str.charCodeAt(++i);codeUnit=65536+((codeUnit&1023)<<10)|trailSurrogate&1023;}HEAP32[outPtr>>2]=codeUnit;outPtr+=4;if(outPtr+4>endPtr)break}HEAP32[outPtr>>2]=0;return outPtr-startPtr}function lengthBytesUTF32(str){var len=0;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343)++i;len+=4;}return len}function writeArrayToMemory(array,buffer){HEAP8.set(array,buffer);}function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){HEAP8[buffer++>>0]=str.charCodeAt(i);}if(!dontAddNull)HEAP8[buffer>>0]=0;}var WASM_PAGE_SIZE=65536;function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple;}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module["HEAP8"]=HEAP8=new Int8Array(buf);Module["HEAP16"]=HEAP16=new Int16Array(buf);Module["HEAP32"]=HEAP32=new Int32Array(buf);Module["HEAPU8"]=HEAPU8=new Uint8Array(buf);Module["HEAPU16"]=HEAPU16=new Uint16Array(buf);Module["HEAPU32"]=HEAPU32=new Uint32Array(buf);Module["HEAPF32"]=HEAPF32=new Float32Array(buf);Module["HEAPF64"]=HEAPF64=new Float64Array(buf);}var DYNAMIC_BASE=31839632,DYNAMICTOP_PTR=26596592;var INITIAL_INITIAL_MEMORY=Module["INITIAL_MEMORY"]||33554432;if(Module["wasmMemory"]){wasmMemory=Module["wasmMemory"];}else {wasmMemory=new WebAssembly.Memory({"initial":INITIAL_INITIAL_MEMORY/WASM_PAGE_SIZE,"maximum":1073741824/WASM_PAGE_SIZE});}if(wasmMemory){buffer=wasmMemory.buffer;}INITIAL_INITIAL_MEMORY=buffer.byteLength;updateGlobalBufferAndViews(buffer);HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE;function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback=="function"){callback(Module);continue}var func=callback.func;if(typeof func==="number"){if(callback.arg===undefined){Module["dynCall_v"](func);}else {Module["dynCall_vi"](func,callback.arg);}}else {func(callback.arg===undefined?null:callback.arg);}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATPOSTRUN__=[];function preRun(){if(Module["preRun"]){if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];while(Module["preRun"].length){addOnPreRun(Module["preRun"].shift());}}callRuntimeCallbacks(__ATPRERUN__);}function initRuntime(){if(!Module["noFSInit"]&&!FS.init.initialized)FS.init();callRuntimeCallbacks(__ATINIT__);}function preMain(){FS.ignorePermissions=false;callRuntimeCallbacks(__ATMAIN__);}function postRun(){if(Module["postRun"]){if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];while(Module["postRun"].length){addOnPostRun(Module["postRun"].shift());}}callRuntimeCallbacks(__ATPOSTRUN__);}function addOnPreRun(cb){__ATPRERUN__.unshift(cb);}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb);}var Math_abs=Math.abs;var Math_ceil=Math.ceil;var Math_floor=Math.floor;var Math_min=Math.min;var runDependencies=0;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies);}}function removeRunDependency(id){runDependencies--;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies);}if(runDependencies==0){if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback();}}}Module["preloadedImages"]={};Module["preloadedAudios"]={};function abort(what){if(Module["onAbort"]){Module["onAbort"](what);}what+="";out(what);err(what);ABORT=true;what="abort("+what+"). Build with -s ASSERTIONS=1 for more info.";throw new WebAssembly.RuntimeError(what)}function hasPrefix(str,prefix){return String.prototype.startsWith?str.startsWith(prefix):str.indexOf(prefix)===0}var dataURIPrefix="data:application/octet-stream;base64,";function isDataURI(filename){return hasPrefix(filename,dataURIPrefix)}var wasmBinaryFile="ffish.wasm";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile);}function getBinary(){try{if(wasmBinary){return new Uint8Array(wasmBinary)}if(readBinary){return readBinary(wasmBinaryFile)}else {throw "both async and sync fetching of the wasm failed"}}catch(err){abort(err);}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&typeof fetch==="function"){return fetch(wasmBinaryFile,{credentials:"same-origin"}).then(function(response){if(!response["ok"]){throw "failed to load wasm binary file at '"+wasmBinaryFile+"'"}return response["arrayBuffer"]()}).catch(function(){return getBinary()})}return new Promise(function(resolve,reject){resolve(getBinary());})}function createWasm(){var info={"a":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module["asm"]=exports;removeRunDependency();}addRunDependency();function receiveInstantiatedSource(output){receiveInstance(output["instance"]);}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(receiver,function(reason){err("failed to asynchronously prepare wasm: "+reason);abort(reason);})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming==="function"&&!isDataURI(wasmBinaryFile)&&typeof fetch==="function"){fetch(wasmBinaryFile,{credentials:"same-origin"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiatedSource,function(reason){err("wasm streaming compile failed: "+reason);err("falling back to ArrayBuffer instantiation");instantiateArrayBuffer(receiveInstantiatedSource);})});}else {return instantiateArrayBuffer(receiveInstantiatedSource)}}if(Module["instantiateWasm"]){try{var exports=Module["instantiateWasm"](info,receiveInstance);return exports}catch(e){err("Module.instantiateWasm callback failed with error: "+e);return false}}instantiateAsync();return {}}var tempDouble;var tempI64;__ATINIT__.push({func:function(){___wasm_call_ctors();}});function demangle(func){return func}function demangleAll(text){var regex=/\b_Z[\w\d_]+/g;return text.replace(regex,function(x){var y=demangle(x);return x===y?x:y+" ["+x+"]"})}function jsStackTrace(){var err=new Error;if(!err.stack){try{throw new Error}catch(e){err=e;}if(!err.stack){return "(no stack trace available)"}}return err.stack.toString()}function stackTrace(){var js=jsStackTrace();if(Module["extraStackTrace"])js+="\n"+Module["extraStackTrace"]();return demangleAll(js)}function ___cxa_allocate_exception(size){return _malloc(size)}function __ZSt18uncaught_exceptionv(){return __ZSt18uncaught_exceptionv.uncaught_exceptions>0}function ___cxa_throw(ptr,type,destructor){if(!("uncaught_exception"in __ZSt18uncaught_exceptionv)){__ZSt18uncaught_exceptionv.uncaught_exceptions=1;}else {__ZSt18uncaught_exceptionv.uncaught_exceptions++;}throw ptr}function setErrNo(value){HEAP32[___errno_location()>>2]=value;return value}function ___map_file(pathname,size){setErrNo(63);return -1}var PATH={splitPath:function(filename){var splitPathRe=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;return splitPathRe.exec(filename).slice(1)},normalizeArray:function(parts,allowAboveRoot){var up=0;for(var i=parts.length-1;i>=0;i--){var last=parts[i];if(last==="."){parts.splice(i,1);}else if(last===".."){parts.splice(i,1);up++;}else if(up){parts.splice(i,1);up--;}}if(allowAboveRoot){for(;up;up--){parts.unshift("..");}}return parts},normalize:function(path){var isAbsolute=path.charAt(0)==="/",trailingSlash=path.substr(-1)==="/";path=PATH.normalizeArray(path.split("/").filter(function(p){return !!p}),!isAbsolute).join("/");if(!path&&!isAbsolute){path=".";}if(path&&trailingSlash){path+="/";}return (isAbsolute?"/":"")+path},dirname:function(path){var result=PATH.splitPath(path),root=result[0],dir=result[1];if(!root&&!dir){return "."}if(dir){dir=dir.substr(0,dir.length-1);}return root+dir},basename:function(path){if(path==="/")return "/";var lastSlash=path.lastIndexOf("/");if(lastSlash===-1)return path;return path.substr(lastSlash+1)},extname:function(path){return PATH.splitPath(path)[3]},join:function(){var paths=Array.prototype.slice.call(arguments,0);return PATH.normalize(paths.join("/"))},join2:function(l,r){return PATH.normalize(l+"/"+r)}};var PATH_FS={resolve:function(){var resolvedPath="",resolvedAbsolute=false;for(var i=arguments.length-1;i>=-1&&!resolvedAbsolute;i--){var path=i>=0?arguments[i]:FS.cwd();if(typeof path!=="string"){throw new TypeError("Arguments to path.resolve must be strings")}else if(!path){return ""}resolvedPath=path+"/"+resolvedPath;resolvedAbsolute=path.charAt(0)==="/";}resolvedPath=PATH.normalizeArray(resolvedPath.split("/").filter(function(p){return !!p}),!resolvedAbsolute).join("/");return (resolvedAbsolute?"/":"")+resolvedPath||"."},relative:function(from,to){from=PATH_FS.resolve(from).substr(1);to=PATH_FS.resolve(to).substr(1);function trim(arr){var start=0;for(;start<arr.length;start++){if(arr[start]!=="")break}var end=arr.length-1;for(;end>=0;end--){if(arr[end]!=="")break}if(start>end)return [];return arr.slice(start,end-start+1)}var fromParts=trim(from.split("/"));var toParts=trim(to.split("/"));var length=Math.min(fromParts.length,toParts.length);var samePartsLength=length;for(var i=0;i<length;i++){if(fromParts[i]!==toParts[i]){samePartsLength=i;break}}var outputParts=[];for(var i=samePartsLength;i<fromParts.length;i++){outputParts.push("..");}outputParts=outputParts.concat(toParts.slice(samePartsLength));return outputParts.join("/")}};var TTY={ttys:[],init:function(){},shutdown:function(){},register:function(dev,ops){TTY.ttys[dev]={input:[],output:[],ops:ops};FS.registerDevice(dev,TTY.stream_ops);},stream_ops:{open:function(stream){var tty=TTY.ttys[stream.node.rdev];if(!tty){throw new FS.ErrnoError(43)}stream.tty=tty;stream.seekable=false;},close:function(stream){stream.tty.ops.flush(stream.tty);},flush:function(stream){stream.tty.ops.flush(stream.tty);},read:function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.get_char){throw new FS.ErrnoError(60)}var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=stream.tty.ops.get_char(stream.tty);}catch(e){throw new FS.ErrnoError(29)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(6)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result;}if(bytesRead){stream.node.timestamp=Date.now();}return bytesRead},write:function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.put_char){throw new FS.ErrnoError(60)}try{for(var i=0;i<length;i++){stream.tty.ops.put_char(stream.tty,buffer[offset+i]);}}catch(e){throw new FS.ErrnoError(29)}if(length){stream.node.timestamp=Date.now();}return i}},default_tty_ops:{get_char:function(tty){if(!tty.input.length){var result=null;if(typeof window!="undefined"&&typeof window.prompt=="function"){result=window.prompt("Input: ");if(result!==null){result+="\n";}}else if(typeof readline=="function"){result=readline();if(result!==null){result+="\n";}}if(!result){return null}tty.input=intArrayFromString(result,true);}return tty.input.shift()},put_char:function(tty,val){if(val===null||val===10){out(UTF8ArrayToString(tty.output,0));tty.output=[];}else {if(val!=0)tty.output.push(val);}},flush:function(tty){if(tty.output&&tty.output.length>0){out(UTF8ArrayToString(tty.output,0));tty.output=[];}}},default_tty1_ops:{put_char:function(tty,val){if(val===null||val===10){err(UTF8ArrayToString(tty.output,0));tty.output=[];}else {if(val!=0)tty.output.push(val);}},flush:function(tty){if(tty.output&&tty.output.length>0){err(UTF8ArrayToString(tty.output,0));tty.output=[];}}}};var MEMFS={ops_table:null,mount:function(mount){return MEMFS.createNode(null,"/",16384|511,0)},createNode:function(parent,name,mode,dev){if(FS.isBlkdev(mode)||FS.isFIFO(mode)){throw new FS.ErrnoError(63)}if(!MEMFS.ops_table){MEMFS.ops_table={dir:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,lookup:MEMFS.node_ops.lookup,mknod:MEMFS.node_ops.mknod,rename:MEMFS.node_ops.rename,unlink:MEMFS.node_ops.unlink,rmdir:MEMFS.node_ops.rmdir,readdir:MEMFS.node_ops.readdir,symlink:MEMFS.node_ops.symlink},stream:{llseek:MEMFS.stream_ops.llseek}},file:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:{llseek:MEMFS.stream_ops.llseek,read:MEMFS.stream_ops.read,write:MEMFS.stream_ops.write,allocate:MEMFS.stream_ops.allocate,mmap:MEMFS.stream_ops.mmap,msync:MEMFS.stream_ops.msync}},link:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,readlink:MEMFS.node_ops.readlink},stream:{}},chrdev:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:FS.chrdev_stream_ops}};}var node=FS.createNode(parent,name,mode,dev);if(FS.isDir(node.mode)){node.node_ops=MEMFS.ops_table.dir.node;node.stream_ops=MEMFS.ops_table.dir.stream;node.contents={};}else if(FS.isFile(node.mode)){node.node_ops=MEMFS.ops_table.file.node;node.stream_ops=MEMFS.ops_table.file.stream;node.usedBytes=0;node.contents=null;}else if(FS.isLink(node.mode)){node.node_ops=MEMFS.ops_table.link.node;node.stream_ops=MEMFS.ops_table.link.stream;}else if(FS.isChrdev(node.mode)){node.node_ops=MEMFS.ops_table.chrdev.node;node.stream_ops=MEMFS.ops_table.chrdev.stream;}node.timestamp=Date.now();if(parent){parent.contents[name]=node;}return node},getFileDataAsRegularArray:function(node){if(node.contents&&node.contents.subarray){var arr=[];for(var i=0;i<node.usedBytes;++i)arr.push(node.contents[i]);return arr}return node.contents},getFileDataAsTypedArray:function(node){if(!node.contents)return new Uint8Array(0);if(node.contents.subarray)return node.contents.subarray(0,node.usedBytes);return new Uint8Array(node.contents)},expandFileStorage:function(node,newCapacity){var prevCapacity=node.contents?node.contents.length:0;if(prevCapacity>=newCapacity)return;var CAPACITY_DOUBLING_MAX=1024*1024;newCapacity=Math.max(newCapacity,prevCapacity*(prevCapacity<CAPACITY_DOUBLING_MAX?2:1.125)>>>0);if(prevCapacity!=0)newCapacity=Math.max(newCapacity,256);var oldContents=node.contents;node.contents=new Uint8Array(newCapacity);if(node.usedBytes>0)node.contents.set(oldContents.subarray(0,node.usedBytes),0);return},resizeFileStorage:function(node,newSize){if(node.usedBytes==newSize)return;if(newSize==0){node.contents=null;node.usedBytes=0;return}if(!node.contents||node.contents.subarray){var oldContents=node.contents;node.contents=new Uint8Array(newSize);if(oldContents){node.contents.set(oldContents.subarray(0,Math.min(newSize,node.usedBytes)));}node.usedBytes=newSize;return}if(!node.contents)node.contents=[];if(node.contents.length>newSize)node.contents.length=newSize;else while(node.contents.length<newSize)node.contents.push(0);node.usedBytes=newSize;},node_ops:{getattr:function(node){var attr={};attr.dev=FS.isChrdev(node.mode)?node.id:1;attr.ino=node.id;attr.mode=node.mode;attr.nlink=1;attr.uid=0;attr.gid=0;attr.rdev=node.rdev;if(FS.isDir(node.mode)){attr.size=4096;}else if(FS.isFile(node.mode)){attr.size=node.usedBytes;}else if(FS.isLink(node.mode)){attr.size=node.link.length;}else {attr.size=0;}attr.atime=new Date(node.timestamp);attr.mtime=new Date(node.timestamp);attr.ctime=new Date(node.timestamp);attr.blksize=4096;attr.blocks=Math.ceil(attr.size/attr.blksize);return attr},setattr:function(node,attr){if(attr.mode!==undefined){node.mode=attr.mode;}if(attr.timestamp!==undefined){node.timestamp=attr.timestamp;}if(attr.size!==undefined){MEMFS.resizeFileStorage(node,attr.size);}},lookup:function(parent,name){throw FS.genericErrors[44]},mknod:function(parent,name,mode,dev){return MEMFS.createNode(parent,name,mode,dev)},rename:function(old_node,new_dir,new_name){if(FS.isDir(old_node.mode)){var new_node;try{new_node=FS.lookupNode(new_dir,new_name);}catch(e){}if(new_node){for(var i in new_node.contents){throw new FS.ErrnoError(55)}}}delete old_node.parent.contents[old_node.name];old_node.name=new_name;new_dir.contents[new_name]=old_node;old_node.parent=new_dir;},unlink:function(parent,name){delete parent.contents[name];},rmdir:function(parent,name){var node=FS.lookupNode(parent,name);for(var i in node.contents){throw new FS.ErrnoError(55)}delete parent.contents[name];},readdir:function(node){var entries=[".",".."];for(var key in node.contents){if(!node.contents.hasOwnProperty(key)){continue}entries.push(key);}return entries},symlink:function(parent,newname,oldpath){var node=MEMFS.createNode(parent,newname,511|40960,0);node.link=oldpath;return node},readlink:function(node){if(!FS.isLink(node.mode)){throw new FS.ErrnoError(28)}return node.link}},stream_ops:{read:function(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=stream.node.usedBytes)return 0;var size=Math.min(stream.node.usedBytes-position,length);if(size>8&&contents.subarray){buffer.set(contents.subarray(position,position+size),offset);}else {for(var i=0;i<size;i++)buffer[offset+i]=contents[position+i];}return size},write:function(stream,buffer,offset,length,position,canOwn){if(buffer.buffer===HEAP8.buffer){canOwn=false;}if(!length)return 0;var node=stream.node;node.timestamp=Date.now();if(buffer.subarray&&(!node.contents||node.contents.subarray)){if(canOwn){node.contents=buffer.subarray(offset,offset+length);node.usedBytes=length;return length}else if(node.usedBytes===0&&position===0){node.contents=buffer.slice(offset,offset+length);node.usedBytes=length;return length}else if(position+length<=node.usedBytes){node.contents.set(buffer.subarray(offset,offset+length),position);return length}}MEMFS.expandFileStorage(node,position+length);if(node.contents.subarray&&buffer.subarray)node.contents.set(buffer.subarray(offset,offset+length),position);else {for(var i=0;i<length;i++){node.contents[position+i]=buffer[offset+i];}}node.usedBytes=Math.max(node.usedBytes,position+length);return length},llseek:function(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position;}else if(whence===2){if(FS.isFile(stream.node.mode)){position+=stream.node.usedBytes;}}if(position<0){throw new FS.ErrnoError(28)}return position},allocate:function(stream,offset,length){MEMFS.expandFileStorage(stream.node,offset+length);stream.node.usedBytes=Math.max(stream.node.usedBytes,offset+length);},mmap:function(stream,buffer,offset,length,position,prot,flags){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43)}var ptr;var allocated;var contents=stream.node.contents;if(!(flags&2)&&contents.buffer===buffer.buffer){allocated=false;ptr=contents.byteOffset;}else {if(position>0||position+length<contents.length){if(contents.subarray){contents=contents.subarray(position,position+length);}else {contents=Array.prototype.slice.call(contents,position,position+length);}}allocated=true;var fromHeap=buffer.buffer==HEAP8.buffer;ptr=_malloc(length);if(!ptr){throw new FS.ErrnoError(48)}(fromHeap?HEAP8:buffer).set(contents,ptr);}return {ptr:ptr,allocated:allocated}},msync:function(stream,buffer,offset,length,mmapFlags){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43)}if(mmapFlags&2){return 0}MEMFS.stream_ops.write(stream,buffer,0,length,offset,false);return 0}}};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e){if(!(e instanceof FS.ErrnoError))throw e+" : "+stackTrace();return setErrNo(e.errno)},lookupPath:function(path,opts){path=PATH_FS.resolve(FS.cwd(),path);opts=opts||{};if(!path)return {path:"",node:null};var defaults={follow_mount:true,recurse_count:0};for(var key in defaults){if(opts[key]===undefined){opts[key]=defaults[key];}}if(opts.recurse_count>8){throw new FS.ErrnoError(32)}var parts=PATH.normalizeArray(path.split("/").filter(function(p){return !!p}),false);var current=FS.root;var current_path="/";for(var i=0;i<parts.length;i++){var islast=i===parts.length-1;if(islast&&opts.parent){break}current=FS.lookupNode(current,parts[i]);current_path=PATH.join2(current_path,parts[i]);if(FS.isMountpoint(current)){if(!islast||islast&&opts.follow_mount){current=current.mounted.root;}}if(!islast||opts.follow){var count=0;while(FS.isLink(current.mode)){var link=FS.readlink(current_path);current_path=PATH_FS.resolve(PATH.dirname(current_path),link);var lookup=FS.lookupPath(current_path,{recurse_count:opts.recurse_count});current=lookup.node;if(count++>40){throw new FS.ErrnoError(32)}}}}return {path:current_path,node:current}},getPath:function(node){var path;while(true){if(FS.isRoot(node)){var mount=node.mount.mountpoint;if(!path)return mount;return mount[mount.length-1]!=="/"?mount+"/"+path:mount+path}path=path?node.name+"/"+path:node.name;node=node.parent;}},hashName:function(parentid,name){var hash=0;for(var i=0;i<name.length;i++){hash=(hash<<5)-hash+name.charCodeAt(i)|0;}return (parentid+hash>>>0)%FS.nameTable.length},hashAddNode:function(node){var hash=FS.hashName(node.parent.id,node.name);node.name_next=FS.nameTable[hash];FS.nameTable[hash]=node;},hashRemoveNode:function(node){var hash=FS.hashName(node.parent.id,node.name);if(FS.nameTable[hash]===node){FS.nameTable[hash]=node.name_next;}else {var current=FS.nameTable[hash];while(current){if(current.name_next===node){current.name_next=node.name_next;break}current=current.name_next;}}},lookupNode:function(parent,name){var errCode=FS.mayLookup(parent);if(errCode){throw new FS.ErrnoError(errCode,parent)}var hash=FS.hashName(parent.id,name);for(var node=FS.nameTable[hash];node;node=node.name_next){var nodeName=node.name;if(node.parent.id===parent.id&&nodeName===name){return node}}return FS.lookup(parent,name)},createNode:function(parent,name,mode,rdev){var node=new FS.FSNode(parent,name,mode,rdev);FS.hashAddNode(node);return node},destroyNode:function(node){FS.hashRemoveNode(node);},isRoot:function(node){return node===node.parent},isMountpoint:function(node){return !!node.mounted},isFile:function(mode){return (mode&61440)===32768},isDir:function(mode){return (mode&61440)===16384},isLink:function(mode){return (mode&61440)===40960},isChrdev:function(mode){return (mode&61440)===8192},isBlkdev:function(mode){return (mode&61440)===24576},isFIFO:function(mode){return (mode&61440)===4096},isSocket:function(mode){return (mode&49152)===49152},flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(str){var flags=FS.flagModes[str];if(typeof flags==="undefined"){throw new Error("Unknown file open mode: "+str)}return flags},flagsToPermissionString:function(flag){var perms=["r","w","rw"][flag&3];if(flag&512){perms+="w";}return perms},nodePermissions:function(node,perms){if(FS.ignorePermissions){return 0}if(perms.indexOf("r")!==-1&&!(node.mode&292)){return 2}else if(perms.indexOf("w")!==-1&&!(node.mode&146)){return 2}else if(perms.indexOf("x")!==-1&&!(node.mode&73)){return 2}return 0},mayLookup:function(dir){var errCode=FS.nodePermissions(dir,"x");if(errCode)return errCode;if(!dir.node_ops.lookup)return 2;return 0},mayCreate:function(dir,name){try{var node=FS.lookupNode(dir,name);return 20}catch(e){}return FS.nodePermissions(dir,"wx")},mayDelete:function(dir,name,isdir){var node;try{node=FS.lookupNode(dir,name);}catch(e){return e.errno}var errCode=FS.nodePermissions(dir,"wx");if(errCode){return errCode}if(isdir){if(!FS.isDir(node.mode)){return 54}if(FS.isRoot(node)||FS.getPath(node)===FS.cwd()){return 10}}else {if(FS.isDir(node.mode)){return 31}}return 0},mayOpen:function(node,flags){if(!node){return 44}if(FS.isLink(node.mode)){return 32}else if(FS.isDir(node.mode)){if(FS.flagsToPermissionString(flags)!=="r"||flags&512){return 31}}return FS.nodePermissions(node,FS.flagsToPermissionString(flags))},MAX_OPEN_FDS:4096,nextfd:function(fd_start,fd_end){fd_start=fd_start||0;fd_end=fd_end||FS.MAX_OPEN_FDS;for(var fd=fd_start;fd<=fd_end;fd++){if(!FS.streams[fd]){return fd}}throw new FS.ErrnoError(33)},getStream:function(fd){return FS.streams[fd]},createStream:function(stream,fd_start,fd_end){if(!FS.FSStream){FS.FSStream=function(){};FS.FSStream.prototype={object:{get:function(){return this.node},set:function(val){this.node=val;}},isRead:{get:function(){return (this.flags&2097155)!==1}},isWrite:{get:function(){return (this.flags&2097155)!==0}},isAppend:{get:function(){return this.flags&1024}}};}var newStream=new FS.FSStream;for(var p in stream){newStream[p]=stream[p];}stream=newStream;var fd=FS.nextfd(fd_start,fd_end);stream.fd=fd;FS.streams[fd]=stream;return stream},closeStream:function(fd){FS.streams[fd]=null;},chrdev_stream_ops:{open:function(stream){var device=FS.getDevice(stream.node.rdev);stream.stream_ops=device.stream_ops;if(stream.stream_ops.open){stream.stream_ops.open(stream);}},llseek:function(){throw new FS.ErrnoError(70)}},major:function(dev){return dev>>8},minor:function(dev){return dev&255},makedev:function(ma,mi){return ma<<8|mi},registerDevice:function(dev,ops){FS.devices[dev]={stream_ops:ops};},getDevice:function(dev){return FS.devices[dev]},getMounts:function(mount){var mounts=[];var check=[mount];while(check.length){var m=check.pop();mounts.push(m);check.push.apply(check,m.mounts);}return mounts},syncfs:function(populate,callback){if(typeof populate==="function"){callback=populate;populate=false;}FS.syncFSRequests++;if(FS.syncFSRequests>1){err("warning: "+FS.syncFSRequests+" FS.syncfs operations in flight at once, probably just doing extra work");}var mounts=FS.getMounts(FS.root.mount);var completed=0;function doCallback(errCode){FS.syncFSRequests--;return callback(errCode)}function done(errCode){if(errCode){if(!done.errored){done.errored=true;return doCallback(errCode)}return}if(++completed>=mounts.length){doCallback(null);}}mounts.forEach(function(mount){if(!mount.type.syncfs){return done(null)}mount.type.syncfs(mount,populate,done);});},mount:function(type,opts,mountpoint){var root=mountpoint==="/";var pseudo=!mountpoint;var node;if(root&&FS.root){throw new FS.ErrnoError(10)}else if(!root&&!pseudo){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});mountpoint=lookup.path;node=lookup.node;if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}if(!FS.isDir(node.mode)){throw new FS.ErrnoError(54)}}var mount={type:type,opts:opts,mountpoint:mountpoint,mounts:[]};var mountRoot=type.mount(mount);mountRoot.mount=mount;mount.root=mountRoot;if(root){FS.root=mountRoot;}else if(node){node.mounted=mount;if(node.mount){node.mount.mounts.push(mount);}}return mountRoot},unmount:function(mountpoint){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});if(!FS.isMountpoint(lookup.node)){throw new FS.ErrnoError(28)}var node=lookup.node;var mount=node.mounted;var mounts=FS.getMounts(mount);Object.keys(FS.nameTable).forEach(function(hash){var current=FS.nameTable[hash];while(current){var next=current.name_next;if(mounts.indexOf(current.mount)!==-1){FS.destroyNode(current);}current=next;}});node.mounted=null;var idx=node.mount.mounts.indexOf(mount);node.mount.mounts.splice(idx,1);},lookup:function(parent,name){return parent.node_ops.lookup(parent,name)},mknod:function(path,mode,dev){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);if(!name||name==="."||name===".."){throw new FS.ErrnoError(28)}var errCode=FS.mayCreate(parent,name);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.mknod){throw new FS.ErrnoError(63)}return parent.node_ops.mknod(parent,name,mode,dev)},create:function(path,mode){mode=mode!==undefined?mode:438;mode&=4095;mode|=32768;return FS.mknod(path,mode,0)},mkdir:function(path,mode){mode=mode!==undefined?mode:511;mode&=511|512;mode|=16384;return FS.mknod(path,mode,0)},mkdirTree:function(path,mode){var dirs=path.split("/");var d="";for(var i=0;i<dirs.length;++i){if(!dirs[i])continue;d+="/"+dirs[i];try{FS.mkdir(d,mode);}catch(e){if(e.errno!=20)throw e}}},mkdev:function(path,mode,dev){if(typeof dev==="undefined"){dev=mode;mode=438;}mode|=8192;return FS.mknod(path,mode,dev)},symlink:function(oldpath,newpath){if(!PATH_FS.resolve(oldpath)){throw new FS.ErrnoError(44)}var lookup=FS.lookupPath(newpath,{parent:true});var parent=lookup.node;if(!parent){throw new FS.ErrnoError(44)}var newname=PATH.basename(newpath);var errCode=FS.mayCreate(parent,newname);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.symlink){throw new FS.ErrnoError(63)}return parent.node_ops.symlink(parent,newname,oldpath)},rename:function(old_path,new_path){var old_dirname=PATH.dirname(old_path);var new_dirname=PATH.dirname(new_path);var old_name=PATH.basename(old_path);var new_name=PATH.basename(new_path);var lookup,old_dir,new_dir;try{lookup=FS.lookupPath(old_path,{parent:true});old_dir=lookup.node;lookup=FS.lookupPath(new_path,{parent:true});new_dir=lookup.node;}catch(e){throw new FS.ErrnoError(10)}if(!old_dir||!new_dir)throw new FS.ErrnoError(44);if(old_dir.mount!==new_dir.mount){throw new FS.ErrnoError(75)}var old_node=FS.lookupNode(old_dir,old_name);var relative=PATH_FS.relative(old_path,new_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(28)}relative=PATH_FS.relative(new_path,old_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(55)}var new_node;try{new_node=FS.lookupNode(new_dir,new_name);}catch(e){}if(old_node===new_node){return}var isdir=FS.isDir(old_node.mode);var errCode=FS.mayDelete(old_dir,old_name,isdir);if(errCode){throw new FS.ErrnoError(errCode)}errCode=new_node?FS.mayDelete(new_dir,new_name,isdir):FS.mayCreate(new_dir,new_name);if(errCode){throw new FS.ErrnoError(errCode)}if(!old_dir.node_ops.rename){throw new FS.ErrnoError(63)}if(FS.isMountpoint(old_node)||new_node&&FS.isMountpoint(new_node)){throw new FS.ErrnoError(10)}if(new_dir!==old_dir){errCode=FS.nodePermissions(old_dir,"w");if(errCode){throw new FS.ErrnoError(errCode)}}try{if(FS.trackingDelegate["willMovePath"]){FS.trackingDelegate["willMovePath"](old_path,new_path);}}catch(e){err("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: "+e.message);}FS.hashRemoveNode(old_node);try{old_dir.node_ops.rename(old_node,new_dir,new_name);}catch(e){throw e}finally{FS.hashAddNode(old_node);}try{if(FS.trackingDelegate["onMovePath"])FS.trackingDelegate["onMovePath"](old_path,new_path);}catch(e){err("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: "+e.message);}},rmdir:function(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var errCode=FS.mayDelete(parent,name,true);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.rmdir){throw new FS.ErrnoError(63)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}try{if(FS.trackingDelegate["willDeletePath"]){FS.trackingDelegate["willDeletePath"](path);}}catch(e){err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: "+e.message);}parent.node_ops.rmdir(parent,name);FS.destroyNode(node);try{if(FS.trackingDelegate["onDeletePath"])FS.trackingDelegate["onDeletePath"](path);}catch(e){err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: "+e.message);}},readdir:function(path){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;if(!node.node_ops.readdir){throw new FS.ErrnoError(54)}return node.node_ops.readdir(node)},unlink:function(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var errCode=FS.mayDelete(parent,name,false);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.unlink){throw new FS.ErrnoError(63)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}try{if(FS.trackingDelegate["willDeletePath"]){FS.trackingDelegate["willDeletePath"](path);}}catch(e){err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: "+e.message);}parent.node_ops.unlink(parent,name);FS.destroyNode(node);try{if(FS.trackingDelegate["onDeletePath"])FS.trackingDelegate["onDeletePath"](path);}catch(e){err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: "+e.message);}},readlink:function(path){var lookup=FS.lookupPath(path);var link=lookup.node;if(!link){throw new FS.ErrnoError(44)}if(!link.node_ops.readlink){throw new FS.ErrnoError(28)}return PATH_FS.resolve(FS.getPath(link.parent),link.node_ops.readlink(link))},stat:function(path,dontFollow){var lookup=FS.lookupPath(path,{follow:!dontFollow});var node=lookup.node;if(!node){throw new FS.ErrnoError(44)}if(!node.node_ops.getattr){throw new FS.ErrnoError(63)}return node.node_ops.getattr(node)},lstat:function(path){return FS.stat(path,true)},chmod:function(path,mode,dontFollow){var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node;}else {node=path;}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}node.node_ops.setattr(node,{mode:mode&4095|node.mode&~4095,timestamp:Date.now()});},lchmod:function(path,mode){FS.chmod(path,mode,true);},fchmod:function(fd,mode){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}FS.chmod(stream.node,mode);},chown:function(path,uid,gid,dontFollow){var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node;}else {node=path;}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}node.node_ops.setattr(node,{timestamp:Date.now()});},lchown:function(path,uid,gid){FS.chown(path,uid,gid,true);},fchown:function(fd,uid,gid){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}FS.chown(stream.node,uid,gid);},truncate:function(path,len){if(len<0){throw new FS.ErrnoError(28)}var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:true});node=lookup.node;}else {node=path;}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}if(FS.isDir(node.mode)){throw new FS.ErrnoError(31)}if(!FS.isFile(node.mode)){throw new FS.ErrnoError(28)}var errCode=FS.nodePermissions(node,"w");if(errCode){throw new FS.ErrnoError(errCode)}node.node_ops.setattr(node,{size:len,timestamp:Date.now()});},ftruncate:function(fd,len){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(28)}FS.truncate(stream.node,len);},utime:function(path,atime,mtime){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;node.node_ops.setattr(node,{timestamp:Math.max(atime,mtime)});},open:function(path,flags,mode,fd_start,fd_end){if(path===""){throw new FS.ErrnoError(44)}flags=typeof flags==="string"?FS.modeStringToFlags(flags):flags;mode=typeof mode==="undefined"?438:mode;if(flags&64){mode=mode&4095|32768;}else {mode=0;}var node;if(typeof path==="object"){node=path;}else {path=PATH.normalize(path);try{var lookup=FS.lookupPath(path,{follow:!(flags&131072)});node=lookup.node;}catch(e){}}var created=false;if(flags&64){if(node){if(flags&128){throw new FS.ErrnoError(20)}}else {node=FS.mknod(path,mode,0);created=true;}}if(!node){throw new FS.ErrnoError(44)}if(FS.isChrdev(node.mode)){flags&=~512;}if(flags&65536&&!FS.isDir(node.mode)){throw new FS.ErrnoError(54)}if(!created){var errCode=FS.mayOpen(node,flags);if(errCode){throw new FS.ErrnoError(errCode)}}if(flags&512){FS.truncate(node,0);}flags&=~(128|512|131072);var stream=FS.createStream({node:node,path:FS.getPath(node),flags:flags,seekable:true,position:0,stream_ops:node.stream_ops,ungotten:[],error:false},fd_start,fd_end);if(stream.stream_ops.open){stream.stream_ops.open(stream);}if(Module["logReadFiles"]&&!(flags&1)){if(!FS.readFiles)FS.readFiles={};if(!(path in FS.readFiles)){FS.readFiles[path]=1;err("FS.trackingDelegate error on read file: "+path);}}try{if(FS.trackingDelegate["onOpenFile"]){var trackingFlags=0;if((flags&2097155)!==1){trackingFlags|=FS.tracking.openFlags.READ;}if((flags&2097155)!==0){trackingFlags|=FS.tracking.openFlags.WRITE;}FS.trackingDelegate["onOpenFile"](path,trackingFlags);}}catch(e){err("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: "+e.message);}return stream},close:function(stream){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(stream.getdents)stream.getdents=null;try{if(stream.stream_ops.close){stream.stream_ops.close(stream);}}catch(e){throw e}finally{FS.closeStream(stream.fd);}stream.fd=null;},isClosed:function(stream){return stream.fd===null},llseek:function(stream,offset,whence){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(!stream.seekable||!stream.stream_ops.llseek){throw new FS.ErrnoError(70)}if(whence!=0&&whence!=1&&whence!=2){throw new FS.ErrnoError(28)}stream.position=stream.stream_ops.llseek(stream,offset,whence);stream.ungotten=[];return stream.position},read:function(stream,buffer,offset,length,position){if(length<0||position<0){throw new FS.ErrnoError(28)}if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(8)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31)}if(!stream.stream_ops.read){throw new FS.ErrnoError(28)}var seeking=typeof position!=="undefined";if(!seeking){position=stream.position;}else if(!stream.seekable){throw new FS.ErrnoError(70)}var bytesRead=stream.stream_ops.read(stream,buffer,offset,length,position);if(!seeking)stream.position+=bytesRead;return bytesRead},write:function(stream,buffer,offset,length,position,canOwn){if(length<0||position<0){throw new FS.ErrnoError(28)}if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31)}if(!stream.stream_ops.write){throw new FS.ErrnoError(28)}if(stream.seekable&&stream.flags&1024){FS.llseek(stream,0,2);}var seeking=typeof position!=="undefined";if(!seeking){position=stream.position;}else if(!stream.seekable){throw new FS.ErrnoError(70)}var bytesWritten=stream.stream_ops.write(stream,buffer,offset,length,position,canOwn);if(!seeking)stream.position+=bytesWritten;try{if(stream.path&&FS.trackingDelegate["onWriteToFile"])FS.trackingDelegate["onWriteToFile"](stream.path);}catch(e){err("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: "+e.message);}return bytesWritten},allocate:function(stream,offset,length){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(offset<0||length<=0){throw new FS.ErrnoError(28)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8)}if(!FS.isFile(stream.node.mode)&&!FS.isDir(stream.node.mode)){throw new FS.ErrnoError(43)}if(!stream.stream_ops.allocate){throw new FS.ErrnoError(138)}stream.stream_ops.allocate(stream,offset,length);},mmap:function(stream,buffer,offset,length,position,prot,flags){if((prot&2)!==0&&(flags&2)===0&&(stream.flags&2097155)!==2){throw new FS.ErrnoError(2)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(2)}if(!stream.stream_ops.mmap){throw new FS.ErrnoError(43)}return stream.stream_ops.mmap(stream,buffer,offset,length,position,prot,flags)},msync:function(stream,buffer,offset,length,mmapFlags){if(!stream||!stream.stream_ops.msync){return 0}return stream.stream_ops.msync(stream,buffer,offset,length,mmapFlags)},munmap:function(stream){return 0},ioctl:function(stream,cmd,arg){if(!stream.stream_ops.ioctl){throw new FS.ErrnoError(59)}return stream.stream_ops.ioctl(stream,cmd,arg)},readFile:function(path,opts){opts=opts||{};opts.flags=opts.flags||"r";opts.encoding=opts.encoding||"binary";if(opts.encoding!=="utf8"&&opts.encoding!=="binary"){throw new Error('Invalid encoding type "'+opts.encoding+'"')}var ret;var stream=FS.open(path,opts.flags);var stat=FS.stat(path);var length=stat.size;var buf=new Uint8Array(length);FS.read(stream,buf,0,length,0);if(opts.encoding==="utf8"){ret=UTF8ArrayToString(buf,0);}else if(opts.encoding==="binary"){ret=buf;}FS.close(stream);return ret},writeFile:function(path,data,opts){opts=opts||{};opts.flags=opts.flags||"w";var stream=FS.open(path,opts.flags,opts.mode);if(typeof data==="string"){var buf=new Uint8Array(lengthBytesUTF8(data)+1);var actualNumBytes=stringToUTF8Array(data,buf,0,buf.length);FS.write(stream,buf,0,actualNumBytes,undefined,opts.canOwn);}else if(ArrayBuffer.isView(data)){FS.write(stream,data,0,data.byteLength,undefined,opts.canOwn);}else {throw new Error("Unsupported data type")}FS.close(stream);},cwd:function(){return FS.currentPath},chdir:function(path){var lookup=FS.lookupPath(path,{follow:true});if(lookup.node===null){throw new FS.ErrnoError(44)}if(!FS.isDir(lookup.node.mode)){throw new FS.ErrnoError(54)}var errCode=FS.nodePermissions(lookup.node,"x");if(errCode){throw new FS.ErrnoError(errCode)}FS.currentPath=lookup.path;},createDefaultDirectories:function(){FS.mkdir("/tmp");FS.mkdir("/home");FS.mkdir("/home/web_user");},createDefaultDevices:function(){FS.mkdir("/dev");FS.registerDevice(FS.makedev(1,3),{read:function(){return 0},write:function(stream,buffer,offset,length,pos){return length}});FS.mkdev("/dev/null",FS.makedev(1,3));TTY.register(FS.makedev(5,0),TTY.default_tty_ops);TTY.register(FS.makedev(6,0),TTY.default_tty1_ops);FS.mkdev("/dev/tty",FS.makedev(5,0));FS.mkdev("/dev/tty1",FS.makedev(6,0));var random_device;if(typeof crypto==="object"&&typeof crypto["getRandomValues"]==="function"){var randomBuffer=new Uint8Array(1);random_device=function(){crypto.getRandomValues(randomBuffer);return randomBuffer[0]};}if(!random_device){random_device=function(){abort("random_device");};}FS.createDevice("/dev","random",random_device);FS.createDevice("/dev","urandom",random_device);FS.mkdir("/dev/shm");FS.mkdir("/dev/shm/tmp");},createSpecialDirectories:function(){FS.mkdir("/proc");FS.mkdir("/proc/self");FS.mkdir("/proc/self/fd");FS.mount({mount:function(){var node=FS.createNode("/proc/self","fd",16384|511,73);node.node_ops={lookup:function(parent,name){var fd=+name;var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);var ret={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:function(){return stream.path}}};ret.parent=ret;return ret}};return node}},{},"/proc/self/fd");},createStandardStreams:function(){if(Module["stdin"]){FS.createDevice("/dev","stdin",Module["stdin"]);}else {FS.symlink("/dev/tty","/dev/stdin");}if(Module["stdout"]){FS.createDevice("/dev","stdout",null,Module["stdout"]);}else {FS.symlink("/dev/tty","/dev/stdout");}if(Module["stderr"]){FS.createDevice("/dev","stderr",null,Module["stderr"]);}else {FS.symlink("/dev/tty1","/dev/stderr");}FS.open("/dev/stdin","r");FS.open("/dev/stdout","w");FS.open("/dev/stderr","w");},ensureErrnoError:function(){if(FS.ErrnoError)return;FS.ErrnoError=function ErrnoError(errno,node){this.node=node;this.setErrno=function(errno){this.errno=errno;};this.setErrno(errno);this.message="FS error";};FS.ErrnoError.prototype=new Error;FS.ErrnoError.prototype.constructor=FS.ErrnoError;[44].forEach(function(code){FS.genericErrors[code]=new FS.ErrnoError(code);FS.genericErrors[code].stack="<generic error, no stack>";});},staticInit:function(){FS.ensureErrnoError();FS.nameTable=new Array(4096);FS.mount(MEMFS,{},"/");FS.createDefaultDirectories();FS.createDefaultDevices();FS.createSpecialDirectories();FS.filesystems={"MEMFS":MEMFS};},init:function(input,output,error){FS.init.initialized=true;FS.ensureErrnoError();Module["stdin"]=input||Module["stdin"];Module["stdout"]=output||Module["stdout"];Module["stderr"]=error||Module["stderr"];FS.createStandardStreams();},quit:function(){FS.init.initialized=false;var fflush=Module["_fflush"];if(fflush)fflush(0);for(var i=0;i<FS.streams.length;i++){var stream=FS.streams[i];if(!stream){continue}FS.close(stream);}},getMode:function(canRead,canWrite){var mode=0;if(canRead)mode|=292|73;if(canWrite)mode|=146;return mode},joinPath:function(parts,forceRelative){var path=PATH.join.apply(null,parts);if(forceRelative&&path[0]=="/")path=path.substr(1);return path},absolutePath:function(relative,base){return PATH_FS.resolve(base,relative)},standardizePath:function(path){return PATH.normalize(path)},findObject:function(path,dontResolveLastLink){var ret=FS.analyzePath(path,dontResolveLastLink);if(ret.exists){return ret.object}else {setErrNo(ret.error);return null}},analyzePath:function(path,dontResolveLastLink){try{var lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});path=lookup.path;}catch(e){}var ret={isRoot:false,exists:false,error:0,name:null,path:null,object:null,parentExists:false,parentPath:null,parentObject:null};try{var lookup=FS.lookupPath(path,{parent:true});ret.parentExists=true;ret.parentPath=lookup.path;ret.parentObject=lookup.node;ret.name=PATH.basename(path);lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});ret.exists=true;ret.path=lookup.path;ret.object=lookup.node;ret.name=lookup.node.name;ret.isRoot=lookup.path==="/";}catch(e){ret.error=e.errno;}return ret},createFolder:function(parent,name,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(canRead,canWrite);return FS.mkdir(path,mode)},createPath:function(parent,path,canRead,canWrite){parent=typeof parent==="string"?parent:FS.getPath(parent);var parts=path.split("/").reverse();while(parts.length){var part=parts.pop();if(!part)continue;var current=PATH.join2(parent,part);try{FS.mkdir(current);}catch(e){}parent=current;}return current},createFile:function(parent,name,properties,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(canRead,canWrite);return FS.create(path,mode)},createDataFile:function(parent,name,data,canRead,canWrite,canOwn){var path=name?PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name):parent;var mode=FS.getMode(canRead,canWrite);var node=FS.create(path,mode);if(data){if(typeof data==="string"){var arr=new Array(data.length);for(var i=0,len=data.length;i<len;++i)arr[i]=data.charCodeAt(i);data=arr;}FS.chmod(node,mode|146);var stream=FS.open(node,"w");FS.write(stream,data,0,data.length,0,canOwn);FS.close(stream);FS.chmod(node,mode);}return node},createDevice:function(parent,name,input,output){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(!!input,!!output);if(!FS.createDevice.major)FS.createDevice.major=64;var dev=FS.makedev(FS.createDevice.major++,0);FS.registerDevice(dev,{open:function(stream){stream.seekable=false;},close:function(stream){if(output&&output.buffer&&output.buffer.length){output(10);}},read:function(stream,buffer,offset,length,pos){var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=input();}catch(e){throw new FS.ErrnoError(29)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(6)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result;}if(bytesRead){stream.node.timestamp=Date.now();}return bytesRead},write:function(stream,buffer,offset,length,pos){for(var i=0;i<length;i++){try{output(buffer[offset+i]);}catch(e){throw new FS.ErrnoError(29)}}if(length){stream.node.timestamp=Date.now();}return i}});return FS.mkdev(path,mode,dev)},createLink:function(parent,name,target,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);return FS.symlink(target,path)},forceLoadFile:function(obj){if(obj.isDevice||obj.isFolder||obj.link||obj.contents)return true;var success=true;if(typeof XMLHttpRequest!=="undefined"){throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.")}else if(read_){try{obj.contents=intArrayFromString(read_(obj.url),true);obj.usedBytes=obj.contents.length;}catch(e){success=false;}}else {throw new Error("Cannot load without read() or XMLHttpRequest.")}if(!success)setErrNo(29);return success},createLazyFile:function(parent,name,url,canRead,canWrite){function LazyUint8Array(){this.lengthKnown=false;this.chunks=[];}LazyUint8Array.prototype.get=function LazyUint8Array_get(idx){if(idx>this.length-1||idx<0){return undefined}var chunkOffset=idx%this.chunkSize;var chunkNum=idx/this.chunkSize|0;return this.getter(chunkNum)[chunkOffset]};LazyUint8Array.prototype.setDataGetter=function LazyUint8Array_setDataGetter(getter){this.getter=getter;};LazyUint8Array.prototype.cacheLength=function LazyUint8Array_cacheLength(){var xhr=new XMLHttpRequest;xhr.open("HEAD",url,false);xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);var datalength=Number(xhr.getResponseHeader("Content-length"));var header;var hasByteServing=(header=xhr.getResponseHeader("Accept-Ranges"))&&header==="bytes";var usesGzip=(header=xhr.getResponseHeader("Content-Encoding"))&&header==="gzip";var chunkSize=1024*1024;if(!hasByteServing)chunkSize=datalength;var doXHR=function(from,to){if(from>to)throw new Error("invalid range ("+from+", "+to+") or no bytes requested!");if(to>datalength-1)throw new Error("only "+datalength+" bytes available! programmer error!");var xhr=new XMLHttpRequest;xhr.open("GET",url,false);if(datalength!==chunkSize)xhr.setRequestHeader("Range","bytes="+from+"-"+to);if(typeof Uint8Array!="undefined")xhr.responseType="arraybuffer";if(xhr.overrideMimeType){xhr.overrideMimeType("text/plain; charset=x-user-defined");}xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);if(xhr.response!==undefined){return new Uint8Array(xhr.response||[])}else {return intArrayFromString(xhr.responseText||"",true)}};var lazyArray=this;lazyArray.setDataGetter(function(chunkNum){var start=chunkNum*chunkSize;var end=(chunkNum+1)*chunkSize-1;end=Math.min(end,datalength-1);if(typeof lazyArray.chunks[chunkNum]==="undefined"){lazyArray.chunks[chunkNum]=doXHR(start,end);}if(typeof lazyArray.chunks[chunkNum]==="undefined")throw new Error("doXHR failed!");return lazyArray.chunks[chunkNum]});if(usesGzip||!datalength){chunkSize=datalength=1;datalength=this.getter(0).length;chunkSize=datalength;out("LazyFiles on gzip forces download of the whole file when length is accessed");}this._length=datalength;this._chunkSize=chunkSize;this.lengthKnown=true;};if(typeof XMLHttpRequest!=="undefined"){if(!ENVIRONMENT_IS_WORKER)throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var lazyArray=new LazyUint8Array;Object.defineProperties(lazyArray,{length:{get:function(){if(!this.lengthKnown){this.cacheLength();}return this._length}},chunkSize:{get:function(){if(!this.lengthKnown){this.cacheLength();}return this._chunkSize}}});var properties={isDevice:false,contents:lazyArray};}else {var properties={isDevice:false,url:url};}var node=FS.createFile(parent,name,properties,canRead,canWrite);if(properties.contents){node.contents=properties.contents;}else if(properties.url){node.contents=null;node.url=properties.url;}Object.defineProperties(node,{usedBytes:{get:function(){return this.contents.length}}});var stream_ops={};var keys=Object.keys(node.stream_ops);keys.forEach(function(key){var fn=node.stream_ops[key];stream_ops[key]=function forceLoadLazyFile(){if(!FS.forceLoadFile(node)){throw new FS.ErrnoError(29)}return fn.apply(null,arguments)};});stream_ops.read=function stream_ops_read(stream,buffer,offset,length,position){if(!FS.forceLoadFile(node)){throw new FS.ErrnoError(29)}var contents=stream.node.contents;if(position>=contents.length)return 0;var size=Math.min(contents.length-position,length);if(contents.slice){for(var i=0;i<size;i++){buffer[offset+i]=contents[position+i];}}else {for(var i=0;i<size;i++){buffer[offset+i]=contents.get(position+i);}}return size};node.stream_ops=stream_ops;return node},createPreloadedFile:function(parent,name,url,canRead,canWrite,onload,onerror,dontCreateFile,canOwn,preFinish){Browser.init();var fullname=name?PATH_FS.resolve(PATH.join2(parent,name)):parent;function processData(byteArray){function finish(byteArray){if(preFinish)preFinish();if(!dontCreateFile){FS.createDataFile(parent,name,byteArray,canRead,canWrite,canOwn);}if(onload)onload();removeRunDependency();}var handled=false;Module["preloadPlugins"].forEach(function(plugin){if(handled)return;if(plugin["canHandle"](fullname)){plugin["handle"](byteArray,fullname,finish,function(){if(onerror)onerror();removeRunDependency();});handled=true;}});if(!handled)finish(byteArray);}addRunDependency();if(typeof url=="string"){Browser.asyncLoad(url,function(byteArray){processData(byteArray);},onerror);}else {processData(url);}},indexedDB:function(){return window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB},DB_NAME:function(){return "EM_FS_"+window.location.pathname},DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths,onload,onerror){onload=onload||function(){};onerror=onerror||function(){};var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION);}catch(e){return onerror(e)}openRequest.onupgradeneeded=function openRequest_onupgradeneeded(){out("creating db");var db=openRequest.result;db.createObjectStore(FS.DB_STORE_NAME);};openRequest.onsuccess=function openRequest_onsuccess(){var db=openRequest.result;var transaction=db.transaction([FS.DB_STORE_NAME],"readwrite");var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror();}paths.forEach(function(path){var putRequest=files.put(FS.analyzePath(path).object.contents,path);putRequest.onsuccess=function putRequest_onsuccess(){ok++;if(ok+fail==total)finish();};putRequest.onerror=function putRequest_onerror(){fail++;if(ok+fail==total)finish();};});transaction.onerror=onerror;};openRequest.onerror=onerror;},loadFilesFromDB:function(paths,onload,onerror){onload=onload||function(){};onerror=onerror||function(){};var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION);}catch(e){return onerror(e)}openRequest.onupgradeneeded=onerror;openRequest.onsuccess=function openRequest_onsuccess(){var db=openRequest.result;try{var transaction=db.transaction([FS.DB_STORE_NAME],"readonly");}catch(e){onerror(e);return}var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror();}paths.forEach(function(path){var getRequest=files.get(path);getRequest.onsuccess=function getRequest_onsuccess(){if(FS.analyzePath(path).exists){FS.unlink(path);}FS.createDataFile(PATH.dirname(path),PATH.basename(path),getRequest.result,true,true,true);ok++;if(ok+fail==total)finish();};getRequest.onerror=function getRequest_onerror(){fail++;if(ok+fail==total)finish();};});transaction.onerror=onerror;};openRequest.onerror=onerror;}};var SYSCALLS={mappings:{},DEFAULT_POLLMASK:5,umask:511,calculateAt:function(dirfd,path){if(path[0]!=="/"){var dir;if(dirfd===-100){dir=FS.cwd();}else {var dirstream=FS.getStream(dirfd);if(!dirstream)throw new FS.ErrnoError(8);dir=dirstream.path;}path=PATH.join2(dir,path);}return path},doStat:function(func,path,buf){try{var stat=func(path);}catch(e){if(e&&e.node&&PATH.normalize(path)!==PATH.normalize(FS.getPath(e.node))){return -54}throw e}HEAP32[buf>>2]=stat.dev;HEAP32[buf+4>>2]=0;HEAP32[buf+8>>2]=stat.ino;HEAP32[buf+12>>2]=stat.mode;HEAP32[buf+16>>2]=stat.nlink;HEAP32[buf+20>>2]=stat.uid;HEAP32[buf+24>>2]=stat.gid;HEAP32[buf+28>>2]=stat.rdev;HEAP32[buf+32>>2]=0;tempI64=[stat.size>>>0,(tempDouble=stat.size,+Math_abs(tempDouble)>=1?tempDouble>0?(Math_min(+Math_floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math_ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+40>>2]=tempI64[0],HEAP32[buf+44>>2]=tempI64[1];HEAP32[buf+48>>2]=4096;HEAP32[buf+52>>2]=stat.blocks;HEAP32[buf+56>>2]=stat.atime.getTime()/1e3|0;HEAP32[buf+60>>2]=0;HEAP32[buf+64>>2]=stat.mtime.getTime()/1e3|0;HEAP32[buf+68>>2]=0;HEAP32[buf+72>>2]=stat.ctime.getTime()/1e3|0;HEAP32[buf+76>>2]=0;tempI64=[stat.ino>>>0,(tempDouble=stat.ino,+Math_abs(tempDouble)>=1?tempDouble>0?(Math_min(+Math_floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math_ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+80>>2]=tempI64[0],HEAP32[buf+84>>2]=tempI64[1];return 0},doMsync:function(addr,stream,len,flags,offset){var buffer=HEAPU8.slice(addr,addr+len);FS.msync(stream,buffer,offset,len,flags);},doMkdir:function(path,mode){path=PATH.normalize(path);if(path[path.length-1]==="/")path=path.substr(0,path.length-1);FS.mkdir(path,mode,0);return 0},doMknod:function(path,mode,dev){switch(mode&61440){case 32768:case 8192:case 24576:case 4096:case 49152:break;default:return -28}FS.mknod(path,mode,dev);return 0},doReadlink:function(path,buf,bufsize){if(bufsize<=0)return -28;var ret=FS.readlink(path);var len=Math.min(bufsize,lengthBytesUTF8(ret));var endChar=HEAP8[buf+len];stringToUTF8(ret,buf,bufsize+1);HEAP8[buf+len]=endChar;return len},doAccess:function(path,amode){if(amode&~7){return -28}var node;var lookup=FS.lookupPath(path,{follow:true});node=lookup.node;if(!node){return -44}var perms="";if(amode&4)perms+="r";if(amode&2)perms+="w";if(amode&1)perms+="x";if(perms&&FS.nodePermissions(node,perms)){return -2}return 0},doDup:function(path,flags,suggestFD){var suggest=FS.getStream(suggestFD);if(suggest)FS.close(suggest);return FS.open(path,flags,0,suggestFD,suggestFD).fd},doReadv:function(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];var curr=FS.read(stream,HEAP8,ptr,len,offset);if(curr<0)return -1;ret+=curr;if(curr<len)break}return ret},doWritev:function(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];var curr=FS.write(stream,HEAP8,ptr,len,offset);if(curr<0)return -1;ret+=curr;}return ret},varargs:undefined,get:function(){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret},getStr:function(ptr){var ret=UTF8ToString(ptr);return ret},getStreamFromFD:function(fd){var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);return stream},get64:function(low,high){return low}};function ___sys_fcntl64(fd,cmd,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(fd);switch(cmd){case 0:{var arg=SYSCALLS.get();if(arg<0){return -28}var newStream;newStream=FS.open(stream.path,stream.flags,0,arg);return newStream.fd}case 1:case 2:return 0;case 3:return stream.flags;case 4:{var arg=SYSCALLS.get();stream.flags|=arg;return 0}case 12:{var arg=SYSCALLS.get();var offset=0;HEAP16[arg+offset>>1]=2;return 0}case 13:case 14:return 0;case 16:case 8:return -28;case 9:setErrNo(28);return -1;default:{return -28}}}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return -e.errno}}function ___sys_fstat64(fd,buf){try{var stream=SYSCALLS.getStreamFromFD(fd);return SYSCALLS.doStat(FS.stat,stream.path,buf)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return -e.errno}}function ___sys_ioctl(fd,op,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(fd);switch(op){case 21509:case 21505:{if(!stream.tty)return -59;return 0}case 21510:case 21511:case 21512:case 21506:case 21507:case 21508:{if(!stream.tty)return -59;return 0}case 21519:{if(!stream.tty)return -59;var argp=SYSCALLS.get();HEAP32[argp>>2]=0;return 0}case 21520:{if(!stream.tty)return -59;return -28}case 21531:{var argp=SYSCALLS.get();return FS.ioctl(stream,op,argp)}case 21523:{if(!stream.tty)return -59;return 0}case 21524:{if(!stream.tty)return -59;return 0}default:abort("bad ioctl syscall "+op);}}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return -e.errno}}function ___sys_madvise1(addr,length,advice){return 0}function syscallMmap2(addr,len,prot,flags,fd,off){off<<=12;var ptr;var allocated=false;if((flags&16)!==0&&addr%16384!==0){return -28}if((flags&32)!==0){ptr=_memalign(16384,len);if(!ptr)return -48;_memset(ptr,0,len);allocated=true;}else {var info=FS.getStream(fd);if(!info)return -8;var res=FS.mmap(info,HEAPU8,addr,len,off,prot,flags);ptr=res.ptr;allocated=res.allocated;}SYSCALLS.mappings[ptr]={malloc:ptr,len:len,allocated:allocated,fd:fd,prot:prot,flags:flags,offset:off};return ptr}function ___sys_mmap2(addr,len,prot,flags,fd,off){try{return syscallMmap2(addr,len,prot,flags,fd,off)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return -e.errno}}function syscallMunmap(addr,len){if((addr|0)===-1||len===0){return -28}var info=SYSCALLS.mappings[addr];if(!info)return 0;if(len===info.len){var stream=FS.getStream(info.fd);if(info.prot&2){SYSCALLS.doMsync(addr,stream,len,info.flags,info.offset);}SYSCALLS.mappings[addr]=null;if(info.allocated){_free(info.malloc);}}return 0}function ___sys_munmap(addr,len){try{return syscallMunmap(addr,len)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return -e.errno}}function ___sys_open(path,flags,varargs){SYSCALLS.varargs=varargs;try{var pathname=SYSCALLS.getStr(path);var mode=SYSCALLS.get();var stream=FS.open(pathname,flags,mode);return stream.fd}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return -e.errno}}function ___sys_stat64(path,buf){try{path=SYSCALLS.getStr(path);return SYSCALLS.doStat(FS.stat,path,buf)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return -e.errno}}function getShiftFromSize(size){switch(size){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+size)}}function embind_init_charCodes(){var codes=new Array(256);for(var i=0;i<256;++i){codes[i]=String.fromCharCode(i);}embind_charCodes=codes;}var embind_charCodes=undefined;function readLatin1String(ptr){var ret="";var c=ptr;while(HEAPU8[c]){ret+=embind_charCodes[HEAPU8[c++]];}return ret}var awaitingDependencies={};var registeredTypes={};var typeDependencies={};var char_0=48;var char_9=57;function makeLegalFunctionName(name){if(undefined===name){return "_unknown"}name=name.replace(/[^a-zA-Z0-9_]/g,"$");var f=name.charCodeAt(0);if(f>=char_0&&f<=char_9){return "_"+name}else {return name}}function createNamedFunction(name,body){name=makeLegalFunctionName(name);return new Function("body","return function "+name+"() {\n"+'    "use strict";'+"    return body.apply(this, arguments);\n"+"};\n")(body)}function extendError(baseErrorType,errorName){var errorClass=createNamedFunction(errorName,function(message){this.name=errorName;this.message=message;var stack=new Error(message).stack;if(stack!==undefined){this.stack=this.toString()+"\n"+stack.replace(/^Error(:[^\n]*)?\n/,"");}});errorClass.prototype=Object.create(baseErrorType.prototype);errorClass.prototype.constructor=errorClass;errorClass.prototype.toString=function(){if(this.message===undefined){return this.name}else {return this.name+": "+this.message}};return errorClass}var BindingError=undefined;function throwBindingError(message){throw new BindingError(message)}var InternalError=undefined;function throwInternalError(message){throw new InternalError(message)}function whenDependentTypesAreResolved(myTypes,dependentTypes,getTypeConverters){myTypes.forEach(function(type){typeDependencies[type]=dependentTypes;});function onComplete(typeConverters){var myTypeConverters=getTypeConverters(typeConverters);if(myTypeConverters.length!==myTypes.length){throwInternalError("Mismatched type converter count");}for(var i=0;i<myTypes.length;++i){registerType(myTypes[i],myTypeConverters[i]);}}var typeConverters=new Array(dependentTypes.length);var unregisteredTypes=[];var registered=0;dependentTypes.forEach(function(dt,i){if(registeredTypes.hasOwnProperty(dt)){typeConverters[i]=registeredTypes[dt];}else {unregisteredTypes.push(dt);if(!awaitingDependencies.hasOwnProperty(dt)){awaitingDependencies[dt]=[];}awaitingDependencies[dt].push(function(){typeConverters[i]=registeredTypes[dt];++registered;if(registered===unregisteredTypes.length){onComplete(typeConverters);}});}});if(0===unregisteredTypes.length){onComplete(typeConverters);}}function registerType(rawType,registeredInstance,options){options=options||{};if(!("argPackAdvance"in registeredInstance)){throw new TypeError("registerType registeredInstance requires argPackAdvance")}var name=registeredInstance.name;if(!rawType){throwBindingError('type "'+name+'" must have a positive integer typeid pointer');}if(registeredTypes.hasOwnProperty(rawType)){if(options.ignoreDuplicateRegistrations){return}else {throwBindingError("Cannot register type '"+name+"' twice");}}registeredTypes[rawType]=registeredInstance;delete typeDependencies[rawType];if(awaitingDependencies.hasOwnProperty(rawType)){var callbacks=awaitingDependencies[rawType];delete awaitingDependencies[rawType];callbacks.forEach(function(cb){cb();});}}function __embind_register_bool(rawType,name,size,trueValue,falseValue){var shift=getShiftFromSize(size);name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":function(wt){return !!wt},"toWireType":function(destructors,o){return o?trueValue:falseValue},"argPackAdvance":8,"readValueFromPointer":function(pointer){var heap;if(size===1){heap=HEAP8;}else if(size===2){heap=HEAP16;}else if(size===4){heap=HEAP32;}else {throw new TypeError("Unknown boolean type size: "+name)}return this["fromWireType"](heap[pointer>>shift])},destructorFunction:null});}function ClassHandle_isAliasOf(other){if(!(this instanceof ClassHandle)){return false}if(!(other instanceof ClassHandle)){return false}var leftClass=this.$$.ptrType.registeredClass;var left=this.$$.ptr;var rightClass=other.$$.ptrType.registeredClass;var right=other.$$.ptr;while(leftClass.baseClass){left=leftClass.upcast(left);leftClass=leftClass.baseClass;}while(rightClass.baseClass){right=rightClass.upcast(right);rightClass=rightClass.baseClass;}return leftClass===rightClass&&left===right}function shallowCopyInternalPointer(o){return {count:o.count,deleteScheduled:o.deleteScheduled,preservePointerOnDelete:o.preservePointerOnDelete,ptr:o.ptr,ptrType:o.ptrType,smartPtr:o.smartPtr,smartPtrType:o.smartPtrType}}function throwInstanceAlreadyDeleted(obj){function getInstanceTypeName(handle){return handle.$$.ptrType.registeredClass.name}throwBindingError(getInstanceTypeName(obj)+" instance already deleted");}var finalizationGroup=false;function detachFinalizer(handle){}function runDestructor($$){if($$.smartPtr){$$.smartPtrType.rawDestructor($$.smartPtr);}else {$$.ptrType.registeredClass.rawDestructor($$.ptr);}}function releaseClassHandle($$){$$.count.value-=1;var toDelete=0===$$.count.value;if(toDelete){runDestructor($$);}}function attachFinalizer(handle){if("undefined"===typeof FinalizationGroup){attachFinalizer=function(handle){return handle};return handle}finalizationGroup=new FinalizationGroup(function(iter){for(var result=iter.next();!result.done;result=iter.next()){var $$=result.value;if(!$$.ptr){console.warn("object already deleted: "+$$.ptr);}else {releaseClassHandle($$);}}});attachFinalizer=function(handle){finalizationGroup.register(handle,handle.$$,handle.$$);return handle};detachFinalizer=function(handle){finalizationGroup.unregister(handle.$$);};return attachFinalizer(handle)}function ClassHandle_clone(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this);}if(this.$$.preservePointerOnDelete){this.$$.count.value+=1;return this}else {var clone=attachFinalizer(Object.create(Object.getPrototypeOf(this),{$$:{value:shallowCopyInternalPointer(this.$$)}}));clone.$$.count.value+=1;clone.$$.deleteScheduled=false;return clone}}function ClassHandle_delete(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this);}if(this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete){throwBindingError("Object already scheduled for deletion");}detachFinalizer(this);releaseClassHandle(this.$$);if(!this.$$.preservePointerOnDelete){this.$$.smartPtr=undefined;this.$$.ptr=undefined;}}function ClassHandle_isDeleted(){return !this.$$.ptr}var delayFunction=undefined;var deletionQueue=[];function flushPendingDeletes(){while(deletionQueue.length){var obj=deletionQueue.pop();obj.$$.deleteScheduled=false;obj["delete"]();}}function ClassHandle_deleteLater(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this);}if(this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete){throwBindingError("Object already scheduled for deletion");}deletionQueue.push(this);if(deletionQueue.length===1&&delayFunction){delayFunction(flushPendingDeletes);}this.$$.deleteScheduled=true;return this}function init_ClassHandle(){ClassHandle.prototype["isAliasOf"]=ClassHandle_isAliasOf;ClassHandle.prototype["clone"]=ClassHandle_clone;ClassHandle.prototype["delete"]=ClassHandle_delete;ClassHandle.prototype["isDeleted"]=ClassHandle_isDeleted;ClassHandle.prototype["deleteLater"]=ClassHandle_deleteLater;}function ClassHandle(){}var registeredPointers={};function ensureOverloadTable(proto,methodName,humanName){if(undefined===proto[methodName].overloadTable){var prevFunc=proto[methodName];proto[methodName]=function(){if(!proto[methodName].overloadTable.hasOwnProperty(arguments.length)){throwBindingError("Function '"+humanName+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+proto[methodName].overloadTable+")!");}return proto[methodName].overloadTable[arguments.length].apply(this,arguments)};proto[methodName].overloadTable=[];proto[methodName].overloadTable[prevFunc.argCount]=prevFunc;}}function exposePublicSymbol(name,value,numArguments){if(Module.hasOwnProperty(name)){if(undefined===numArguments||undefined!==Module[name].overloadTable&&undefined!==Module[name].overloadTable[numArguments]){throwBindingError("Cannot register public name '"+name+"' twice");}ensureOverloadTable(Module,name,name);if(Module.hasOwnProperty(numArguments)){throwBindingError("Cannot register multiple overloads of a function with the same number of arguments ("+numArguments+")!");}Module[name].overloadTable[numArguments]=value;}else {Module[name]=value;if(undefined!==numArguments){Module[name].numArguments=numArguments;}}}function RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast){this.name=name;this.constructor=constructor;this.instancePrototype=instancePrototype;this.rawDestructor=rawDestructor;this.baseClass=baseClass;this.getActualType=getActualType;this.upcast=upcast;this.downcast=downcast;this.pureVirtualFunctions=[];}function upcastPointer(ptr,ptrClass,desiredClass){while(ptrClass!==desiredClass){if(!ptrClass.upcast){throwBindingError("Expected null or instance of "+desiredClass.name+", got an instance of "+ptrClass.name);}ptr=ptrClass.upcast(ptr);ptrClass=ptrClass.baseClass;}return ptr}function constNoSmartPtrRawPointerToWireType(destructors,handle){if(handle===null){if(this.isReference){throwBindingError("null is not a valid "+this.name);}return 0}if(!handle.$$){throwBindingError('Cannot pass "'+_embind_repr(handle)+'" as a '+this.name);}if(!handle.$$.ptr){throwBindingError("Cannot pass deleted object as a pointer of type "+this.name);}var handleClass=handle.$$.ptrType.registeredClass;var ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);return ptr}function genericPointerToWireType(destructors,handle){var ptr;if(handle===null){if(this.isReference){throwBindingError("null is not a valid "+this.name);}if(this.isSmartPointer){ptr=this.rawConstructor();if(destructors!==null){destructors.push(this.rawDestructor,ptr);}return ptr}else {return 0}}if(!handle.$$){throwBindingError('Cannot pass "'+_embind_repr(handle)+'" as a '+this.name);}if(!handle.$$.ptr){throwBindingError("Cannot pass deleted object as a pointer of type "+this.name);}if(!this.isConst&&handle.$$.ptrType.isConst){throwBindingError("Cannot convert argument of type "+(handle.$$.smartPtrType?handle.$$.smartPtrType.name:handle.$$.ptrType.name)+" to parameter type "+this.name);}var handleClass=handle.$$.ptrType.registeredClass;ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);if(this.isSmartPointer){if(undefined===handle.$$.smartPtr){throwBindingError("Passing raw pointer to smart pointer is illegal");}switch(this.sharingPolicy){case 0:if(handle.$$.smartPtrType===this){ptr=handle.$$.smartPtr;}else {throwBindingError("Cannot convert argument of type "+(handle.$$.smartPtrType?handle.$$.smartPtrType.name:handle.$$.ptrType.name)+" to parameter type "+this.name);}break;case 1:ptr=handle.$$.smartPtr;break;case 2:if(handle.$$.smartPtrType===this){ptr=handle.$$.smartPtr;}else {var clonedHandle=handle["clone"]();ptr=this.rawShare(ptr,__emval_register(function(){clonedHandle["delete"]();}));if(destructors!==null){destructors.push(this.rawDestructor,ptr);}}break;default:throwBindingError("Unsupporting sharing policy");}}return ptr}function nonConstNoSmartPtrRawPointerToWireType(destructors,handle){if(handle===null){if(this.isReference){throwBindingError("null is not a valid "+this.name);}return 0}if(!handle.$$){throwBindingError('Cannot pass "'+_embind_repr(handle)+'" as a '+this.name);}if(!handle.$$.ptr){throwBindingError("Cannot pass deleted object as a pointer of type "+this.name);}if(handle.$$.ptrType.isConst){throwBindingError("Cannot convert argument of type "+handle.$$.ptrType.name+" to parameter type "+this.name);}var handleClass=handle.$$.ptrType.registeredClass;var ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);return ptr}function simpleReadValueFromPointer(pointer){return this["fromWireType"](HEAPU32[pointer>>2])}function RegisteredPointer_getPointee(ptr){if(this.rawGetPointee){ptr=this.rawGetPointee(ptr);}return ptr}function RegisteredPointer_destructor(ptr){if(this.rawDestructor){this.rawDestructor(ptr);}}function RegisteredPointer_deleteObject(handle){if(handle!==null){handle["delete"]();}}function downcastPointer(ptr,ptrClass,desiredClass){if(ptrClass===desiredClass){return ptr}if(undefined===desiredClass.baseClass){return null}var rv=downcastPointer(ptr,ptrClass,desiredClass.baseClass);if(rv===null){return null}return desiredClass.downcast(rv)}function getInheritedInstanceCount(){return Object.keys(registeredInstances).length}function getLiveInheritedInstances(){var rv=[];for(var k in registeredInstances){if(registeredInstances.hasOwnProperty(k)){rv.push(registeredInstances[k]);}}return rv}function setDelayFunction(fn){delayFunction=fn;if(deletionQueue.length&&delayFunction){delayFunction(flushPendingDeletes);}}function init_embind(){Module["getInheritedInstanceCount"]=getInheritedInstanceCount;Module["getLiveInheritedInstances"]=getLiveInheritedInstances;Module["flushPendingDeletes"]=flushPendingDeletes;Module["setDelayFunction"]=setDelayFunction;}var registeredInstances={};function getBasestPointer(class_,ptr){if(ptr===undefined){throwBindingError("ptr should not be undefined");}while(class_.baseClass){ptr=class_.upcast(ptr);class_=class_.baseClass;}return ptr}function getInheritedInstance(class_,ptr){ptr=getBasestPointer(class_,ptr);return registeredInstances[ptr]}function makeClassHandle(prototype,record){if(!record.ptrType||!record.ptr){throwInternalError("makeClassHandle requires ptr and ptrType");}var hasSmartPtrType=!!record.smartPtrType;var hasSmartPtr=!!record.smartPtr;if(hasSmartPtrType!==hasSmartPtr){throwInternalError("Both smartPtrType and smartPtr must be specified");}record.count={value:1};return attachFinalizer(Object.create(prototype,{$$:{value:record}}))}function RegisteredPointer_fromWireType(ptr){var rawPointer=this.getPointee(ptr);if(!rawPointer){this.destructor(ptr);return null}var registeredInstance=getInheritedInstance(this.registeredClass,rawPointer);if(undefined!==registeredInstance){if(0===registeredInstance.$$.count.value){registeredInstance.$$.ptr=rawPointer;registeredInstance.$$.smartPtr=ptr;return registeredInstance["clone"]()}else {var rv=registeredInstance["clone"]();this.destructor(ptr);return rv}}function makeDefaultHandle(){if(this.isSmartPointer){return makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:rawPointer,smartPtrType:this,smartPtr:ptr})}else {return makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this,ptr:ptr})}}var actualType=this.registeredClass.getActualType(rawPointer);var registeredPointerRecord=registeredPointers[actualType];if(!registeredPointerRecord){return makeDefaultHandle.call(this)}var toType;if(this.isConst){toType=registeredPointerRecord.constPointerType;}else {toType=registeredPointerRecord.pointerType;}var dp=downcastPointer(rawPointer,this.registeredClass,toType.registeredClass);if(dp===null){return makeDefaultHandle.call(this)}if(this.isSmartPointer){return makeClassHandle(toType.registeredClass.instancePrototype,{ptrType:toType,ptr:dp,smartPtrType:this,smartPtr:ptr})}else {return makeClassHandle(toType.registeredClass.instancePrototype,{ptrType:toType,ptr:dp})}}function init_RegisteredPointer(){RegisteredPointer.prototype.getPointee=RegisteredPointer_getPointee;RegisteredPointer.prototype.destructor=RegisteredPointer_destructor;RegisteredPointer.prototype["argPackAdvance"]=8;RegisteredPointer.prototype["readValueFromPointer"]=simpleReadValueFromPointer;RegisteredPointer.prototype["deleteObject"]=RegisteredPointer_deleteObject;RegisteredPointer.prototype["fromWireType"]=RegisteredPointer_fromWireType;}function RegisteredPointer(name,registeredClass,isReference,isConst,isSmartPointer,pointeeType,sharingPolicy,rawGetPointee,rawConstructor,rawShare,rawDestructor){this.name=name;this.registeredClass=registeredClass;this.isReference=isReference;this.isConst=isConst;this.isSmartPointer=isSmartPointer;this.pointeeType=pointeeType;this.sharingPolicy=sharingPolicy;this.rawGetPointee=rawGetPointee;this.rawConstructor=rawConstructor;this.rawShare=rawShare;this.rawDestructor=rawDestructor;if(!isSmartPointer&&registeredClass.baseClass===undefined){if(isConst){this["toWireType"]=constNoSmartPtrRawPointerToWireType;this.destructorFunction=null;}else {this["toWireType"]=nonConstNoSmartPtrRawPointerToWireType;this.destructorFunction=null;}}else {this["toWireType"]=genericPointerToWireType;}}function replacePublicSymbol(name,value,numArguments){if(!Module.hasOwnProperty(name)){throwInternalError("Replacing nonexistant public symbol");}if(undefined!==Module[name].overloadTable&&undefined!==numArguments){Module[name].overloadTable[numArguments]=value;}else {Module[name]=value;Module[name].argCount=numArguments;}}function embind__requireFunction(signature,rawFunction){signature=readLatin1String(signature);function makeDynCaller(dynCall){var args=[];for(var i=1;i<signature.length;++i){args.push("a"+i);}var name="dynCall_"+signature+"_"+rawFunction;var body="return function "+name+"("+args.join(", ")+") {\n";body+="    return dynCall(rawFunction"+(args.length?", ":"")+args.join(", ")+");\n";body+="};\n";return new Function("dynCall","rawFunction",body)(dynCall,rawFunction)}var dc=Module["dynCall_"+signature];var fp=makeDynCaller(dc);if(typeof fp!=="function"){throwBindingError("unknown function pointer with signature "+signature+": "+rawFunction);}return fp}var UnboundTypeError=undefined;function getTypeName(type){var ptr=___getTypeName(type);var rv=readLatin1String(ptr);_free(ptr);return rv}function throwUnboundTypeError(message,types){var unboundTypes=[];var seen={};function visit(type){if(seen[type]){return}if(registeredTypes[type]){return}if(typeDependencies[type]){typeDependencies[type].forEach(visit);return}unboundTypes.push(type);seen[type]=true;}types.forEach(visit);throw new UnboundTypeError(message+": "+unboundTypes.map(getTypeName).join([", "]))}function __embind_register_class(rawType,rawPointerType,rawConstPointerType,baseClassRawType,getActualTypeSignature,getActualType,upcastSignature,upcast,downcastSignature,downcast,name,destructorSignature,rawDestructor){name=readLatin1String(name);getActualType=embind__requireFunction(getActualTypeSignature,getActualType);if(upcast){upcast=embind__requireFunction(upcastSignature,upcast);}if(downcast){downcast=embind__requireFunction(downcastSignature,downcast);}rawDestructor=embind__requireFunction(destructorSignature,rawDestructor);var legalFunctionName=makeLegalFunctionName(name);exposePublicSymbol(legalFunctionName,function(){throwUnboundTypeError("Cannot construct "+name+" due to unbound types",[baseClassRawType]);});whenDependentTypesAreResolved([rawType,rawPointerType,rawConstPointerType],baseClassRawType?[baseClassRawType]:[],function(base){base=base[0];var baseClass;var basePrototype;if(baseClassRawType){baseClass=base.registeredClass;basePrototype=baseClass.instancePrototype;}else {basePrototype=ClassHandle.prototype;}var constructor=createNamedFunction(legalFunctionName,function(){if(Object.getPrototypeOf(this)!==instancePrototype){throw new BindingError("Use 'new' to construct "+name)}if(undefined===registeredClass.constructor_body){throw new BindingError(name+" has no accessible constructor")}var body=registeredClass.constructor_body[arguments.length];if(undefined===body){throw new BindingError("Tried to invoke ctor of "+name+" with invalid number of parameters ("+arguments.length+") - expected ("+Object.keys(registeredClass.constructor_body).toString()+") parameters instead!")}return body.apply(this,arguments)});var instancePrototype=Object.create(basePrototype,{constructor:{value:constructor}});constructor.prototype=instancePrototype;var registeredClass=new RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast);var referenceConverter=new RegisteredPointer(name,registeredClass,true,false,false);var pointerConverter=new RegisteredPointer(name+"*",registeredClass,false,false,false);var constPointerConverter=new RegisteredPointer(name+" const*",registeredClass,false,true,false);registeredPointers[rawType]={pointerType:pointerConverter,constPointerType:constPointerConverter};replacePublicSymbol(legalFunctionName,constructor);return [referenceConverter,pointerConverter,constPointerConverter]});}function heap32VectorToArray(count,firstElement){var array=[];for(var i=0;i<count;i++){array.push(HEAP32[(firstElement>>2)+i]);}return array}function runDestructors(destructors){while(destructors.length){var ptr=destructors.pop();var del=destructors.pop();del(ptr);}}function __embind_register_class_constructor(rawClassType,argCount,rawArgTypesAddr,invokerSignature,invoker,rawConstructor){assert(argCount>0);var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr);invoker=embind__requireFunction(invokerSignature,invoker);var args=[rawConstructor];var destructors=[];whenDependentTypesAreResolved([],[rawClassType],function(classType){classType=classType[0];var humanName="constructor "+classType.name;if(undefined===classType.registeredClass.constructor_body){classType.registeredClass.constructor_body=[];}if(undefined!==classType.registeredClass.constructor_body[argCount-1]){throw new BindingError("Cannot register multiple constructors with identical number of parameters ("+(argCount-1)+") for class '"+classType.name+"'! Overload resolution is currently only performed using the parameter count, not actual type info!")}classType.registeredClass.constructor_body[argCount-1]=function unboundTypeHandler(){throwUnboundTypeError("Cannot construct "+classType.name+" due to unbound types",rawArgTypes);};whenDependentTypesAreResolved([],rawArgTypes,function(argTypes){classType.registeredClass.constructor_body[argCount-1]=function constructor_body(){if(arguments.length!==argCount-1){throwBindingError(humanName+" called with "+arguments.length+" arguments, expected "+(argCount-1));}destructors.length=0;args.length=argCount;for(var i=1;i<argCount;++i){args[i]=argTypes[i]["toWireType"](destructors,arguments[i-1]);}var ptr=invoker.apply(null,args);runDestructors(destructors);return argTypes[0]["fromWireType"](ptr)};return []});return []});}function new_(constructor,argumentList){if(!(constructor instanceof Function)){throw new TypeError("new_ called with constructor type "+typeof constructor+" which is not a function")}var dummy=createNamedFunction(constructor.name||"unknownFunctionName",function(){});dummy.prototype=constructor.prototype;var obj=new dummy;var r=constructor.apply(obj,argumentList);return r instanceof Object?r:obj}function craftInvokerFunction(humanName,argTypes,classType,cppInvokerFunc,cppTargetFunc){var argCount=argTypes.length;if(argCount<2){throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");}var isClassMethodFunc=argTypes[1]!==null&&classType!==null;var needsDestructorStack=false;for(var i=1;i<argTypes.length;++i){if(argTypes[i]!==null&&argTypes[i].destructorFunction===undefined){needsDestructorStack=true;break}}var returns=argTypes[0].name!=="void";var argsList="";var argsListWired="";for(var i=0;i<argCount-2;++i){argsList+=(i!==0?", ":"")+"arg"+i;argsListWired+=(i!==0?", ":"")+"arg"+i+"Wired";}var invokerFnBody="return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n"+"if (arguments.length !== "+(argCount-2)+") {\n"+"throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount-2)+" args!');\n"+"}\n";if(needsDestructorStack){invokerFnBody+="var destructors = [];\n";}var dtorStack=needsDestructorStack?"destructors":"null";var args1=["throwBindingError","invoker","fn","runDestructors","retType","classParam"];var args2=[throwBindingError,cppInvokerFunc,cppTargetFunc,runDestructors,argTypes[0],argTypes[1]];if(isClassMethodFunc){invokerFnBody+="var thisWired = classParam.toWireType("+dtorStack+", this);\n";}for(var i=0;i<argCount-2;++i){invokerFnBody+="var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";args1.push("argType"+i);args2.push(argTypes[i+2]);}if(isClassMethodFunc){argsListWired="thisWired"+(argsListWired.length>0?", ":"")+argsListWired;}invokerFnBody+=(returns?"var rv = ":"")+"invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";if(needsDestructorStack){invokerFnBody+="runDestructors(destructors);\n";}else {for(var i=isClassMethodFunc?1:2;i<argTypes.length;++i){var paramName=i===1?"thisWired":"arg"+(i-2)+"Wired";if(argTypes[i].destructorFunction!==null){invokerFnBody+=paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";args1.push(paramName+"_dtor");args2.push(argTypes[i].destructorFunction);}}}if(returns){invokerFnBody+="var ret = retType.fromWireType(rv);\n"+"return ret;\n";}invokerFnBody+="}\n";args1.push(invokerFnBody);var invokerFunction=new_(Function,args1).apply(null,args2);return invokerFunction}function __embind_register_class_function(rawClassType,methodName,argCount,rawArgTypesAddr,invokerSignature,rawInvoker,context,isPureVirtual){var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr);methodName=readLatin1String(methodName);rawInvoker=embind__requireFunction(invokerSignature,rawInvoker);whenDependentTypesAreResolved([],[rawClassType],function(classType){classType=classType[0];var humanName=classType.name+"."+methodName;if(isPureVirtual){classType.registeredClass.pureVirtualFunctions.push(methodName);}function unboundTypesHandler(){throwUnboundTypeError("Cannot call "+humanName+" due to unbound types",rawArgTypes);}var proto=classType.registeredClass.instancePrototype;var method=proto[methodName];if(undefined===method||undefined===method.overloadTable&&method.className!==classType.name&&method.argCount===argCount-2){unboundTypesHandler.argCount=argCount-2;unboundTypesHandler.className=classType.name;proto[methodName]=unboundTypesHandler;}else {ensureOverloadTable(proto,methodName,humanName);proto[methodName].overloadTable[argCount-2]=unboundTypesHandler;}whenDependentTypesAreResolved([],rawArgTypes,function(argTypes){var memberFunction=craftInvokerFunction(humanName,argTypes,classType,rawInvoker,context);if(undefined===proto[methodName].overloadTable){memberFunction.argCount=argCount-2;proto[methodName]=memberFunction;}else {proto[methodName].overloadTable[argCount-2]=memberFunction;}return []});return []});}var emval_free_list=[];var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle){if(handle>4&&0===--emval_handle_array[handle].refcount){emval_handle_array[handle]=undefined;emval_free_list.push(handle);}}function count_emval_handles(){var count=0;for(var i=5;i<emval_handle_array.length;++i){if(emval_handle_array[i]!==undefined){++count;}}return count}function get_first_emval(){for(var i=5;i<emval_handle_array.length;++i){if(emval_handle_array[i]!==undefined){return emval_handle_array[i]}}return null}function init_emval(){Module["count_emval_handles"]=count_emval_handles;Module["get_first_emval"]=get_first_emval;}function __emval_register(value){switch(value){case undefined:{return 1}case null:{return 2}case true:{return 3}case false:{return 4}default:{var handle=emval_free_list.length?emval_free_list.pop():emval_handle_array.length;emval_handle_array[handle]={refcount:1,value:value};return handle}}}function __embind_register_emval(rawType,name){name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":function(handle){var rv=emval_handle_array[handle].value;__emval_decref(handle);return rv},"toWireType":function(destructors,value){return __emval_register(value)},"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:null});}function enumReadValueFromPointer(name,shift,signed){switch(shift){case 0:return function(pointer){var heap=signed?HEAP8:HEAPU8;return this["fromWireType"](heap[pointer])};case 1:return function(pointer){var heap=signed?HEAP16:HEAPU16;return this["fromWireType"](heap[pointer>>1])};case 2:return function(pointer){var heap=signed?HEAP32:HEAPU32;return this["fromWireType"](heap[pointer>>2])};default:throw new TypeError("Unknown integer type: "+name)}}function __embind_register_enum(rawType,name,size,isSigned){var shift=getShiftFromSize(size);name=readLatin1String(name);function ctor(){}ctor.values={};registerType(rawType,{name:name,constructor:ctor,"fromWireType":function(c){return this.constructor.values[c]},"toWireType":function(destructors,c){return c.value},"argPackAdvance":8,"readValueFromPointer":enumReadValueFromPointer(name,shift,isSigned),destructorFunction:null});exposePublicSymbol(name,ctor);}function requireRegisteredType(rawType,humanName){var impl=registeredTypes[rawType];if(undefined===impl){throwBindingError(humanName+" has unknown type "+getTypeName(rawType));}return impl}function __embind_register_enum_value(rawEnumType,name,enumValue){var enumType=requireRegisteredType(rawEnumType,"enum");name=readLatin1String(name);var Enum=enumType.constructor;var Value=Object.create(enumType.constructor.prototype,{value:{value:enumValue},constructor:{value:createNamedFunction(enumType.name+"_"+name,function(){})}});Enum.values[enumValue]=Value;Enum[name]=Value;}function _embind_repr(v){if(v===null){return "null"}var t=typeof v;if(t==="object"||t==="array"||t==="function"){return v.toString()}else {return ""+v}}function floatReadValueFromPointer(name,shift){switch(shift){case 2:return function(pointer){return this["fromWireType"](HEAPF32[pointer>>2])};case 3:return function(pointer){return this["fromWireType"](HEAPF64[pointer>>3])};default:throw new TypeError("Unknown float type: "+name)}}function __embind_register_float(rawType,name,size){var shift=getShiftFromSize(size);name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":function(value){return value},"toWireType":function(destructors,value){if(typeof value!=="number"&&typeof value!=="boolean"){throw new TypeError('Cannot convert "'+_embind_repr(value)+'" to '+this.name)}return value},"argPackAdvance":8,"readValueFromPointer":floatReadValueFromPointer(name,shift),destructorFunction:null});}function __embind_register_function(name,argCount,rawArgTypesAddr,signature,rawInvoker,fn){var argTypes=heap32VectorToArray(argCount,rawArgTypesAddr);name=readLatin1String(name);rawInvoker=embind__requireFunction(signature,rawInvoker);exposePublicSymbol(name,function(){throwUnboundTypeError("Cannot call "+name+" due to unbound types",argTypes);},argCount-1);whenDependentTypesAreResolved([],argTypes,function(argTypes){var invokerArgsArray=[argTypes[0],null].concat(argTypes.slice(1));replacePublicSymbol(name,craftInvokerFunction(name,invokerArgsArray,null,rawInvoker,fn),argCount-1);return []});}function integerReadValueFromPointer(name,shift,signed){switch(shift){case 0:return signed?function readS8FromPointer(pointer){return HEAP8[pointer]}:function readU8FromPointer(pointer){return HEAPU8[pointer]};case 1:return signed?function readS16FromPointer(pointer){return HEAP16[pointer>>1]}:function readU16FromPointer(pointer){return HEAPU16[pointer>>1]};case 2:return signed?function readS32FromPointer(pointer){return HEAP32[pointer>>2]}:function readU32FromPointer(pointer){return HEAPU32[pointer>>2]};default:throw new TypeError("Unknown integer type: "+name)}}function __embind_register_integer(primitiveType,name,size,minRange,maxRange){name=readLatin1String(name);if(maxRange===-1){maxRange=4294967295;}var shift=getShiftFromSize(size);var fromWireType=function(value){return value};if(minRange===0){var bitshift=32-8*size;fromWireType=function(value){return value<<bitshift>>>bitshift};}var isUnsignedType=name.indexOf("unsigned")!=-1;registerType(primitiveType,{name:name,"fromWireType":fromWireType,"toWireType":function(destructors,value){if(typeof value!=="number"&&typeof value!=="boolean"){throw new TypeError('Cannot convert "'+_embind_repr(value)+'" to '+this.name)}if(value<minRange||value>maxRange){throw new TypeError('Passing a number "'+_embind_repr(value)+'" from JS side to C/C++ side to an argument of type "'+name+'", which is outside the valid range ['+minRange+", "+maxRange+"]!")}return isUnsignedType?value>>>0:value|0},"argPackAdvance":8,"readValueFromPointer":integerReadValueFromPointer(name,shift,minRange!==0),destructorFunction:null});}function __embind_register_memory_view(rawType,dataTypeIndex,name){var typeMapping=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array];var TA=typeMapping[dataTypeIndex];function decodeMemoryView(handle){handle=handle>>2;var heap=HEAPU32;var size=heap[handle];var data=heap[handle+1];return new TA(buffer,data,size)}name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":decodeMemoryView,"argPackAdvance":8,"readValueFromPointer":decodeMemoryView},{ignoreDuplicateRegistrations:true});}function __embind_register_std_string(rawType,name){name=readLatin1String(name);var stdStringIsUTF8=name==="std::string";registerType(rawType,{name:name,"fromWireType":function(value){var length=HEAPU32[value>>2];var str;if(stdStringIsUTF8){var decodeStartPtr=value+4;for(var i=0;i<=length;++i){var currentBytePtr=value+4+i;if(HEAPU8[currentBytePtr]==0||i==length){var maxRead=currentBytePtr-decodeStartPtr;var stringSegment=UTF8ToString(decodeStartPtr,maxRead);if(str===undefined){str=stringSegment;}else {str+=String.fromCharCode(0);str+=stringSegment;}decodeStartPtr=currentBytePtr+1;}}}else {var a=new Array(length);for(var i=0;i<length;++i){a[i]=String.fromCharCode(HEAPU8[value+4+i]);}str=a.join("");}_free(value);return str},"toWireType":function(destructors,value){if(value instanceof ArrayBuffer){value=new Uint8Array(value);}var getLength;var valueIsOfTypeString=typeof value==="string";if(!(valueIsOfTypeString||value instanceof Uint8Array||value instanceof Uint8ClampedArray||value instanceof Int8Array)){throwBindingError("Cannot pass non-string to std::string");}if(stdStringIsUTF8&&valueIsOfTypeString){getLength=function(){return lengthBytesUTF8(value)};}else {getLength=function(){return value.length};}var length=getLength();var ptr=_malloc(4+length+1);HEAPU32[ptr>>2]=length;if(stdStringIsUTF8&&valueIsOfTypeString){stringToUTF8(value,ptr+4,length+1);}else {if(valueIsOfTypeString){for(var i=0;i<length;++i){var charCode=value.charCodeAt(i);if(charCode>255){_free(ptr);throwBindingError("String has UTF-16 code units that do not fit in 8 bits");}HEAPU8[ptr+4+i]=charCode;}}else {for(var i=0;i<length;++i){HEAPU8[ptr+4+i]=value[i];}}}if(destructors!==null){destructors.push(_free,ptr);}return ptr},"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr);}});}function __embind_register_std_wstring(rawType,charSize,name){name=readLatin1String(name);var decodeString,encodeString,getHeap,lengthBytesUTF,shift;if(charSize===2){decodeString=UTF16ToString;encodeString=stringToUTF16;lengthBytesUTF=lengthBytesUTF16;getHeap=function(){return HEAPU16};shift=1;}else if(charSize===4){decodeString=UTF32ToString;encodeString=stringToUTF32;lengthBytesUTF=lengthBytesUTF32;getHeap=function(){return HEAPU32};shift=2;}registerType(rawType,{name:name,"fromWireType":function(value){var length=HEAPU32[value>>2];var HEAP=getHeap();var str;var decodeStartPtr=value+4;for(var i=0;i<=length;++i){var currentBytePtr=value+4+i*charSize;if(HEAP[currentBytePtr>>shift]==0||i==length){var maxReadBytes=currentBytePtr-decodeStartPtr;var stringSegment=decodeString(decodeStartPtr,maxReadBytes);if(str===undefined){str=stringSegment;}else {str+=String.fromCharCode(0);str+=stringSegment;}decodeStartPtr=currentBytePtr+charSize;}}_free(value);return str},"toWireType":function(destructors,value){if(!(typeof value==="string")){throwBindingError("Cannot pass non-string to C++ string type "+name);}var length=lengthBytesUTF(value);var ptr=_malloc(4+length+charSize);HEAPU32[ptr>>2]=length>>shift;encodeString(value,ptr+4,length+charSize);if(destructors!==null){destructors.push(_free,ptr);}return ptr},"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr);}});}function __embind_register_void(rawType,name){name=readLatin1String(name);registerType(rawType,{isVoid:true,name:name,"argPackAdvance":0,"fromWireType":function(){return undefined},"toWireType":function(destructors,o){return undefined}});}function _abort(){abort();}var _emscripten_get_now;_emscripten_get_now=function(){return performance.now()};var _emscripten_get_now_is_monotonic=true;function _clock_gettime(clk_id,tp){var now;if(clk_id===0){now=Date.now();}else if((clk_id===1||clk_id===4)&&_emscripten_get_now_is_monotonic){now=_emscripten_get_now();}else {setErrNo(28);return -1}HEAP32[tp>>2]=now/1e3|0;HEAP32[tp+4>>2]=now%1e3*1e3*1e3|0;return 0}function _emscripten_memcpy_big(dest,src,num){HEAPU8.copyWithin(dest,src,src+num);}function _emscripten_get_heap_size(){return HEAPU8.length}function emscripten_realloc_buffer(size){try{wasmMemory.grow(size-buffer.byteLength+65535>>>16);updateGlobalBufferAndViews(wasmMemory.buffer);return 1}catch(e){}}function _emscripten_resize_heap(requestedSize){requestedSize=requestedSize>>>0;var oldSize=_emscripten_get_heap_size();var PAGE_MULTIPLE=65536;var maxHeapSize=1073741824;if(requestedSize>maxHeapSize){return false}var minHeapSize=16777216;for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(minHeapSize,requestedSize,overGrownHeapSize),PAGE_MULTIPLE));var replacement=emscripten_realloc_buffer(newSize);if(replacement){return true}}return false}var ENV={};function __getExecutableName(){return thisProgram||"./this.program"}function getEnvStrings(){if(!getEnvStrings.strings){var env={"USER":"web_user","LOGNAME":"web_user","PATH":"/","PWD":"/","HOME":"/home/web_user","LANG":(typeof navigator==="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8","_":__getExecutableName()};for(var x in ENV){env[x]=ENV[x];}var strings=[];for(var x in env){strings.push(x+"="+env[x]);}getEnvStrings.strings=strings;}return getEnvStrings.strings}function _environ_get(__environ,environ_buf){var bufSize=0;getEnvStrings().forEach(function(string,i){var ptr=environ_buf+bufSize;HEAP32[__environ+i*4>>2]=ptr;writeAsciiToMemory(string,ptr);bufSize+=string.length+1;});return 0}function _environ_sizes_get(penviron_count,penviron_buf_size){var strings=getEnvStrings();HEAP32[penviron_count>>2]=strings.length;var bufSize=0;strings.forEach(function(string){bufSize+=string.length+1;});HEAP32[penviron_buf_size>>2]=bufSize;return 0}function _exit(status){exit(status);}function _fd_close(fd){try{var stream=SYSCALLS.getStreamFromFD(fd);FS.close(stream);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _fd_fdstat_get(fd,pbuf){try{var stream=SYSCALLS.getStreamFromFD(fd);var type=stream.tty?2:FS.isDir(stream.mode)?3:FS.isLink(stream.mode)?7:4;HEAP8[pbuf>>0]=type;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _fd_read(fd,iov,iovcnt,pnum){try{var stream=SYSCALLS.getStreamFromFD(fd);var num=SYSCALLS.doReadv(stream,iov,iovcnt);HEAP32[pnum>>2]=num;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _fd_seek(fd,offset_low,offset_high,whence,newOffset){try{var stream=SYSCALLS.getStreamFromFD(fd);var HIGH_OFFSET=4294967296;var offset=offset_high*HIGH_OFFSET+(offset_low>>>0);var DOUBLE_LIMIT=9007199254740992;if(offset<=-DOUBLE_LIMIT||offset>=DOUBLE_LIMIT){return -61}FS.llseek(stream,offset,whence);tempI64=[stream.position>>>0,(tempDouble=stream.position,+Math_abs(tempDouble)>=1?tempDouble>0?(Math_min(+Math_floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math_ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[newOffset>>2]=tempI64[0],HEAP32[newOffset+4>>2]=tempI64[1];if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _fd_write(fd,iov,iovcnt,pnum){try{var stream=SYSCALLS.getStreamFromFD(fd);var num=SYSCALLS.doWritev(stream,iov,iovcnt);HEAP32[pnum>>2]=num;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _pthread_create(){return 6}function _pthread_detach(){}function _pthread_join(){}function _setTempRet0($i){}function __isLeapYear(year){return year%4===0&&(year%100!==0||year%400===0)}function __arraySum(array,index){var sum=0;for(var i=0;i<=index;sum+=array[i++]){}return sum}var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date,days){var newDate=new Date(date.getTime());while(days>0){var leap=__isLeapYear(newDate.getFullYear());var currentMonth=newDate.getMonth();var daysInCurrentMonth=(leap?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR)[currentMonth];if(days>daysInCurrentMonth-newDate.getDate()){days-=daysInCurrentMonth-newDate.getDate()+1;newDate.setDate(1);if(currentMonth<11){newDate.setMonth(currentMonth+1);}else {newDate.setMonth(0);newDate.setFullYear(newDate.getFullYear()+1);}}else {newDate.setDate(newDate.getDate()+days);return newDate}}return newDate}function _strftime(s,maxsize,format,tm){var tm_zone=HEAP32[tm+40>>2];var date={tm_sec:HEAP32[tm>>2],tm_min:HEAP32[tm+4>>2],tm_hour:HEAP32[tm+8>>2],tm_mday:HEAP32[tm+12>>2],tm_mon:HEAP32[tm+16>>2],tm_year:HEAP32[tm+20>>2],tm_wday:HEAP32[tm+24>>2],tm_yday:HEAP32[tm+28>>2],tm_isdst:HEAP32[tm+32>>2],tm_gmtoff:HEAP32[tm+36>>2],tm_zone:tm_zone?UTF8ToString(tm_zone):""};var pattern=UTF8ToString(format);var EXPANSION_RULES_1={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var rule in EXPANSION_RULES_1){pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_1[rule]);}var WEEKDAYS=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];var MONTHS=["January","February","March","April","May","June","July","August","September","October","November","December"];function leadingSomething(value,digits,character){var str=typeof value==="number"?value.toString():value||"";while(str.length<digits){str=character[0]+str;}return str}function leadingNulls(value,digits){return leadingSomething(value,digits,"0")}function compareByDay(date1,date2){function sgn(value){return value<0?-1:value>0?1:0}var compare;if((compare=sgn(date1.getFullYear()-date2.getFullYear()))===0){if((compare=sgn(date1.getMonth()-date2.getMonth()))===0){compare=sgn(date1.getDate()-date2.getDate());}}return compare}function getFirstWeekStartDate(janFourth){switch(janFourth.getDay()){case 0:return new Date(janFourth.getFullYear()-1,11,29);case 1:return janFourth;case 2:return new Date(janFourth.getFullYear(),0,3);case 3:return new Date(janFourth.getFullYear(),0,2);case 4:return new Date(janFourth.getFullYear(),0,1);case 5:return new Date(janFourth.getFullYear()-1,11,31);case 6:return new Date(janFourth.getFullYear()-1,11,30)}}function getWeekBasedYear(date){var thisDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);var janFourthThisYear=new Date(thisDate.getFullYear(),0,4);var janFourthNextYear=new Date(thisDate.getFullYear()+1,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);if(compareByDay(firstWeekStartThisYear,thisDate)<=0){if(compareByDay(firstWeekStartNextYear,thisDate)<=0){return thisDate.getFullYear()+1}else {return thisDate.getFullYear()}}else {return thisDate.getFullYear()-1}}var EXPANSION_RULES_2={"%a":function(date){return WEEKDAYS[date.tm_wday].substring(0,3)},"%A":function(date){return WEEKDAYS[date.tm_wday]},"%b":function(date){return MONTHS[date.tm_mon].substring(0,3)},"%B":function(date){return MONTHS[date.tm_mon]},"%C":function(date){var year=date.tm_year+1900;return leadingNulls(year/100|0,2)},"%d":function(date){return leadingNulls(date.tm_mday,2)},"%e":function(date){return leadingSomething(date.tm_mday,2," ")},"%g":function(date){return getWeekBasedYear(date).toString().substring(2)},"%G":function(date){return getWeekBasedYear(date)},"%H":function(date){return leadingNulls(date.tm_hour,2)},"%I":function(date){var twelveHour=date.tm_hour;if(twelveHour==0)twelveHour=12;else if(twelveHour>12)twelveHour-=12;return leadingNulls(twelveHour,2)},"%j":function(date){return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900)?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,date.tm_mon-1),3)},"%m":function(date){return leadingNulls(date.tm_mon+1,2)},"%M":function(date){return leadingNulls(date.tm_min,2)},"%n":function(){return "\n"},"%p":function(date){if(date.tm_hour>=0&&date.tm_hour<12){return "AM"}else {return "PM"}},"%S":function(date){return leadingNulls(date.tm_sec,2)},"%t":function(){return "\t"},"%u":function(date){return date.tm_wday||7},"%U":function(date){var janFirst=new Date(date.tm_year+1900,0,1);var firstSunday=janFirst.getDay()===0?janFirst:__addDays(janFirst,7-janFirst.getDay());var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstSunday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstSundayUntilEndJanuary=31-firstSunday.getDate();var days=firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstSunday,janFirst)===0?"01":"00"},"%V":function(date){var janFourthThisYear=new Date(date.tm_year+1900,0,4);var janFourthNextYear=new Date(date.tm_year+1901,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);var endDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);if(compareByDay(endDate,firstWeekStartThisYear)<0){return "53"}if(compareByDay(firstWeekStartNextYear,endDate)<=0){return "01"}var daysDifference;if(firstWeekStartThisYear.getFullYear()<date.tm_year+1900){daysDifference=date.tm_yday+32-firstWeekStartThisYear.getDate();}else {daysDifference=date.tm_yday+1-firstWeekStartThisYear.getDate();}return leadingNulls(Math.ceil(daysDifference/7),2)},"%w":function(date){return date.tm_wday},"%W":function(date){var janFirst=new Date(date.tm_year,0,1);var firstMonday=janFirst.getDay()===1?janFirst:__addDays(janFirst,janFirst.getDay()===0?1:7-janFirst.getDay()+1);var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstMonday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstMondayUntilEndJanuary=31-firstMonday.getDate();var days=firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstMonday,janFirst)===0?"01":"00"},"%y":function(date){return (date.tm_year+1900).toString().substring(2)},"%Y":function(date){return date.tm_year+1900},"%z":function(date){var off=date.tm_gmtoff;var ahead=off>=0;off=Math.abs(off)/60;off=off/60*100+off%60;return (ahead?"+":"-")+String("0000"+off).slice(-4)},"%Z":function(date){return date.tm_zone},"%%":function(){return "%"}};for(var rule in EXPANSION_RULES_2){if(pattern.indexOf(rule)>=0){pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_2[rule](date));}}var bytes=intArrayFromString(pattern,false);if(bytes.length>maxsize){return 0}writeArrayToMemory(bytes,s);return bytes.length-1}function _strftime_l(s,maxsize,format,tm){return _strftime(s,maxsize,format,tm)}var FSNode=function(parent,name,mode,rdev){if(!parent){parent=this;}this.parent=parent;this.mount=parent.mount;this.mounted=null;this.id=FS.nextInode++;this.name=name;this.mode=mode;this.node_ops={};this.stream_ops={};this.rdev=rdev;};var readMode=292|73;var writeMode=146;Object.defineProperties(FSNode.prototype,{read:{get:function(){return (this.mode&readMode)===readMode},set:function(val){val?this.mode|=readMode:this.mode&=~readMode;}},write:{get:function(){return (this.mode&writeMode)===writeMode},set:function(val){val?this.mode|=writeMode:this.mode&=~writeMode;}},isFolder:{get:function(){return FS.isDir(this.mode)}},isDevice:{get:function(){return FS.isChrdev(this.mode)}}});FS.FSNode=FSNode;FS.staticInit();embind_init_charCodes();BindingError=Module["BindingError"]=extendError(Error,"BindingError");InternalError=Module["InternalError"]=extendError(Error,"InternalError");init_ClassHandle();init_RegisteredPointer();init_embind();UnboundTypeError=Module["UnboundTypeError"]=extendError(Error,"UnboundTypeError");init_emval();function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}var asmLibraryArg={"m":___cxa_allocate_exception,"l":___cxa_throw,"B":___map_file,"p":___sys_fcntl64,"M":___sys_fstat64,"H":___sys_ioctl,"J":___sys_madvise1,"I":___sys_mmap2,"K":___sys_munmap,"q":___sys_open,"L":___sys_stat64,"O":__embind_register_bool,"t":__embind_register_class,"i":__embind_register_class_constructor,"a":__embind_register_class_function,"N":__embind_register_emval,"n":__embind_register_enum,"b":__embind_register_enum_value,"r":__embind_register_float,"c":__embind_register_function,"e":__embind_register_integer,"d":__embind_register_memory_view,"s":__embind_register_std_string,"k":__embind_register_std_wstring,"P":__embind_register_void,"h":_abort,"C":_clock_gettime,"w":_emscripten_memcpy_big,"x":_emscripten_resize_heap,"E":_environ_get,"F":_environ_sizes_get,"f":_exit,"j":_fd_close,"D":_fd_fdstat_get,"G":_fd_read,"u":_fd_seek,"o":_fd_write,"memory":wasmMemory,"g":_pthread_create,"y":_pthread_detach,"z":_pthread_join,"v":_setTempRet0,"A":_strftime_l,"table":wasmTable};var asm=createWasm();Module["asm"]=asm;var ___wasm_call_ctors=Module["___wasm_call_ctors"]=function(){return (___wasm_call_ctors=Module["___wasm_call_ctors"]=Module["asm"]["Q"]).apply(null,arguments)};var _memset=Module["_memset"]=function(){return (_memset=Module["_memset"]=Module["asm"]["R"]).apply(null,arguments)};var _malloc=Module["_malloc"]=function(){return (_malloc=Module["_malloc"]=Module["asm"]["S"]).apply(null,arguments)};var _free=Module["_free"]=function(){return (_free=Module["_free"]=Module["asm"]["T"]).apply(null,arguments)};var ___getTypeName=Module["___getTypeName"]=function(){return (___getTypeName=Module["___getTypeName"]=Module["asm"]["U"]).apply(null,arguments)};Module["___embind_register_native_and_builtin_types"]=function(){return (Module["___embind_register_native_and_builtin_types"]=Module["asm"]["V"]).apply(null,arguments)};var ___errno_location=Module["___errno_location"]=function(){return (___errno_location=Module["___errno_location"]=Module["asm"]["W"]).apply(null,arguments)};var _memalign=Module["_memalign"]=function(){return (_memalign=Module["_memalign"]=Module["asm"]["X"]).apply(null,arguments)};Module["dynCall_ii"]=function(){return (Module["dynCall_ii"]=Module["asm"]["Y"]).apply(null,arguments)};Module["dynCall_vi"]=function(){return (Module["dynCall_vi"]=Module["asm"]["Z"]).apply(null,arguments)};Module["dynCall_i"]=function(){return (Module["dynCall_i"]=Module["asm"]["_"]).apply(null,arguments)};Module["dynCall_iii"]=function(){return (Module["dynCall_iii"]=Module["asm"]["$"]).apply(null,arguments)};Module["dynCall_iiii"]=function(){return (Module["dynCall_iiii"]=Module["asm"]["aa"]).apply(null,arguments)};Module["dynCall_iiiii"]=function(){return (Module["dynCall_iiiii"]=Module["asm"]["ba"]).apply(null,arguments)};Module["dynCall_vii"]=function(){return (Module["dynCall_vii"]=Module["asm"]["ca"]).apply(null,arguments)};Module["dynCall_viiii"]=function(){return (Module["dynCall_viiii"]=Module["asm"]["da"]).apply(null,arguments)};Module["dynCall_viii"]=function(){return (Module["dynCall_viii"]=Module["asm"]["ea"]).apply(null,arguments)};Module["dynCall_viiiii"]=function(){return (Module["dynCall_viiiii"]=Module["asm"]["fa"]).apply(null,arguments)};Module["dynCall_iiiiii"]=function(){return (Module["dynCall_iiiiii"]=Module["asm"]["ga"]).apply(null,arguments)};Module["dynCall_viijii"]=function(){return (Module["dynCall_viijii"]=Module["asm"]["ha"]).apply(null,arguments)};Module["dynCall_jiji"]=function(){return (Module["dynCall_jiji"]=Module["asm"]["ia"]).apply(null,arguments)};Module["dynCall_iidiiii"]=function(){return (Module["dynCall_iidiiii"]=Module["asm"]["ja"]).apply(null,arguments)};Module["dynCall_iiiiiiiii"]=function(){return (Module["dynCall_iiiiiiiii"]=Module["asm"]["ka"]).apply(null,arguments)};Module["dynCall_iiiiiii"]=function(){return (Module["dynCall_iiiiiii"]=Module["asm"]["la"]).apply(null,arguments)};Module["dynCall_iiiiij"]=function(){return (Module["dynCall_iiiiij"]=Module["asm"]["ma"]).apply(null,arguments)};Module["dynCall_iiiiid"]=function(){return (Module["dynCall_iiiiid"]=Module["asm"]["na"]).apply(null,arguments)};Module["dynCall_iiiiijj"]=function(){return (Module["dynCall_iiiiijj"]=Module["asm"]["oa"]).apply(null,arguments)};Module["dynCall_iiiiiiii"]=function(){return (Module["dynCall_iiiiiiii"]=Module["asm"]["pa"]).apply(null,arguments)};Module["dynCall_iiiiiijj"]=function(){return (Module["dynCall_iiiiiijj"]=Module["asm"]["qa"]).apply(null,arguments)};Module["dynCall_viiiiii"]=function(){return (Module["dynCall_viiiiii"]=Module["asm"]["ra"]).apply(null,arguments)};Module["dynCall_v"]=function(){return (Module["dynCall_v"]=Module["asm"]["sa"]).apply(null,arguments)};Module["asm"]=asm;var calledRun;function ExitStatus(status){this.name="ExitStatus";this.message="Program terminated with exit("+status+")";this.status=status;}dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller;};function run(args){if(runDependencies>0){return}preRun();if(runDependencies>0)return;function doRun(){if(calledRun)return;calledRun=true;Module["calledRun"]=true;if(ABORT)return;initRuntime();preMain();readyPromiseResolve(Module);if(Module["onRuntimeInitialized"])Module["onRuntimeInitialized"]();postRun();}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout(function(){setTimeout(function(){Module["setStatus"]("");},1);doRun();},1);}else {doRun();}}Module["run"]=run;function exit(status,implicit){if(implicit&&noExitRuntime&&status===0){return}if(noExitRuntime);else {ABORT=true;if(Module["onExit"])Module["onExit"](status);}quit_(status,new ExitStatus(status));}if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()();}}noExitRuntime=true;run();


      return Module.ready
    }
    );
    })();

    class BoardSettings {
        constructor() {
            this.settings = {};
            this.settings["animation"] = new AnimationSettings(this);
            this.settings["showDests"] = new ShowDestsSettings(this);
            this.settings["autoPromote"] = new AutoPromoteSettings(this);
            this.settings["arrow"] = new ArrowSettings(this);
            this.settings["multipv"] = new MultiPVSettings(this);
            this.settings["blindfold"] = new BlindfoldSettings(this);
            this.settings["materialDifference"] = new MaterialDifferenceSettings(this);
        }
        getSettings(settingsType, family) {
            const fullName = family + settingsType;
            if (!this.settings[fullName]) {
                switch (settingsType) {
                    case "BoardStyle":
                        this.settings[fullName] = new BoardStyleSettings(this, family);
                        break;
                    case "PieceStyle":
                        this.settings[fullName] = new PieceStyleSettings(this, family);
                        break;
                    case "Zoom":
                        this.settings[fullName] = new ZoomSettings(this, family);
                        break;
                    case "Nnue":
                        this.settings[fullName] = new NnueSettings(this, family);
                        break;
                    default:
                        throw "Unknown settings type " + settingsType;
                }
            }
            return this.settings[fullName];
        }
        updateBoardAndPieceStyles() {
            Object.keys(BOARD_FAMILIES).forEach(family => this.updateBoardStyle(family));
            Object.keys(PIECE_FAMILIES).forEach(family => this.updatePieceStyle(family));
        }
        updateBoardStyle(family) {
            const idx = this.getSettings("BoardStyle", family).value;
            const board = BOARD_FAMILIES[family].boardCSS[idx];
            changeBoardCSS(this.assetURL, family, board);
        }
        updatePieceStyle(family) {
            const idx = this.getSettings("PieceStyle", family).value;
            let css = PIECE_FAMILIES[family].pieceCSS[idx];
            changePieceCSS(this.assetURL, family, css);
            this.updateDropSuggestion();
        }
        updateDropSuggestion() {
            // Redraw the piece being suggested for dropping in the new piece style
            if (this.ctrl && this.ctrl.hasPockets) {
                const chessground = this.ctrl.chessground;
                const el = document.querySelector('svg image');
                // if there is any
                if (el) {
                    chessground.redrawAll();
                }
            }
        }
        updateZoom(family) {
            var _a;
            const variant = (_a = this.ctrl) === null || _a === void 0 ? void 0 : _a.variant;
            if (variant && variant.board === family) {
                const zoomSettings = this.getSettings("Zoom", family);
                const zoom = zoomSettings.value;
                const el = document.querySelector('.cg-wrap:not(.pocket)');
                if (el) {
                    document.body.setAttribute('style', '--zoom:' + zoom);
                    document.body.dispatchEvent(new Event('chessground.resize'));
                    // Analysis needs to zoom analysisChart and movetimeChart as well
                    if ('chartFunctions' in this.ctrl && this.ctrl.chartFunctions) {
                        this.ctrl.chartFunctions.forEach((func) => {
                            func(this.ctrl);
                        });
                    }
                }
            }
        }
        updateBlindfold() {
            this.settings["blindfold"].update();
        }
        view(variantName) {
            var _a, _b;
            if (!variantName)
                return h("div#board-settings");
            const variant = VARIANTS[variantName];
            const settingsList = [];
            const boardFamily = VARIANTS[variantName].board;
            const pieceFamily = VARIANTS[variantName].piece;
            settingsList.push(this.settings["animation"].view());
            settingsList.push(this.settings["showDests"].view());
            if (variant.autoPromoteable)
                settingsList.push(this.settings["autoPromote"].view());
            settingsList.push(this.settings["arrow"].view());
            settingsList.push(this.settings["multipv"].view());
            if (variantName === ((_a = this.ctrl) === null || _a === void 0 ? void 0 : _a.variant.name))
                settingsList.push(this.getSettings("Nnue", variantName).view());
            settingsList.push(this.settings["blindfold"].view());
            settingsList.push(this.settings["materialDifference"].view());
            if (variantName === ((_b = this.ctrl) === null || _b === void 0 ? void 0 : _b.variant.name))
                settingsList.push(this.getSettings("Zoom", boardFamily).view());
            settingsList.push(h('div#style-settings', [
                this.getSettings("BoardStyle", boardFamily).view(),
                this.getSettings("PieceStyle", pieceFamily).view(),
            ]));
            settingsList.push();
            return h('div#board-settings', settingsList);
        }
    }
    class AnimationSettings extends BooleanSettings {
        constructor(boardSettings) {
            super('animation', true);
            this.boardSettings = boardSettings;
        }
        update() {
            var _a;
            (_a = this.boardSettings.ctrl) === null || _a === void 0 ? void 0 : _a.chessground.set({ animation: { enabled: this.value } });
        }
        view() {
            return h('div', checkbox(this, 'animation', _("Piece animation")));
        }
    }
    class BoardStyleSettings extends NumberSettings {
        constructor(boardSettings, boardFamily) {
            super(boardFamily + '-board', 0);
            this.boardSettings = boardSettings;
            this.boardFamily = boardFamily;
        }
        update() {
            this.boardSettings.updateBoardStyle(this.boardFamily);
        }
        view() {
            const vboard = this.value;
            const boards = [];
            const boardCSS = BOARD_FAMILIES[this.boardFamily].boardCSS;
            for (let i = 0; i < boardCSS.length; i++) {
                boards.push(h('input#board' + i, {
                    on: { change: evt => this.value = Number(evt.target.value) },
                    props: { type: "radio", name: "board", value: i },
                    attrs: { checked: vboard === i },
                }));
                boards.push(h('label.board.board' + i + '.' + this.boardFamily, {
                    attrs: { for: "board" + i },
                    style: { backgroundImage: `url('/static/images/board/${boardCSS[i]}')` },
                }, ""));
            }
            return h('settings-board', boards);
        }
    }
    class PieceStyleSettings extends NumberSettings {
        constructor(boardSettings, pieceFamily) {
            super(pieceFamily + '-piece', 0);
            this.boardSettings = boardSettings;
            this.pieceFamily = pieceFamily;
        }
        update() {
            this.boardSettings.updatePieceStyle(this.pieceFamily);
        }
        view() {
            const vpiece = this.value;
            const pieces = [];
            const pieceCSS = PIECE_FAMILIES[this.pieceFamily].pieceCSS;
            for (let i = 0; i < pieceCSS.length; i++) {
                pieces.push(h('input#piece' + i, {
                    on: { change: e => this.value = Number(e.target.value) },
                    props: { type: "radio", name: "piece", value: i },
                    attrs: { checked: vpiece === i },
                }));
                pieces.push(h('label.piece.piece' + i + '.' + this.pieceFamily, { attrs: { for: "piece" + i } }, ""));
            }
            return h('settings-pieces', pieces);
        }
    }
    class ZoomSettings extends NumberSettings {
        constructor(boardSettings, boardFamily) {
            super(boardFamily + '-zoom', 80);
            this.boardSettings = boardSettings;
            this.boardFamily = boardFamily;
        }
        update() {
            this.boardSettings.updateZoom(this.boardFamily);
        }
        view() {
            return h('div', slider(this, 'zoom', 0, 100, this.boardFamily.includes("shogi") ? 1 : 1.15625, _('Zoom')));
        }
    }
    class ShowDestsSettings extends BooleanSettings {
        constructor(boardSettings) {
            super('showDests', true);
            this.boardSettings = boardSettings;
        }
        update() {
            var _a;
            (_a = this.boardSettings.ctrl) === null || _a === void 0 ? void 0 : _a.chessground.set({
                movable: {
                    showDests: this.value,
                },
            });
        }
        view() {
            return h('div', checkbox(this, 'showDests', _("Show piece destinations")));
        }
    }
    class AutoPromoteSettings extends BooleanSettings {
        constructor(boardSettings) {
            super('autoPromote', false);
            this.boardSettings = boardSettings;
        }
        update() {
            const ctrl = this.boardSettings.ctrl;
            if ('autoPromote' in ctrl)
                ctrl.autoPromote = this.value;
        }
        view() {
            return h('div', checkbox(this, 'autoPromote', _("Promote to the top choice automatically")));
        }
    }
    class ArrowSettings extends BooleanSettings {
        constructor(boardSettings) {
            super('arrow', true);
            this.boardSettings = boardSettings;
        }
        update() {
            const ctrl = this.boardSettings.ctrl;
            if ('arrow' in ctrl)
                ctrl.arrow = this.value;
        }
        view() {
            return h('div', checkbox(this, 'arrow', _("Best move arrow in analysis board")));
        }
    }
    class MultiPVSettings extends NumberSettings {
        constructor(boardSettings) {
            super('multipv', 1);
            this.boardSettings = boardSettings;
        }
        update() {
            const ctrl = this.boardSettings.ctrl;
            if ('multipv' in ctrl)
                ctrl.multipv = this.value;
            ctrl.pvboxIni();
        }
        view() {
            return h('div', slider(this, 'multipv', 1, 5, 1, _('MultiPV')));
        }
    }
    class NnueSettings extends StringSettings {
        constructor(boardSettings, variant) {
            super(variant + '-nnue', '');
            this.boardSettings = boardSettings;
            this.variant = variant;
        }
        update() {
            const ctrl = this.boardSettings.ctrl;
            if ('evalFile' in ctrl)
                ctrl.evalFile = this.value;
            ctrl.nnueIni();
        }
        view() {
            return h('div', nnueFile(this, 'evalFile', 'NNUE', this.variant));
        }
    }
    class BlindfoldSettings extends BooleanSettings {
        constructor(boardSettings) {
            super('blindfold', false);
            this.boardSettings = boardSettings;
        }
        update() {
            const ctrl = this.boardSettings.ctrl;
            if ('blindfold' in ctrl)
                ctrl.blindfold = this.value;
            const el = document.getElementById('mainboard');
            if (el) {
                if (this.value) {
                    el.classList.add('blindfold');
                }
                else {
                    el.classList.remove('blindfold');
                }
            }
        }
        view() {
            return h('div', checkbox(this, 'blindfold', _("Invisible pieces")));
        }
    }
    class MaterialDifferenceSettings extends BooleanSettings {
        constructor(boardSettings) {
            super('materialDifference', false);
            this.boardSettings = boardSettings;
        }
        update() {
            const ctrl = this.boardSettings.ctrl;
            if ('materialDifference' in ctrl) {
                ctrl.materialDifference = this.value;
                if ('updateMaterial' in ctrl) {
                    ctrl.updateMaterial();
                }
            }
        }
        view() {
            return h('div', checkbox(this, 'captured', _("Show material difference")));
        }
    }
    const boardSettings = new BoardSettings();

    const variantsIni = `
# Hybrid variant of Grand-chess and crazyhouse, using Grand-chess as a template
[grandhouse:grand]
startFen = r8r/1nbqkcabn1/pppppppppp/10/10/10/10/PPPPPPPPPP/1NBQKCABN1/R8R[] w - - 0 1
pieceDrops = true
capturesToHand = true

# Hybrid variant of Gothic-chess and crazyhouse, using Capablanca as a template
[gothhouse:capablanca]
startFen = rnbqckabnr/pppppppppp/10/10/10/10/PPPPPPPPPP/RNBQCKABNR[] w KQkq - 0 1
pieceDrops = true
capturesToHand = true

# Hybrid variant of Embassy chess and crazyhouse, using Embassy as a template
[embassyhouse:embassy]
startFen = rnbqkcabnr/pppppppppp/10/10/10/10/PPPPPPPPPP/RNBQKCABNR[] w KQkq - 0 1
pieceDrops = true
capturesToHand = true

[gorogoroplus:gorogoro]
startFen = sgkgs/5/1ppp1/1PPP1/5/SGKGS[LNln] w 0 1
lance = l
shogiKnight = n
promotedPieceType = l:g n:g

[shogun:crazyhouse]
startFen = rnb+fkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNB+FKBNR[] w KQkq - 0 1
commoner = c
centaur = g
archbishop = a
chancellor = m
fers = f
promotionRank = 6
promotionLimit = g:1 a:1 m:1 q:1
promotionPieceTypes = -
promotedPieceType = p:c n:g b:a r:m f:q
mandatoryPawnPromotion = false
firstRankPawnDrops = true
promotionZonePawnDrops = true
whiteDropRegion = *1 *2 *3 *4 *5
blackDropRegion = *4 *5 *6 *7 *8
immobilityIllegal = true

[orda:chess]
centaur = h
knibis = a
kniroo = l
silver = y
promotionPieceTypes = qh
startFen = lhaykahl/8/pppppppp/8/8/8/PPPPPPPP/RNBQKBNR w KQ - 0 1
flagPiece = k
whiteFlag = *8
blackFlag = *1

[synochess:pocketknight]
janggiCannon = c
soldier = s
horse = h
fersAlfil = e
commoner = a
startFen = rneakenr/8/1c4c1/1ss2ss1/8/8/PPPPPPPP/RNBQKBNR[ss] w KQ - 0 1
stalemateValue = loss
perpetualCheckIllegal = true
flyingGeneral = true
blackDropRegion = *5
flagPiece = k
whiteFlag = *8
blackFlag = *1

[shinobi:crazyhouse]
commoner = c
bers = d
archbishop = j
fers = m
shogiKnight = h
lance = l
promotionRank = 7
promotionPieceTypes = -
promotedPieceType = p:c m:b h:n l:r
mandatoryPiecePromotion = true
stalemateValue = loss
nFoldRule = 4
perpetualCheckIllegal = true
startFen = rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/LH1CK1HL[LHMMDJ] w kq - 0 1
capturesToHand = false
whiteDropRegion = *1 *2 *3 *4
immobilityIllegal = true
flagPiece = k
whiteFlag = *8
blackFlag = *1

[ordamirror:chess]
centaur = h
knibis = a
kniroo = l
customPiece1 = f:mQcN
promotionPieceTypes = lhaf
startFen = lhafkahl/8/pppppppp/8/8/PPPPPPPP/8/LHAFKAHL w - - 0 1
flagPiece = k
whiteFlag = *8
blackFlag = *1

[empire:chess]
customPiece1 = e:mQcN
customPiece2 = c:mQcB
customPiece3 = t:mQcR
customPiece4 = d:mQcK
soldier = s
promotionPieceTypes = q
startFen = rnbqkbnr/pppppppp/8/8/8/PPPSSPPP/8/TECDKCET w kq - 0 1
stalemateValue = loss
nFoldValue = loss
flagPiece = k
whiteFlag = *8
blackFlag = *1
flyingGeneral = true

[chak]
maxRank = 9
maxFile = 9
rook = r
knight = v
centaur = j
immobile = o
customPiece1 = s:FvW
customPiece2 = q:pQ
customPiece3 = d:mQ2cQ2
customPiece4 = p:fsmWfceF
customPiece5 = k:WF
customPiece6 = w:FvW
startFen = rvsqkjsvr/4o4/p1p1p1p1p/9/9/9/P1P1P1P1P/4O4/RVSJKQSVR w - - 0 1
mobilityRegionWhiteCustomPiece6 = *5 *6 *7 *8 *9
mobilityRegionWhiteCustomPiece3 = *5 *6 *7 *8 *9
mobilityRegionBlackCustomPiece6 = *1 *2 *3 *4 *5
mobilityRegionBlackCustomPiece3 = *1 *2 *3 *4 *5
promotionRank = 5
promotionPieceTypes = -
mandatoryPiecePromotion = true
promotedPieceType = p:w k:d
extinctionValue = loss
extinctionPieceTypes = kd
extinctionPseudoRoyal = true
flagPiece = d
whiteFlag = e8
blackFlag = e2
nMoveRule = 50
nFoldRule = 3
nFoldValue = draw
stalemateValue = loss

[chennis]
maxRank = 7
maxFile = 7
mobilityRegionWhiteKing = b1 c1 d1 e1 f1 b2 c2 d2 e2 f2 b3 c3 d3 e3 f3 b4 c4 d4 e4 f4
mobilityRegionBlackKing = b4 c4 d4 e4 f4 b5 c5 d5 e5 f5 b6 c6 d6 e6 f6 b7 c7 d7 e7 f7
customPiece1 = p:fmWfceF
cannon = c
commoner = m
fers = f
soldier = s
king = k
bishop = b
knight = n
rook = r
promotionPieceTypes = -
promotedPieceType = p:r f:c s:b m:n
promotionRank = 1
startFen = 1fkm3/1p1s3/7/7/7/3S1P1/3MKF1[] w - 0 1
pieceDrops = true
capturesToHand = true
pieceDemotion = true
mandatoryPiecePromotion = true
dropPromoted = true
castling = false
stalemateValue = loss`;

    class ChessgroundController {
        constructor(el, model) {
            this.notation2ffishjs = (n) => {
                switch (n) {
                    case 0 /* cg.Notation.ALGEBRAIC */: return this.ffish.Notation.SAN;
                    case 2 /* cg.Notation.SHOGI_ARBNUM */: return this.ffish.Notation.SHOGI_HODGES_NUMBER;
                    case 4 /* cg.Notation.JANGGI */: return this.ffish.Notation.JANGGI;
                    case 5 /* cg.Notation.XIANGQI_ARBNUM */: return this.ffish.Notation.XIANGQI_WXF;
                    default: return this.ffish.Notation.SAN;
                }
            };
            this.home = model.home;
            this.variant = VARIANTS[model.variant];
            this.chess960 = model.chess960 === 'True';
            this.hasPockets = this.variant.pocket;
            this.anon = model.anon === 'True';
            this.mycolor = 'white';
            this.oppcolor = 'black';
            this.fullfen = model.fen;
            this.notation = notation(this.variant);
            const pocket0 = document.getElementById('pocket0');
            const pocket1 = document.getElementById('pocket1');
            const parts = this.fullfen.split(" ");
            const fen_placement = parts[0];
            this.chessground = Chessground(el, {
                fen: fen_placement,
                dimensions: this.variant.boardDimensions,
                notation: this.notation,
                addDimensionsCssVarsTo: document.body,
                kingRoles: this.variant.kingRoles,
                pocketRoles: this.variant.pocketRoles,
            }, pocket0, pocket1);
            boardSettings.ctrl = this;
            boardSettings.assetURL = model.assetURL;
            const boardFamily = this.variant.board;
            const pieceFamily = this.variant.piece;
            boardSettings.updateBoardStyle(boardFamily);
            boardSettings.updatePieceStyle(pieceFamily);
            boardSettings.updateZoom(boardFamily);
            boardSettings.updateBlindfold();
            new Module().then((loadedModule) => {
                this.ffish = loadedModule;
                this.ffish.loadVariantConfig(variantsIni);
                this.notationAsObject = this.notation2ffishjs(this.notation);
                this.ffishBoard = new this.ffish.Board(moddedVariant(this.variant.name, this.chess960, this.chessground.state.boardState.pieces, parts[2]), this.fullfen, this.chess960);
                window.addEventListener('beforeunload', () => this.ffishBoard.delete());
            });
        }
        toggleOrientation() {
            this.chessground.toggleOrientation();
        }
        flipped() {
            return this.chessground.state.orientation === 'black';
        }
    }

    // Counting for makruk, cambodian, sittuyin
    function updateCount(fen, whiteContainer, blackContainer) {
        const [countingPly, countingLimit, countingSide,] = getCounting(fen);
        whiteContainer = patch(whiteContainer, h('div#misc-infow', ''));
        blackContainer = patch(blackContainer, h('div#misc-infob', ''));
        const countingStr = `${Math.floor((countingPly + 1) / 2)}/${countingLimit / 2 + (countingLimit / 2) % 2}`;
        if (countingLimit !== 0 && countingPly !== 0) {
            if (countingSide === 'w')
                whiteContainer = patch(whiteContainer, h('div#misc-infow', countingStr));
            else
                blackContainer = patch(blackContainer, h('div#misc-infob', countingStr));
        }
        return [whiteContainer, blackContainer];
    }
    // Material point for janggi
    function updatePoint(fen, choContainer, hanContainer) {
        const board = fen.split(" ")[0];
        const [choPoint, hanPoint] = getJanggiPoints(board);
        choContainer = patch(choContainer, h('div#misc-infow', { class: { 'text-color-blue': true } }, choPoint));
        hanContainer = patch(hanContainer, h('div#misc-infob', { class: { 'text-color-red': true } }, hanPoint));
        return [choContainer, hanContainer];
    }

    var howler = {};

    /*!
     *  howler.js v2.2.3
     *  howlerjs.com
     *
     *  (c) 2013-2020, James Simpson of GoldFire Studios
     *  goldfirestudios.com
     *
     *  MIT License
     */

    (function (exports) {
    	(function() {

    	  /** Global Methods **/
    	  /***************************************************************************/

    	  /**
    	   * Create the global controller. All contained methods and properties apply
    	   * to all sounds that are currently playing or will be in the future.
    	   */
    	  var HowlerGlobal = function() {
    	    this.init();
    	  };
    	  HowlerGlobal.prototype = {
    	    /**
    	     * Initialize the global Howler object.
    	     * @return {Howler}
    	     */
    	    init: function() {
    	      var self = this || Howler;

    	      // Create a global ID counter.
    	      self._counter = 1000;

    	      // Pool of unlocked HTML5 Audio objects.
    	      self._html5AudioPool = [];
    	      self.html5PoolSize = 10;

    	      // Internal properties.
    	      self._codecs = {};
    	      self._howls = [];
    	      self._muted = false;
    	      self._volume = 1;
    	      self._canPlayEvent = 'canplaythrough';
    	      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;

    	      // Public properties.
    	      self.masterGain = null;
    	      self.noAudio = false;
    	      self.usingWebAudio = true;
    	      self.autoSuspend = true;
    	      self.ctx = null;

    	      // Set to false to disable the auto audio unlocker.
    	      self.autoUnlock = true;

    	      // Setup the various state values for global tracking.
    	      self._setup();

    	      return self;
    	    },

    	    /**
    	     * Get/set the global volume for all sounds.
    	     * @param  {Float} vol Volume from 0.0 to 1.0.
    	     * @return {Howler/Float}     Returns self or current volume.
    	     */
    	    volume: function(vol) {
    	      var self = this || Howler;
    	      vol = parseFloat(vol);

    	      // If we don't have an AudioContext created yet, run the setup.
    	      if (!self.ctx) {
    	        setupAudioContext();
    	      }

    	      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {
    	        self._volume = vol;

    	        // Don't update any of the nodes if we are muted.
    	        if (self._muted) {
    	          return self;
    	        }

    	        // When using Web Audio, we just need to adjust the master gain.
    	        if (self.usingWebAudio) {
    	          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);
    	        }

    	        // Loop through and change volume for all HTML5 audio nodes.
    	        for (var i=0; i<self._howls.length; i++) {
    	          if (!self._howls[i]._webAudio) {
    	            // Get all of the sounds in this Howl group.
    	            var ids = self._howls[i]._getSoundIds();

    	            // Loop through all sounds and change the volumes.
    	            for (var j=0; j<ids.length; j++) {
    	              var sound = self._howls[i]._soundById(ids[j]);

    	              if (sound && sound._node) {
    	                sound._node.volume = sound._volume * vol;
    	              }
    	            }
    	          }
    	        }

    	        return self;
    	      }

    	      return self._volume;
    	    },

    	    /**
    	     * Handle muting and unmuting globally.
    	     * @param  {Boolean} muted Is muted or not.
    	     */
    	    mute: function(muted) {
    	      var self = this || Howler;

    	      // If we don't have an AudioContext created yet, run the setup.
    	      if (!self.ctx) {
    	        setupAudioContext();
    	      }

    	      self._muted = muted;

    	      // With Web Audio, we just need to mute the master gain.
    	      if (self.usingWebAudio) {
    	        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);
    	      }

    	      // Loop through and mute all HTML5 Audio nodes.
    	      for (var i=0; i<self._howls.length; i++) {
    	        if (!self._howls[i]._webAudio) {
    	          // Get all of the sounds in this Howl group.
    	          var ids = self._howls[i]._getSoundIds();

    	          // Loop through all sounds and mark the audio node as muted.
    	          for (var j=0; j<ids.length; j++) {
    	            var sound = self._howls[i]._soundById(ids[j]);

    	            if (sound && sound._node) {
    	              sound._node.muted = (muted) ? true : sound._muted;
    	            }
    	          }
    	        }
    	      }

    	      return self;
    	    },

    	    /**
    	     * Handle stopping all sounds globally.
    	     */
    	    stop: function() {
    	      var self = this || Howler;

    	      // Loop through all Howls and stop them.
    	      for (var i=0; i<self._howls.length; i++) {
    	        self._howls[i].stop();
    	      }

    	      return self;
    	    },

    	    /**
    	     * Unload and destroy all currently loaded Howl objects.
    	     * @return {Howler}
    	     */
    	    unload: function() {
    	      var self = this || Howler;

    	      for (var i=self._howls.length-1; i>=0; i--) {
    	        self._howls[i].unload();
    	      }

    	      // Create a new AudioContext to make sure it is fully reset.
    	      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {
    	        self.ctx.close();
    	        self.ctx = null;
    	        setupAudioContext();
    	      }

    	      return self;
    	    },

    	    /**
    	     * Check for codec support of specific extension.
    	     * @param  {String} ext Audio file extention.
    	     * @return {Boolean}
    	     */
    	    codecs: function(ext) {
    	      return (this || Howler)._codecs[ext.replace(/^x-/, '')];
    	    },

    	    /**
    	     * Setup various state values for global tracking.
    	     * @return {Howler}
    	     */
    	    _setup: function() {
    	      var self = this || Howler;

    	      // Keeps track of the suspend/resume state of the AudioContext.
    	      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';

    	      // Automatically begin the 30-second suspend process
    	      self._autoSuspend();

    	      // Check if audio is available.
    	      if (!self.usingWebAudio) {
    	        // No audio is available on this system if noAudio is set to true.
    	        if (typeof Audio !== 'undefined') {
    	          try {
    	            var test = new Audio();

    	            // Check if the canplaythrough event is available.
    	            if (typeof test.oncanplaythrough === 'undefined') {
    	              self._canPlayEvent = 'canplay';
    	            }
    	          } catch(e) {
    	            self.noAudio = true;
    	          }
    	        } else {
    	          self.noAudio = true;
    	        }
    	      }

    	      // Test to make sure audio isn't disabled in Internet Explorer.
    	      try {
    	        var test = new Audio();
    	        if (test.muted) {
    	          self.noAudio = true;
    	        }
    	      } catch (e) {}

    	      // Check for supported codecs.
    	      if (!self.noAudio) {
    	        self._setupCodecs();
    	      }

    	      return self;
    	    },

    	    /**
    	     * Check for browser support for various codecs and cache the results.
    	     * @return {Howler}
    	     */
    	    _setupCodecs: function() {
    	      var self = this || Howler;
    	      var audioTest = null;

    	      // Must wrap in a try/catch because IE11 in server mode throws an error.
    	      try {
    	        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;
    	      } catch (err) {
    	        return self;
    	      }

    	      if (!audioTest || typeof audioTest.canPlayType !== 'function') {
    	        return self;
    	      }

    	      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');

    	      // Opera version <33 has mixed MP3 support, so we need to check for and block it.
    	      var ua = self._navigator ? self._navigator.userAgent : '';
    	      var checkOpera = ua.match(/OPR\/([0-6].)/g);
    	      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);
    	      var checkSafari = ua.indexOf('Safari') !== -1 && ua.indexOf('Chrome') === -1;
    	      var safariVersion = ua.match(/Version\/(.*?) /);
    	      var isOldSafari = (checkSafari && safariVersion && parseInt(safariVersion[1], 10) < 15);

    	      self._codecs = {
    	        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),
    	        mpeg: !!mpegTest,
    	        opus: !!audioTest.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/, ''),
    	        ogg: !!audioTest.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ''),
    	        oga: !!audioTest.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ''),
    	        wav: !!(audioTest.canPlayType('audio/wav; codecs="1"') || audioTest.canPlayType('audio/wav')).replace(/^no$/, ''),
    	        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),
    	        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),
    	        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),
    	        m4b: !!(audioTest.canPlayType('audio/x-m4b;') || audioTest.canPlayType('audio/m4b;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),
    	        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),
    	        weba: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, '')),
    	        webm: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, '')),
    	        dolby: !!audioTest.canPlayType('audio/mp4; codecs="ec-3"').replace(/^no$/, ''),
    	        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')
    	      };

    	      return self;
    	    },

    	    /**
    	     * Some browsers/devices will only allow audio to be played after a user interaction.
    	     * Attempt to automatically unlock audio on the first user interaction.
    	     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/
    	     * @return {Howler}
    	     */
    	    _unlockAudio: function() {
    	      var self = this || Howler;

    	      // Only run this if Web Audio is supported and it hasn't already been unlocked.
    	      if (self._audioUnlocked || !self.ctx) {
    	        return;
    	      }

    	      self._audioUnlocked = false;
    	      self.autoUnlock = false;

    	      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.
    	      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.
    	      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.
    	      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {
    	        self._mobileUnloaded = true;
    	        self.unload();
    	      }

    	      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:
    	      // http://stackoverflow.com/questions/24119684
    	      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);

    	      // Call this method on touch start to create and play a buffer,
    	      // then check if the audio actually played to determine if
    	      // audio has now been unlocked on iOS, Android, etc.
    	      var unlock = function(e) {
    	        // Create a pool of unlocked HTML5 Audio objects that can
    	        // be used for playing sounds without user interaction. HTML5
    	        // Audio objects must be individually unlocked, as opposed
    	        // to the WebAudio API which only needs a single activation.
    	        // This must occur before WebAudio setup or the source.onended
    	        // event will not fire.
    	        while (self._html5AudioPool.length < self.html5PoolSize) {
    	          try {
    	            var audioNode = new Audio();

    	            // Mark this Audio object as unlocked to ensure it can get returned
    	            // to the unlocked pool when released.
    	            audioNode._unlocked = true;

    	            // Add the audio node to the pool.
    	            self._releaseHtml5Audio(audioNode);
    	          } catch (e) {
    	            self.noAudio = true;
    	            break;
    	          }
    	        }

    	        // Loop through any assigned audio nodes and unlock them.
    	        for (var i=0; i<self._howls.length; i++) {
    	          if (!self._howls[i]._webAudio) {
    	            // Get all of the sounds in this Howl group.
    	            var ids = self._howls[i]._getSoundIds();

    	            // Loop through all sounds and unlock the audio nodes.
    	            for (var j=0; j<ids.length; j++) {
    	              var sound = self._howls[i]._soundById(ids[j]);

    	              if (sound && sound._node && !sound._node._unlocked) {
    	                sound._node._unlocked = true;
    	                sound._node.load();
    	              }
    	            }
    	          }
    	        }

    	        // Fix Android can not play in suspend state.
    	        self._autoResume();

    	        // Create an empty buffer.
    	        var source = self.ctx.createBufferSource();
    	        source.buffer = self._scratchBuffer;
    	        source.connect(self.ctx.destination);

    	        // Play the empty buffer.
    	        if (typeof source.start === 'undefined') {
    	          source.noteOn(0);
    	        } else {
    	          source.start(0);
    	        }

    	        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.
    	        if (typeof self.ctx.resume === 'function') {
    	          self.ctx.resume();
    	        }

    	        // Setup a timeout to check that we are unlocked on the next event loop.
    	        source.onended = function() {
    	          source.disconnect(0);

    	          // Update the unlocked state and prevent this check from happening again.
    	          self._audioUnlocked = true;

    	          // Remove the touch start listener.
    	          document.removeEventListener('touchstart', unlock, true);
    	          document.removeEventListener('touchend', unlock, true);
    	          document.removeEventListener('click', unlock, true);
    	          document.removeEventListener('keydown', unlock, true);

    	          // Let all sounds know that audio has been unlocked.
    	          for (var i=0; i<self._howls.length; i++) {
    	            self._howls[i]._emit('unlock');
    	          }
    	        };
    	      };

    	      // Setup a touch start listener to attempt an unlock in.
    	      document.addEventListener('touchstart', unlock, true);
    	      document.addEventListener('touchend', unlock, true);
    	      document.addEventListener('click', unlock, true);
    	      document.addEventListener('keydown', unlock, true);

    	      return self;
    	    },

    	    /**
    	     * Get an unlocked HTML5 Audio object from the pool. If none are left,
    	     * return a new Audio object and throw a warning.
    	     * @return {Audio} HTML5 Audio object.
    	     */
    	    _obtainHtml5Audio: function() {
    	      var self = this || Howler;

    	      // Return the next object from the pool if one exists.
    	      if (self._html5AudioPool.length) {
    	        return self._html5AudioPool.pop();
    	      }

    	      //.Check if the audio is locked and throw a warning.
    	      var testPlay = new Audio().play();
    	      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {
    	        testPlay.catch(function() {
    	          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');
    	        });
    	      }

    	      return new Audio();
    	    },

    	    /**
    	     * Return an activated HTML5 Audio object to the pool.
    	     * @return {Howler}
    	     */
    	    _releaseHtml5Audio: function(audio) {
    	      var self = this || Howler;

    	      // Don't add audio to the pool if we don't know if it has been unlocked.
    	      if (audio._unlocked) {
    	        self._html5AudioPool.push(audio);
    	      }

    	      return self;
    	    },

    	    /**
    	     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.
    	     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.
    	     * @return {Howler}
    	     */
    	    _autoSuspend: function() {
    	      var self = this;

    	      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {
    	        return;
    	      }

    	      // Check if any sounds are playing.
    	      for (var i=0; i<self._howls.length; i++) {
    	        if (self._howls[i]._webAudio) {
    	          for (var j=0; j<self._howls[i]._sounds.length; j++) {
    	            if (!self._howls[i]._sounds[j]._paused) {
    	              return self;
    	            }
    	          }
    	        }
    	      }

    	      if (self._suspendTimer) {
    	        clearTimeout(self._suspendTimer);
    	      }

    	      // If no sound has played after 30 seconds, suspend the context.
    	      self._suspendTimer = setTimeout(function() {
    	        if (!self.autoSuspend) {
    	          return;
    	        }

    	        self._suspendTimer = null;
    	        self.state = 'suspending';

    	        // Handle updating the state of the audio context after suspending.
    	        var handleSuspension = function() {
    	          self.state = 'suspended';

    	          if (self._resumeAfterSuspend) {
    	            delete self._resumeAfterSuspend;
    	            self._autoResume();
    	          }
    	        };

    	        // Either the state gets suspended or it is interrupted.
    	        // Either way, we need to update the state to suspended.
    	        self.ctx.suspend().then(handleSuspension, handleSuspension);
    	      }, 30000);

    	      return self;
    	    },

    	    /**
    	     * Automatically resume the Web Audio AudioContext when a new sound is played.
    	     * @return {Howler}
    	     */
    	    _autoResume: function() {
    	      var self = this;

    	      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {
    	        return;
    	      }

    	      if (self.state === 'running' && self.ctx.state !== 'interrupted' && self._suspendTimer) {
    	        clearTimeout(self._suspendTimer);
    	        self._suspendTimer = null;
    	      } else if (self.state === 'suspended' || self.state === 'running' && self.ctx.state === 'interrupted') {
    	        self.ctx.resume().then(function() {
    	          self.state = 'running';

    	          // Emit to all Howls that the audio has resumed.
    	          for (var i=0; i<self._howls.length; i++) {
    	            self._howls[i]._emit('resume');
    	          }
    	        });

    	        if (self._suspendTimer) {
    	          clearTimeout(self._suspendTimer);
    	          self._suspendTimer = null;
    	        }
    	      } else if (self.state === 'suspending') {
    	        self._resumeAfterSuspend = true;
    	      }

    	      return self;
    	    }
    	  };

    	  // Setup the global audio controller.
    	  var Howler = new HowlerGlobal();

    	  /** Group Methods **/
    	  /***************************************************************************/

    	  /**
    	   * Create an audio group controller.
    	   * @param {Object} o Passed in properties for this group.
    	   */
    	  var Howl = function(o) {
    	    var self = this;

    	    // Throw an error if no source is provided.
    	    if (!o.src || o.src.length === 0) {
    	      console.error('An array of source files must be passed with any new Howl.');
    	      return;
    	    }

    	    self.init(o);
    	  };
    	  Howl.prototype = {
    	    /**
    	     * Initialize a new Howl group object.
    	     * @param  {Object} o Passed in properties for this group.
    	     * @return {Howl}
    	     */
    	    init: function(o) {
    	      var self = this;

    	      // If we don't have an AudioContext created yet, run the setup.
    	      if (!Howler.ctx) {
    	        setupAudioContext();
    	      }

    	      // Setup user-defined default properties.
    	      self._autoplay = o.autoplay || false;
    	      self._format = (typeof o.format !== 'string') ? o.format : [o.format];
    	      self._html5 = o.html5 || false;
    	      self._muted = o.mute || false;
    	      self._loop = o.loop || false;
    	      self._pool = o.pool || 5;
    	      self._preload = (typeof o.preload === 'boolean' || o.preload === 'metadata') ? o.preload : true;
    	      self._rate = o.rate || 1;
    	      self._sprite = o.sprite || {};
    	      self._src = (typeof o.src !== 'string') ? o.src : [o.src];
    	      self._volume = o.volume !== undefined ? o.volume : 1;
    	      self._xhr = {
    	        method: o.xhr && o.xhr.method ? o.xhr.method : 'GET',
    	        headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,
    	        withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false,
    	      };

    	      // Setup all other default properties.
    	      self._duration = 0;
    	      self._state = 'unloaded';
    	      self._sounds = [];
    	      self._endTimers = {};
    	      self._queue = [];
    	      self._playLock = false;

    	      // Setup event listeners.
    	      self._onend = o.onend ? [{fn: o.onend}] : [];
    	      self._onfade = o.onfade ? [{fn: o.onfade}] : [];
    	      self._onload = o.onload ? [{fn: o.onload}] : [];
    	      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];
    	      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];
    	      self._onpause = o.onpause ? [{fn: o.onpause}] : [];
    	      self._onplay = o.onplay ? [{fn: o.onplay}] : [];
    	      self._onstop = o.onstop ? [{fn: o.onstop}] : [];
    	      self._onmute = o.onmute ? [{fn: o.onmute}] : [];
    	      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];
    	      self._onrate = o.onrate ? [{fn: o.onrate}] : [];
    	      self._onseek = o.onseek ? [{fn: o.onseek}] : [];
    	      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];
    	      self._onresume = [];

    	      // Web Audio or HTML5 Audio?
    	      self._webAudio = Howler.usingWebAudio && !self._html5;

    	      // Automatically try to enable audio.
    	      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {
    	        Howler._unlockAudio();
    	      }

    	      // Keep track of this Howl group in the global controller.
    	      Howler._howls.push(self);

    	      // If they selected autoplay, add a play event to the load queue.
    	      if (self._autoplay) {
    	        self._queue.push({
    	          event: 'play',
    	          action: function() {
    	            self.play();
    	          }
    	        });
    	      }

    	      // Load the source file unless otherwise specified.
    	      if (self._preload && self._preload !== 'none') {
    	        self.load();
    	      }

    	      return self;
    	    },

    	    /**
    	     * Load the audio file.
    	     * @return {Howler}
    	     */
    	    load: function() {
    	      var self = this;
    	      var url = null;

    	      // If no audio is available, quit immediately.
    	      if (Howler.noAudio) {
    	        self._emit('loaderror', null, 'No audio support.');
    	        return;
    	      }

    	      // Make sure our source is in an array.
    	      if (typeof self._src === 'string') {
    	        self._src = [self._src];
    	      }

    	      // Loop through the sources and pick the first one that is compatible.
    	      for (var i=0; i<self._src.length; i++) {
    	        var ext, str;

    	        if (self._format && self._format[i]) {
    	          // If an extension was specified, use that instead.
    	          ext = self._format[i];
    	        } else {
    	          // Make sure the source is a string.
    	          str = self._src[i];
    	          if (typeof str !== 'string') {
    	            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');
    	            continue;
    	          }

    	          // Extract the file extension from the URL or base64 data URI.
    	          ext = /^data:audio\/([^;,]+);/i.exec(str);
    	          if (!ext) {
    	            ext = /\.([^.]+)$/.exec(str.split('?', 1)[0]);
    	          }

    	          if (ext) {
    	            ext = ext[1].toLowerCase();
    	          }
    	        }

    	        // Log a warning if no extension was found.
    	        if (!ext) {
    	          console.warn('No file extension was found. Consider using the "format" property or specify an extension.');
    	        }

    	        // Check if this extension is available.
    	        if (ext && Howler.codecs(ext)) {
    	          url = self._src[i];
    	          break;
    	        }
    	      }

    	      if (!url) {
    	        self._emit('loaderror', null, 'No codec support for selected audio sources.');
    	        return;
    	      }

    	      self._src = url;
    	      self._state = 'loading';

    	      // If the hosting page is HTTPS and the source isn't,
    	      // drop down to HTML5 Audio to avoid Mixed Content errors.
    	      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {
    	        self._html5 = true;
    	        self._webAudio = false;
    	      }

    	      // Create a new sound object and add it to the pool.
    	      new Sound(self);

    	      // Load and decode the audio data for playback.
    	      if (self._webAudio) {
    	        loadBuffer(self);
    	      }

    	      return self;
    	    },

    	    /**
    	     * Play a sound or resume previous playback.
    	     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.
    	     * @param  {Boolean} internal Internal Use: true prevents event firing.
    	     * @return {Number}          Sound ID.
    	     */
    	    play: function(sprite, internal) {
    	      var self = this;
    	      var id = null;

    	      // Determine if a sprite, sound id or nothing was passed
    	      if (typeof sprite === 'number') {
    	        id = sprite;
    	        sprite = null;
    	      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {
    	        // If the passed sprite doesn't exist, do nothing.
    	        return null;
    	      } else if (typeof sprite === 'undefined') {
    	        // Use the default sound sprite (plays the full audio length).
    	        sprite = '__default';

    	        // Check if there is a single paused sound that isn't ended.
    	        // If there is, play that sound. If not, continue as usual.
    	        if (!self._playLock) {
    	          var num = 0;
    	          for (var i=0; i<self._sounds.length; i++) {
    	            if (self._sounds[i]._paused && !self._sounds[i]._ended) {
    	              num++;
    	              id = self._sounds[i]._id;
    	            }
    	          }

    	          if (num === 1) {
    	            sprite = null;
    	          } else {
    	            id = null;
    	          }
    	        }
    	      }

    	      // Get the selected node, or get one from the pool.
    	      var sound = id ? self._soundById(id) : self._inactiveSound();

    	      // If the sound doesn't exist, do nothing.
    	      if (!sound) {
    	        return null;
    	      }

    	      // Select the sprite definition.
    	      if (id && !sprite) {
    	        sprite = sound._sprite || '__default';
    	      }

    	      // If the sound hasn't loaded, we must wait to get the audio's duration.
    	      // We also need to wait to make sure we don't run into race conditions with
    	      // the order of function calls.
    	      if (self._state !== 'loaded') {
    	        // Set the sprite value on this sound.
    	        sound._sprite = sprite;

    	        // Mark this sound as not ended in case another sound is played before this one loads.
    	        sound._ended = false;

    	        // Add the sound to the queue to be played on load.
    	        var soundId = sound._id;
    	        self._queue.push({
    	          event: 'play',
    	          action: function() {
    	            self.play(soundId);
    	          }
    	        });

    	        return soundId;
    	      }

    	      // Don't play the sound if an id was passed and it is already playing.
    	      if (id && !sound._paused) {
    	        // Trigger the play event, in order to keep iterating through queue.
    	        if (!internal) {
    	          self._loadQueue('play');
    	        }

    	        return sound._id;
    	      }

    	      // Make sure the AudioContext isn't suspended, and resume it if it is.
    	      if (self._webAudio) {
    	        Howler._autoResume();
    	      }

    	      // Determine how long to play for and where to start playing.
    	      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);
    	      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);
    	      var timeout = (duration * 1000) / Math.abs(sound._rate);
    	      var start = self._sprite[sprite][0] / 1000;
    	      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;
    	      sound._sprite = sprite;

    	      // Mark the sound as ended instantly so that this async playback
    	      // doesn't get grabbed by another call to play while this one waits to start.
    	      sound._ended = false;

    	      // Update the parameters of the sound.
    	      var setParams = function() {
    	        sound._paused = false;
    	        sound._seek = seek;
    	        sound._start = start;
    	        sound._stop = stop;
    	        sound._loop = !!(sound._loop || self._sprite[sprite][2]);
    	      };

    	      // End the sound instantly if seek is at the end.
    	      if (seek >= stop) {
    	        self._ended(sound);
    	        return;
    	      }

    	      // Begin the actual playback.
    	      var node = sound._node;
    	      if (self._webAudio) {
    	        // Fire this when the sound is ready to play to begin Web Audio playback.
    	        var playWebAudio = function() {
    	          self._playLock = false;
    	          setParams();
    	          self._refreshBuffer(sound);

    	          // Setup the playback params.
    	          var vol = (sound._muted || self._muted) ? 0 : sound._volume;
    	          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);
    	          sound._playStart = Howler.ctx.currentTime;

    	          // Play the sound using the supported method.
    	          if (typeof node.bufferSource.start === 'undefined') {
    	            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);
    	          } else {
    	            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);
    	          }

    	          // Start a new timer if none is present.
    	          if (timeout !== Infinity) {
    	            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
    	          }

    	          if (!internal) {
    	            setTimeout(function() {
    	              self._emit('play', sound._id);
    	              self._loadQueue();
    	            }, 0);
    	          }
    	        };

    	        if (Howler.state === 'running' && Howler.ctx.state !== 'interrupted') {
    	          playWebAudio();
    	        } else {
    	          self._playLock = true;

    	          // Wait for the audio context to resume before playing.
    	          self.once('resume', playWebAudio);

    	          // Cancel the end timer.
    	          self._clearTimer(sound._id);
    	        }
    	      } else {
    	        // Fire this when the sound is ready to play to begin HTML5 Audio playback.
    	        var playHtml5 = function() {
    	          node.currentTime = seek;
    	          node.muted = sound._muted || self._muted || Howler._muted || node.muted;
    	          node.volume = sound._volume * Howler.volume();
    	          node.playbackRate = sound._rate;

    	          // Some browsers will throw an error if this is called without user interaction.
    	          try {
    	            var play = node.play();

    	            // Support older browsers that don't support promises, and thus don't have this issue.
    	            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {
    	              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().
    	              self._playLock = true;

    	              // Set param values immediately.
    	              setParams();

    	              // Releases the lock and executes queued actions.
    	              play
    	                .then(function() {
    	                  self._playLock = false;
    	                  node._unlocked = true;
    	                  if (!internal) {
    	                    self._emit('play', sound._id);
    	                  } else {
    	                    self._loadQueue();
    	                  }
    	                })
    	                .catch(function() {
    	                  self._playLock = false;
    	                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +
    	                    'on mobile devices and Chrome where playback was not within a user interaction.');

    	                  // Reset the ended and paused values.
    	                  sound._ended = true;
    	                  sound._paused = true;
    	                });
    	            } else if (!internal) {
    	              self._playLock = false;
    	              setParams();
    	              self._emit('play', sound._id);
    	            }

    	            // Setting rate before playing won't work in IE, so we set it again here.
    	            node.playbackRate = sound._rate;

    	            // If the node is still paused, then we can assume there was a playback issue.
    	            if (node.paused) {
    	              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +
    	                'on mobile devices and Chrome where playback was not within a user interaction.');
    	              return;
    	            }

    	            // Setup the end timer on sprites or listen for the ended event.
    	            if (sprite !== '__default' || sound._loop) {
    	              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
    	            } else {
    	              self._endTimers[sound._id] = function() {
    	                // Fire ended on this audio node.
    	                self._ended(sound);

    	                // Clear this listener.
    	                node.removeEventListener('ended', self._endTimers[sound._id], false);
    	              };
    	              node.addEventListener('ended', self._endTimers[sound._id], false);
    	            }
    	          } catch (err) {
    	            self._emit('playerror', sound._id, err);
    	          }
    	        };

    	        // If this is streaming audio, make sure the src is set and load again.
    	        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {
    	          node.src = self._src;
    	          node.load();
    	        }

    	        // Play immediately if ready, or wait for the 'canplaythrough'e vent.
    	        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);
    	        if (node.readyState >= 3 || loadedNoReadyState) {
    	          playHtml5();
    	        } else {
    	          self._playLock = true;
    	          self._state = 'loading';

    	          var listener = function() {
    	            self._state = 'loaded';
    	            
    	            // Begin playback.
    	            playHtml5();

    	            // Clear this listener.
    	            node.removeEventListener(Howler._canPlayEvent, listener, false);
    	          };
    	          node.addEventListener(Howler._canPlayEvent, listener, false);

    	          // Cancel the end timer.
    	          self._clearTimer(sound._id);
    	        }
    	      }

    	      return sound._id;
    	    },

    	    /**
    	     * Pause playback and save current position.
    	     * @param  {Number} id The sound ID (empty to pause all in group).
    	     * @return {Howl}
    	     */
    	    pause: function(id) {
    	      var self = this;

    	      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.
    	      if (self._state !== 'loaded' || self._playLock) {
    	        self._queue.push({
    	          event: 'pause',
    	          action: function() {
    	            self.pause(id);
    	          }
    	        });

    	        return self;
    	      }

    	      // If no id is passed, get all ID's to be paused.
    	      var ids = self._getSoundIds(id);

    	      for (var i=0; i<ids.length; i++) {
    	        // Clear the end timer.
    	        self._clearTimer(ids[i]);

    	        // Get the sound.
    	        var sound = self._soundById(ids[i]);

    	        if (sound && !sound._paused) {
    	          // Reset the seek position.
    	          sound._seek = self.seek(ids[i]);
    	          sound._rateSeek = 0;
    	          sound._paused = true;

    	          // Stop currently running fades.
    	          self._stopFade(ids[i]);

    	          if (sound._node) {
    	            if (self._webAudio) {
    	              // Make sure the sound has been created.
    	              if (!sound._node.bufferSource) {
    	                continue;
    	              }

    	              if (typeof sound._node.bufferSource.stop === 'undefined') {
    	                sound._node.bufferSource.noteOff(0);
    	              } else {
    	                sound._node.bufferSource.stop(0);
    	              }

    	              // Clean up the buffer source.
    	              self._cleanBuffer(sound._node);
    	            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {
    	              sound._node.pause();
    	            }
    	          }
    	        }

    	        // Fire the pause event, unless `true` is passed as the 2nd argument.
    	        if (!arguments[1]) {
    	          self._emit('pause', sound ? sound._id : null);
    	        }
    	      }

    	      return self;
    	    },

    	    /**
    	     * Stop playback and reset to start.
    	     * @param  {Number} id The sound ID (empty to stop all in group).
    	     * @param  {Boolean} internal Internal Use: true prevents event firing.
    	     * @return {Howl}
    	     */
    	    stop: function(id, internal) {
    	      var self = this;

    	      // If the sound hasn't loaded, add it to the load queue to stop when capable.
    	      if (self._state !== 'loaded' || self._playLock) {
    	        self._queue.push({
    	          event: 'stop',
    	          action: function() {
    	            self.stop(id);
    	          }
    	        });

    	        return self;
    	      }

    	      // If no id is passed, get all ID's to be stopped.
    	      var ids = self._getSoundIds(id);

    	      for (var i=0; i<ids.length; i++) {
    	        // Clear the end timer.
    	        self._clearTimer(ids[i]);

    	        // Get the sound.
    	        var sound = self._soundById(ids[i]);

    	        if (sound) {
    	          // Reset the seek position.
    	          sound._seek = sound._start || 0;
    	          sound._rateSeek = 0;
    	          sound._paused = true;
    	          sound._ended = true;

    	          // Stop currently running fades.
    	          self._stopFade(ids[i]);

    	          if (sound._node) {
    	            if (self._webAudio) {
    	              // Make sure the sound's AudioBufferSourceNode has been created.
    	              if (sound._node.bufferSource) {
    	                if (typeof sound._node.bufferSource.stop === 'undefined') {
    	                  sound._node.bufferSource.noteOff(0);
    	                } else {
    	                  sound._node.bufferSource.stop(0);
    	                }

    	                // Clean up the buffer source.
    	                self._cleanBuffer(sound._node);
    	              }
    	            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {
    	              sound._node.currentTime = sound._start || 0;
    	              sound._node.pause();

    	              // If this is a live stream, stop download once the audio is stopped.
    	              if (sound._node.duration === Infinity) {
    	                self._clearSound(sound._node);
    	              }
    	            }
    	          }

    	          if (!internal) {
    	            self._emit('stop', sound._id);
    	          }
    	        }
    	      }

    	      return self;
    	    },

    	    /**
    	     * Mute/unmute a single sound or all sounds in this Howl group.
    	     * @param  {Boolean} muted Set to true to mute and false to unmute.
    	     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).
    	     * @return {Howl}
    	     */
    	    mute: function(muted, id) {
    	      var self = this;

    	      // If the sound hasn't loaded, add it to the load queue to mute when capable.
    	      if (self._state !== 'loaded'|| self._playLock) {
    	        self._queue.push({
    	          event: 'mute',
    	          action: function() {
    	            self.mute(muted, id);
    	          }
    	        });

    	        return self;
    	      }

    	      // If applying mute/unmute to all sounds, update the group's value.
    	      if (typeof id === 'undefined') {
    	        if (typeof muted === 'boolean') {
    	          self._muted = muted;
    	        } else {
    	          return self._muted;
    	        }
    	      }

    	      // If no id is passed, get all ID's to be muted.
    	      var ids = self._getSoundIds(id);

    	      for (var i=0; i<ids.length; i++) {
    	        // Get the sound.
    	        var sound = self._soundById(ids[i]);

    	        if (sound) {
    	          sound._muted = muted;

    	          // Cancel active fade and set the volume to the end value.
    	          if (sound._interval) {
    	            self._stopFade(sound._id);
    	          }

    	          if (self._webAudio && sound._node) {
    	            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);
    	          } else if (sound._node) {
    	            sound._node.muted = Howler._muted ? true : muted;
    	          }

    	          self._emit('mute', sound._id);
    	        }
    	      }

    	      return self;
    	    },

    	    /**
    	     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.
    	     *   volume() -> Returns the group's volume value.
    	     *   volume(id) -> Returns the sound id's current volume.
    	     *   volume(vol) -> Sets the volume of all sounds in this Howl group.
    	     *   volume(vol, id) -> Sets the volume of passed sound id.
    	     * @return {Howl/Number} Returns self or current volume.
    	     */
    	    volume: function() {
    	      var self = this;
    	      var args = arguments;
    	      var vol, id;

    	      // Determine the values based on arguments.
    	      if (args.length === 0) {
    	        // Return the value of the groups' volume.
    	        return self._volume;
    	      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {
    	        // First check if this is an ID, and if not, assume it is a new volume.
    	        var ids = self._getSoundIds();
    	        var index = ids.indexOf(args[0]);
    	        if (index >= 0) {
    	          id = parseInt(args[0], 10);
    	        } else {
    	          vol = parseFloat(args[0]);
    	        }
    	      } else if (args.length >= 2) {
    	        vol = parseFloat(args[0]);
    	        id = parseInt(args[1], 10);
    	      }

    	      // Update the volume or return the current volume.
    	      var sound;
    	      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {
    	        // If the sound hasn't loaded, add it to the load queue to change volume when capable.
    	        if (self._state !== 'loaded'|| self._playLock) {
    	          self._queue.push({
    	            event: 'volume',
    	            action: function() {
    	              self.volume.apply(self, args);
    	            }
    	          });

    	          return self;
    	        }

    	        // Set the group volume.
    	        if (typeof id === 'undefined') {
    	          self._volume = vol;
    	        }

    	        // Update one or all volumes.
    	        id = self._getSoundIds(id);
    	        for (var i=0; i<id.length; i++) {
    	          // Get the sound.
    	          sound = self._soundById(id[i]);

    	          if (sound) {
    	            sound._volume = vol;

    	            // Stop currently running fades.
    	            if (!args[2]) {
    	              self._stopFade(id[i]);
    	            }

    	            if (self._webAudio && sound._node && !sound._muted) {
    	              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);
    	            } else if (sound._node && !sound._muted) {
    	              sound._node.volume = vol * Howler.volume();
    	            }

    	            self._emit('volume', sound._id);
    	          }
    	        }
    	      } else {
    	        sound = id ? self._soundById(id) : self._sounds[0];
    	        return sound ? sound._volume : 0;
    	      }

    	      return self;
    	    },

    	    /**
    	     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).
    	     * @param  {Number} from The value to fade from (0.0 to 1.0).
    	     * @param  {Number} to   The volume to fade to (0.0 to 1.0).
    	     * @param  {Number} len  Time in milliseconds to fade.
    	     * @param  {Number} id   The sound id (omit to fade all sounds).
    	     * @return {Howl}
    	     */
    	    fade: function(from, to, len, id) {
    	      var self = this;

    	      // If the sound hasn't loaded, add it to the load queue to fade when capable.
    	      if (self._state !== 'loaded' || self._playLock) {
    	        self._queue.push({
    	          event: 'fade',
    	          action: function() {
    	            self.fade(from, to, len, id);
    	          }
    	        });

    	        return self;
    	      }

    	      // Make sure the to/from/len values are numbers.
    	      from = Math.min(Math.max(0, parseFloat(from)), 1);
    	      to = Math.min(Math.max(0, parseFloat(to)), 1);
    	      len = parseFloat(len);

    	      // Set the volume to the start position.
    	      self.volume(from, id);

    	      // Fade the volume of one or all sounds.
    	      var ids = self._getSoundIds(id);
    	      for (var i=0; i<ids.length; i++) {
    	        // Get the sound.
    	        var sound = self._soundById(ids[i]);

    	        // Create a linear fade or fall back to timeouts with HTML5 Audio.
    	        if (sound) {
    	          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).
    	          if (!id) {
    	            self._stopFade(ids[i]);
    	          }

    	          // If we are using Web Audio, let the native methods do the actual fade.
    	          if (self._webAudio && !sound._muted) {
    	            var currentTime = Howler.ctx.currentTime;
    	            var end = currentTime + (len / 1000);
    	            sound._volume = from;
    	            sound._node.gain.setValueAtTime(from, currentTime);
    	            sound._node.gain.linearRampToValueAtTime(to, end);
    	          }

    	          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');
    	        }
    	      }

    	      return self;
    	    },

    	    /**
    	     * Starts the internal interval to fade a sound.
    	     * @param  {Object} sound Reference to sound to fade.
    	     * @param  {Number} from The value to fade from (0.0 to 1.0).
    	     * @param  {Number} to   The volume to fade to (0.0 to 1.0).
    	     * @param  {Number} len  Time in milliseconds to fade.
    	     * @param  {Number} id   The sound id to fade.
    	     * @param  {Boolean} isGroup   If true, set the volume on the group.
    	     */
    	    _startFadeInterval: function(sound, from, to, len, id, isGroup) {
    	      var self = this;
    	      var vol = from;
    	      var diff = to - from;
    	      var steps = Math.abs(diff / 0.01);
    	      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);
    	      var lastTick = Date.now();

    	      // Store the value being faded to.
    	      sound._fadeTo = to;

    	      // Update the volume value on each interval tick.
    	      sound._interval = setInterval(function() {
    	        // Update the volume based on the time since the last tick.
    	        var tick = (Date.now() - lastTick) / len;
    	        lastTick = Date.now();
    	        vol += diff * tick;

    	        // Round to within 2 decimal points.
    	        vol = Math.round(vol * 100) / 100;

    	        // Make sure the volume is in the right bounds.
    	        if (diff < 0) {
    	          vol = Math.max(to, vol);
    	        } else {
    	          vol = Math.min(to, vol);
    	        }

    	        // Change the volume.
    	        if (self._webAudio) {
    	          sound._volume = vol;
    	        } else {
    	          self.volume(vol, sound._id, true);
    	        }

    	        // Set the group's volume.
    	        if (isGroup) {
    	          self._volume = vol;
    	        }

    	        // When the fade is complete, stop it and fire event.
    	        if ((to < from && vol <= to) || (to > from && vol >= to)) {
    	          clearInterval(sound._interval);
    	          sound._interval = null;
    	          sound._fadeTo = null;
    	          self.volume(to, sound._id);
    	          self._emit('fade', sound._id);
    	        }
    	      }, stepLen);
    	    },

    	    /**
    	     * Internal method that stops the currently playing fade when
    	     * a new fade starts, volume is changed or the sound is stopped.
    	     * @param  {Number} id The sound id.
    	     * @return {Howl}
    	     */
    	    _stopFade: function(id) {
    	      var self = this;
    	      var sound = self._soundById(id);

    	      if (sound && sound._interval) {
    	        if (self._webAudio) {
    	          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);
    	        }

    	        clearInterval(sound._interval);
    	        sound._interval = null;
    	        self.volume(sound._fadeTo, id);
    	        sound._fadeTo = null;
    	        self._emit('fade', id);
    	      }

    	      return self;
    	    },

    	    /**
    	     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.
    	     *   loop() -> Returns the group's loop value.
    	     *   loop(id) -> Returns the sound id's loop value.
    	     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.
    	     *   loop(loop, id) -> Sets the loop value of passed sound id.
    	     * @return {Howl/Boolean} Returns self or current loop value.
    	     */
    	    loop: function() {
    	      var self = this;
    	      var args = arguments;
    	      var loop, id, sound;

    	      // Determine the values for loop and id.
    	      if (args.length === 0) {
    	        // Return the grou's loop value.
    	        return self._loop;
    	      } else if (args.length === 1) {
    	        if (typeof args[0] === 'boolean') {
    	          loop = args[0];
    	          self._loop = loop;
    	        } else {
    	          // Return this sound's loop value.
    	          sound = self._soundById(parseInt(args[0], 10));
    	          return sound ? sound._loop : false;
    	        }
    	      } else if (args.length === 2) {
    	        loop = args[0];
    	        id = parseInt(args[1], 10);
    	      }

    	      // If no id is passed, get all ID's to be looped.
    	      var ids = self._getSoundIds(id);
    	      for (var i=0; i<ids.length; i++) {
    	        sound = self._soundById(ids[i]);

    	        if (sound) {
    	          sound._loop = loop;
    	          if (self._webAudio && sound._node && sound._node.bufferSource) {
    	            sound._node.bufferSource.loop = loop;
    	            if (loop) {
    	              sound._node.bufferSource.loopStart = sound._start || 0;
    	              sound._node.bufferSource.loopEnd = sound._stop;

    	              // If playing, restart playback to ensure looping updates.
    	              if (self.playing(ids[i])) {
    	                self.pause(ids[i], true);
    	                self.play(ids[i], true);
    	              }
    	            }
    	          }
    	        }
    	      }

    	      return self;
    	    },

    	    /**
    	     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.
    	     *   rate() -> Returns the first sound node's current playback rate.
    	     *   rate(id) -> Returns the sound id's current playback rate.
    	     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.
    	     *   rate(rate, id) -> Sets the playback rate of passed sound id.
    	     * @return {Howl/Number} Returns self or the current playback rate.
    	     */
    	    rate: function() {
    	      var self = this;
    	      var args = arguments;
    	      var rate, id;

    	      // Determine the values based on arguments.
    	      if (args.length === 0) {
    	        // We will simply return the current rate of the first node.
    	        id = self._sounds[0]._id;
    	      } else if (args.length === 1) {
    	        // First check if this is an ID, and if not, assume it is a new rate value.
    	        var ids = self._getSoundIds();
    	        var index = ids.indexOf(args[0]);
    	        if (index >= 0) {
    	          id = parseInt(args[0], 10);
    	        } else {
    	          rate = parseFloat(args[0]);
    	        }
    	      } else if (args.length === 2) {
    	        rate = parseFloat(args[0]);
    	        id = parseInt(args[1], 10);
    	      }

    	      // Update the playback rate or return the current value.
    	      var sound;
    	      if (typeof rate === 'number') {
    	        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.
    	        if (self._state !== 'loaded' || self._playLock) {
    	          self._queue.push({
    	            event: 'rate',
    	            action: function() {
    	              self.rate.apply(self, args);
    	            }
    	          });

    	          return self;
    	        }

    	        // Set the group rate.
    	        if (typeof id === 'undefined') {
    	          self._rate = rate;
    	        }

    	        // Update one or all volumes.
    	        id = self._getSoundIds(id);
    	        for (var i=0; i<id.length; i++) {
    	          // Get the sound.
    	          sound = self._soundById(id[i]);

    	          if (sound) {
    	            // Keep track of our position when the rate changed and update the playback
    	            // start position so we can properly adjust the seek position for time elapsed.
    	            if (self.playing(id[i])) {
    	              sound._rateSeek = self.seek(id[i]);
    	              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;
    	            }
    	            sound._rate = rate;

    	            // Change the playback rate.
    	            if (self._webAudio && sound._node && sound._node.bufferSource) {
    	              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);
    	            } else if (sound._node) {
    	              sound._node.playbackRate = rate;
    	            }

    	            // Reset the timers.
    	            var seek = self.seek(id[i]);
    	            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;
    	            var timeout = (duration * 1000) / Math.abs(sound._rate);

    	            // Start a new end timer if sound is already playing.
    	            if (self._endTimers[id[i]] || !sound._paused) {
    	              self._clearTimer(id[i]);
    	              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);
    	            }

    	            self._emit('rate', sound._id);
    	          }
    	        }
    	      } else {
    	        sound = self._soundById(id);
    	        return sound ? sound._rate : self._rate;
    	      }

    	      return self;
    	    },

    	    /**
    	     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.
    	     *   seek() -> Returns the first sound node's current seek position.
    	     *   seek(id) -> Returns the sound id's current seek position.
    	     *   seek(seek) -> Sets the seek position of the first sound node.
    	     *   seek(seek, id) -> Sets the seek position of passed sound id.
    	     * @return {Howl/Number} Returns self or the current seek position.
    	     */
    	    seek: function() {
    	      var self = this;
    	      var args = arguments;
    	      var seek, id;

    	      // Determine the values based on arguments.
    	      if (args.length === 0) {
    	        // We will simply return the current position of the first node.
    	        if (self._sounds.length) {
    	          id = self._sounds[0]._id;
    	        }
    	      } else if (args.length === 1) {
    	        // First check if this is an ID, and if not, assume it is a new seek position.
    	        var ids = self._getSoundIds();
    	        var index = ids.indexOf(args[0]);
    	        if (index >= 0) {
    	          id = parseInt(args[0], 10);
    	        } else if (self._sounds.length) {
    	          id = self._sounds[0]._id;
    	          seek = parseFloat(args[0]);
    	        }
    	      } else if (args.length === 2) {
    	        seek = parseFloat(args[0]);
    	        id = parseInt(args[1], 10);
    	      }

    	      // If there is no ID, bail out.
    	      if (typeof id === 'undefined') {
    	        return 0;
    	      }

    	      // If the sound hasn't loaded, add it to the load queue to seek when capable.
    	      if (typeof seek === 'number' && (self._state !== 'loaded' || self._playLock)) {
    	        self._queue.push({
    	          event: 'seek',
    	          action: function() {
    	            self.seek.apply(self, args);
    	          }
    	        });

    	        return self;
    	      }

    	      // Get the sound.
    	      var sound = self._soundById(id);

    	      if (sound) {
    	        if (typeof seek === 'number' && seek >= 0) {
    	          // Pause the sound and update position for restarting playback.
    	          var playing = self.playing(id);
    	          if (playing) {
    	            self.pause(id, true);
    	          }

    	          // Move the position of the track and cancel timer.
    	          sound._seek = seek;
    	          sound._ended = false;
    	          self._clearTimer(id);

    	          // Update the seek position for HTML5 Audio.
    	          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {
    	            sound._node.currentTime = seek;
    	          }

    	          // Seek and emit when ready.
    	          var seekAndEmit = function() {
    	            // Restart the playback if the sound was playing.
    	            if (playing) {
    	              self.play(id, true);
    	            }

    	            self._emit('seek', id);
    	          };

    	          // Wait for the play lock to be unset before emitting (HTML5 Audio).
    	          if (playing && !self._webAudio) {
    	            var emitSeek = function() {
    	              if (!self._playLock) {
    	                seekAndEmit();
    	              } else {
    	                setTimeout(emitSeek, 0);
    	              }
    	            };
    	            setTimeout(emitSeek, 0);
    	          } else {
    	            seekAndEmit();
    	          }
    	        } else {
    	          if (self._webAudio) {
    	            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;
    	            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;
    	            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));
    	          } else {
    	            return sound._node.currentTime;
    	          }
    	        }
    	      }

    	      return self;
    	    },

    	    /**
    	     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.
    	     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.
    	     * @return {Boolean} True if playing and false if not.
    	     */
    	    playing: function(id) {
    	      var self = this;

    	      // Check the passed sound ID (if any).
    	      if (typeof id === 'number') {
    	        var sound = self._soundById(id);
    	        return sound ? !sound._paused : false;
    	      }

    	      // Otherwise, loop through all sounds and check if any are playing.
    	      for (var i=0; i<self._sounds.length; i++) {
    	        if (!self._sounds[i]._paused) {
    	          return true;
    	        }
    	      }

    	      return false;
    	    },

    	    /**
    	     * Get the duration of this sound. Passing a sound id will return the sprite duration.
    	     * @param  {Number} id The sound id to check. If none is passed, return full source duration.
    	     * @return {Number} Audio duration in seconds.
    	     */
    	    duration: function(id) {
    	      var self = this;
    	      var duration = self._duration;

    	      // If we pass an ID, get the sound and return the sprite length.
    	      var sound = self._soundById(id);
    	      if (sound) {
    	        duration = self._sprite[sound._sprite][1] / 1000;
    	      }

    	      return duration;
    	    },

    	    /**
    	     * Returns the current loaded state of this Howl.
    	     * @return {String} 'unloaded', 'loading', 'loaded'
    	     */
    	    state: function() {
    	      return this._state;
    	    },

    	    /**
    	     * Unload and destroy the current Howl object.
    	     * This will immediately stop all sound instances attached to this group.
    	     */
    	    unload: function() {
    	      var self = this;

    	      // Stop playing any active sounds.
    	      var sounds = self._sounds;
    	      for (var i=0; i<sounds.length; i++) {
    	        // Stop the sound if it is currently playing.
    	        if (!sounds[i]._paused) {
    	          self.stop(sounds[i]._id);
    	        }

    	        // Remove the source or disconnect.
    	        if (!self._webAudio) {
    	          // Set the source to 0-second silence to stop any downloading (except in IE).
    	          self._clearSound(sounds[i]._node);

    	          // Remove any event listeners.
    	          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);
    	          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);
    	          sounds[i]._node.removeEventListener('ended', sounds[i]._endFn, false);

    	          // Release the Audio object back to the pool.
    	          Howler._releaseHtml5Audio(sounds[i]._node);
    	        }

    	        // Empty out all of the nodes.
    	        delete sounds[i]._node;

    	        // Make sure all timers are cleared out.
    	        self._clearTimer(sounds[i]._id);
    	      }

    	      // Remove the references in the global Howler object.
    	      var index = Howler._howls.indexOf(self);
    	      if (index >= 0) {
    	        Howler._howls.splice(index, 1);
    	      }

    	      // Delete this sound from the cache (if no other Howl is using it).
    	      var remCache = true;
    	      for (i=0; i<Howler._howls.length; i++) {
    	        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {
    	          remCache = false;
    	          break;
    	        }
    	      }

    	      if (cache && remCache) {
    	        delete cache[self._src];
    	      }

    	      // Clear global errors.
    	      Howler.noAudio = false;

    	      // Clear out `self`.
    	      self._state = 'unloaded';
    	      self._sounds = [];
    	      self = null;

    	      return null;
    	    },

    	    /**
    	     * Listen to a custom event.
    	     * @param  {String}   event Event name.
    	     * @param  {Function} fn    Listener to call.
    	     * @param  {Number}   id    (optional) Only listen to events for this sound.
    	     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.
    	     * @return {Howl}
    	     */
    	    on: function(event, fn, id, once) {
    	      var self = this;
    	      var events = self['_on' + event];

    	      if (typeof fn === 'function') {
    	        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});
    	      }

    	      return self;
    	    },

    	    /**
    	     * Remove a custom event. Call without parameters to remove all events.
    	     * @param  {String}   event Event name.
    	     * @param  {Function} fn    Listener to remove. Leave empty to remove all.
    	     * @param  {Number}   id    (optional) Only remove events for this sound.
    	     * @return {Howl}
    	     */
    	    off: function(event, fn, id) {
    	      var self = this;
    	      var events = self['_on' + event];
    	      var i = 0;

    	      // Allow passing just an event and ID.
    	      if (typeof fn === 'number') {
    	        id = fn;
    	        fn = null;
    	      }

    	      if (fn || id) {
    	        // Loop through event store and remove the passed function.
    	        for (i=0; i<events.length; i++) {
    	          var isId = (id === events[i].id);
    	          if (fn === events[i].fn && isId || !fn && isId) {
    	            events.splice(i, 1);
    	            break;
    	          }
    	        }
    	      } else if (event) {
    	        // Clear out all events of this type.
    	        self['_on' + event] = [];
    	      } else {
    	        // Clear out all events of every type.
    	        var keys = Object.keys(self);
    	        for (i=0; i<keys.length; i++) {
    	          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {
    	            self[keys[i]] = [];
    	          }
    	        }
    	      }

    	      return self;
    	    },

    	    /**
    	     * Listen to a custom event and remove it once fired.
    	     * @param  {String}   event Event name.
    	     * @param  {Function} fn    Listener to call.
    	     * @param  {Number}   id    (optional) Only listen to events for this sound.
    	     * @return {Howl}
    	     */
    	    once: function(event, fn, id) {
    	      var self = this;

    	      // Setup the event listener.
    	      self.on(event, fn, id, 1);

    	      return self;
    	    },

    	    /**
    	     * Emit all events of a specific type and pass the sound id.
    	     * @param  {String} event Event name.
    	     * @param  {Number} id    Sound ID.
    	     * @param  {Number} msg   Message to go with event.
    	     * @return {Howl}
    	     */
    	    _emit: function(event, id, msg) {
    	      var self = this;
    	      var events = self['_on' + event];

    	      // Loop through event store and fire all functions.
    	      for (var i=events.length-1; i>=0; i--) {
    	        // Only fire the listener if the correct ID is used.
    	        if (!events[i].id || events[i].id === id || event === 'load') {
    	          setTimeout(function(fn) {
    	            fn.call(this, id, msg);
    	          }.bind(self, events[i].fn), 0);

    	          // If this event was setup with `once`, remove it.
    	          if (events[i].once) {
    	            self.off(event, events[i].fn, events[i].id);
    	          }
    	        }
    	      }

    	      // Pass the event type into load queue so that it can continue stepping.
    	      self._loadQueue(event);

    	      return self;
    	    },

    	    /**
    	     * Queue of actions initiated before the sound has loaded.
    	     * These will be called in sequence, with the next only firing
    	     * after the previous has finished executing (even if async like play).
    	     * @return {Howl}
    	     */
    	    _loadQueue: function(event) {
    	      var self = this;

    	      if (self._queue.length > 0) {
    	        var task = self._queue[0];

    	        // Remove this task if a matching event was passed.
    	        if (task.event === event) {
    	          self._queue.shift();
    	          self._loadQueue();
    	        }

    	        // Run the task if no event type is passed.
    	        if (!event) {
    	          task.action();
    	        }
    	      }

    	      return self;
    	    },

    	    /**
    	     * Fired when playback ends at the end of the duration.
    	     * @param  {Sound} sound The sound object to work with.
    	     * @return {Howl}
    	     */
    	    _ended: function(sound) {
    	      var self = this;
    	      var sprite = sound._sprite;

    	      // If we are using IE and there was network latency we may be clipping
    	      // audio before it completes playing. Lets check the node to make sure it
    	      // believes it has completed, before ending the playback.
    	      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {
    	        setTimeout(self._ended.bind(self, sound), 100);
    	        return self;
    	      }

    	      // Should this sound loop?
    	      var loop = !!(sound._loop || self._sprite[sprite][2]);

    	      // Fire the ended event.
    	      self._emit('end', sound._id);

    	      // Restart the playback for HTML5 Audio loop.
    	      if (!self._webAudio && loop) {
    	        self.stop(sound._id, true).play(sound._id);
    	      }

    	      // Restart this timer if on a Web Audio loop.
    	      if (self._webAudio && loop) {
    	        self._emit('play', sound._id);
    	        sound._seek = sound._start || 0;
    	        sound._rateSeek = 0;
    	        sound._playStart = Howler.ctx.currentTime;

    	        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);
    	        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
    	      }

    	      // Mark the node as paused.
    	      if (self._webAudio && !loop) {
    	        sound._paused = true;
    	        sound._ended = true;
    	        sound._seek = sound._start || 0;
    	        sound._rateSeek = 0;
    	        self._clearTimer(sound._id);

    	        // Clean up the buffer source.
    	        self._cleanBuffer(sound._node);

    	        // Attempt to auto-suspend AudioContext if no sounds are still playing.
    	        Howler._autoSuspend();
    	      }

    	      // When using a sprite, end the track.
    	      if (!self._webAudio && !loop) {
    	        self.stop(sound._id, true);
    	      }

    	      return self;
    	    },

    	    /**
    	     * Clear the end timer for a sound playback.
    	     * @param  {Number} id The sound ID.
    	     * @return {Howl}
    	     */
    	    _clearTimer: function(id) {
    	      var self = this;

    	      if (self._endTimers[id]) {
    	        // Clear the timeout or remove the ended listener.
    	        if (typeof self._endTimers[id] !== 'function') {
    	          clearTimeout(self._endTimers[id]);
    	        } else {
    	          var sound = self._soundById(id);
    	          if (sound && sound._node) {
    	            sound._node.removeEventListener('ended', self._endTimers[id], false);
    	          }
    	        }

    	        delete self._endTimers[id];
    	      }

    	      return self;
    	    },

    	    /**
    	     * Return the sound identified by this ID, or return null.
    	     * @param  {Number} id Sound ID
    	     * @return {Object}    Sound object or null.
    	     */
    	    _soundById: function(id) {
    	      var self = this;

    	      // Loop through all sounds and find the one with this ID.
    	      for (var i=0; i<self._sounds.length; i++) {
    	        if (id === self._sounds[i]._id) {
    	          return self._sounds[i];
    	        }
    	      }

    	      return null;
    	    },

    	    /**
    	     * Return an inactive sound from the pool or create a new one.
    	     * @return {Sound} Sound playback object.
    	     */
    	    _inactiveSound: function() {
    	      var self = this;

    	      self._drain();

    	      // Find the first inactive node to recycle.
    	      for (var i=0; i<self._sounds.length; i++) {
    	        if (self._sounds[i]._ended) {
    	          return self._sounds[i].reset();
    	        }
    	      }

    	      // If no inactive node was found, create a new one.
    	      return new Sound(self);
    	    },

    	    /**
    	     * Drain excess inactive sounds from the pool.
    	     */
    	    _drain: function() {
    	      var self = this;
    	      var limit = self._pool;
    	      var cnt = 0;
    	      var i = 0;

    	      // If there are less sounds than the max pool size, we are done.
    	      if (self._sounds.length < limit) {
    	        return;
    	      }

    	      // Count the number of inactive sounds.
    	      for (i=0; i<self._sounds.length; i++) {
    	        if (self._sounds[i]._ended) {
    	          cnt++;
    	        }
    	      }

    	      // Remove excess inactive sounds, going in reverse order.
    	      for (i=self._sounds.length - 1; i>=0; i--) {
    	        if (cnt <= limit) {
    	          return;
    	        }

    	        if (self._sounds[i]._ended) {
    	          // Disconnect the audio source when using Web Audio.
    	          if (self._webAudio && self._sounds[i]._node) {
    	            self._sounds[i]._node.disconnect(0);
    	          }

    	          // Remove sounds until we have the pool size.
    	          self._sounds.splice(i, 1);
    	          cnt--;
    	        }
    	      }
    	    },

    	    /**
    	     * Get all ID's from the sounds pool.
    	     * @param  {Number} id Only return one ID if one is passed.
    	     * @return {Array}    Array of IDs.
    	     */
    	    _getSoundIds: function(id) {
    	      var self = this;

    	      if (typeof id === 'undefined') {
    	        var ids = [];
    	        for (var i=0; i<self._sounds.length; i++) {
    	          ids.push(self._sounds[i]._id);
    	        }

    	        return ids;
    	      } else {
    	        return [id];
    	      }
    	    },

    	    /**
    	     * Load the sound back into the buffer source.
    	     * @param  {Sound} sound The sound object to work with.
    	     * @return {Howl}
    	     */
    	    _refreshBuffer: function(sound) {
    	      var self = this;

    	      // Setup the buffer source for playback.
    	      sound._node.bufferSource = Howler.ctx.createBufferSource();
    	      sound._node.bufferSource.buffer = cache[self._src];

    	      // Connect to the correct node.
    	      if (sound._panner) {
    	        sound._node.bufferSource.connect(sound._panner);
    	      } else {
    	        sound._node.bufferSource.connect(sound._node);
    	      }

    	      // Setup looping and playback rate.
    	      sound._node.bufferSource.loop = sound._loop;
    	      if (sound._loop) {
    	        sound._node.bufferSource.loopStart = sound._start || 0;
    	        sound._node.bufferSource.loopEnd = sound._stop || 0;
    	      }
    	      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);

    	      return self;
    	    },

    	    /**
    	     * Prevent memory leaks by cleaning up the buffer source after playback.
    	     * @param  {Object} node Sound's audio node containing the buffer source.
    	     * @return {Howl}
    	     */
    	    _cleanBuffer: function(node) {
    	      var self = this;
    	      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;

    	      if (Howler._scratchBuffer && node.bufferSource) {
    	        node.bufferSource.onended = null;
    	        node.bufferSource.disconnect(0);
    	        if (isIOS) {
    	          try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}
    	        }
    	      }
    	      node.bufferSource = null;

    	      return self;
    	    },

    	    /**
    	     * Set the source to a 0-second silence to stop any downloading (except in IE).
    	     * @param  {Object} node Audio node to clear.
    	     */
    	    _clearSound: function(node) {
    	      var checkIE = /MSIE |Trident\//.test(Howler._navigator && Howler._navigator.userAgent);
    	      if (!checkIE) {
    	        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';
    	      }
    	    }
    	  };

    	  /** Single Sound Methods **/
    	  /***************************************************************************/

    	  /**
    	   * Setup the sound object, which each node attached to a Howl group is contained in.
    	   * @param {Object} howl The Howl parent group.
    	   */
    	  var Sound = function(howl) {
    	    this._parent = howl;
    	    this.init();
    	  };
    	  Sound.prototype = {
    	    /**
    	     * Initialize a new Sound object.
    	     * @return {Sound}
    	     */
    	    init: function() {
    	      var self = this;
    	      var parent = self._parent;

    	      // Setup the default parameters.
    	      self._muted = parent._muted;
    	      self._loop = parent._loop;
    	      self._volume = parent._volume;
    	      self._rate = parent._rate;
    	      self._seek = 0;
    	      self._paused = true;
    	      self._ended = true;
    	      self._sprite = '__default';

    	      // Generate a unique ID for this sound.
    	      self._id = ++Howler._counter;

    	      // Add itself to the parent's pool.
    	      parent._sounds.push(self);

    	      // Create the new node.
    	      self.create();

    	      return self;
    	    },

    	    /**
    	     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.
    	     * @return {Sound}
    	     */
    	    create: function() {
    	      var self = this;
    	      var parent = self._parent;
    	      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;

    	      if (parent._webAudio) {
    	        // Create the gain node for controlling volume (the source will connect to this).
    	        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();
    	        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);
    	        self._node.paused = true;
    	        self._node.connect(Howler.masterGain);
    	      } else if (!Howler.noAudio) {
    	        // Get an unlocked Audio object from the pool.
    	        self._node = Howler._obtainHtml5Audio();

    	        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).
    	        self._errorFn = self._errorListener.bind(self);
    	        self._node.addEventListener('error', self._errorFn, false);

    	        // Listen for 'canplaythrough' event to let us know the sound is ready.
    	        self._loadFn = self._loadListener.bind(self);
    	        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);

    	        // Listen for the 'ended' event on the sound to account for edge-case where
    	        // a finite sound has a duration of Infinity.
    	        self._endFn = self._endListener.bind(self);
    	        self._node.addEventListener('ended', self._endFn, false);

    	        // Setup the new audio node.
    	        self._node.src = parent._src;
    	        self._node.preload = parent._preload === true ? 'auto' : parent._preload;
    	        self._node.volume = volume * Howler.volume();

    	        // Begin loading the source.
    	        self._node.load();
    	      }

    	      return self;
    	    },

    	    /**
    	     * Reset the parameters of this sound to the original state (for recycle).
    	     * @return {Sound}
    	     */
    	    reset: function() {
    	      var self = this;
    	      var parent = self._parent;

    	      // Reset all of the parameters of this sound.
    	      self._muted = parent._muted;
    	      self._loop = parent._loop;
    	      self._volume = parent._volume;
    	      self._rate = parent._rate;
    	      self._seek = 0;
    	      self._rateSeek = 0;
    	      self._paused = true;
    	      self._ended = true;
    	      self._sprite = '__default';

    	      // Generate a new ID so that it isn't confused with the previous sound.
    	      self._id = ++Howler._counter;

    	      return self;
    	    },

    	    /**
    	     * HTML5 Audio error listener callback.
    	     */
    	    _errorListener: function() {
    	      var self = this;

    	      // Fire an error event and pass back the code.
    	      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);

    	      // Clear the event listener.
    	      self._node.removeEventListener('error', self._errorFn, false);
    	    },

    	    /**
    	     * HTML5 Audio canplaythrough listener callback.
    	     */
    	    _loadListener: function() {
    	      var self = this;
    	      var parent = self._parent;

    	      // Round up the duration to account for the lower precision in HTML5 Audio.
    	      parent._duration = Math.ceil(self._node.duration * 10) / 10;

    	      // Setup a sprite if none is defined.
    	      if (Object.keys(parent._sprite).length === 0) {
    	        parent._sprite = {__default: [0, parent._duration * 1000]};
    	      }

    	      if (parent._state !== 'loaded') {
    	        parent._state = 'loaded';
    	        parent._emit('load');
    	        parent._loadQueue();
    	      }

    	      // Clear the event listener.
    	      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);
    	    },

    	    /**
    	     * HTML5 Audio ended listener callback.
    	     */
    	    _endListener: function() {
    	      var self = this;
    	      var parent = self._parent;

    	      // Only handle the `ended`` event if the duration is Infinity.
    	      if (parent._duration === Infinity) {
    	        // Update the parent duration to match the real audio duration.
    	        // Round up the duration to account for the lower precision in HTML5 Audio.
    	        parent._duration = Math.ceil(self._node.duration * 10) / 10;

    	        // Update the sprite that corresponds to the real duration.
    	        if (parent._sprite.__default[1] === Infinity) {
    	          parent._sprite.__default[1] = parent._duration * 1000;
    	        }

    	        // Run the regular ended method.
    	        parent._ended(self);
    	      }

    	      // Clear the event listener since the duration is now correct.
    	      self._node.removeEventListener('ended', self._endFn, false);
    	    }
    	  };

    	  /** Helper Methods **/
    	  /***************************************************************************/

    	  var cache = {};

    	  /**
    	   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).
    	   * @param  {Howl} self
    	   */
    	  var loadBuffer = function(self) {
    	    var url = self._src;

    	    // Check if the buffer has already been cached and use it instead.
    	    if (cache[url]) {
    	      // Set the duration from the cache.
    	      self._duration = cache[url].duration;

    	      // Load the sound into this Howl.
    	      loadSound(self);

    	      return;
    	    }

    	    if (/^data:[^;]+;base64,/.test(url)) {
    	      // Decode the base64 data URI without XHR, since some browsers don't support it.
    	      var data = atob(url.split(',')[1]);
    	      var dataView = new Uint8Array(data.length);
    	      for (var i=0; i<data.length; ++i) {
    	        dataView[i] = data.charCodeAt(i);
    	      }

    	      decodeAudioData(dataView.buffer, self);
    	    } else {
    	      // Load the buffer from the URL.
    	      var xhr = new XMLHttpRequest();
    	      xhr.open(self._xhr.method, url, true);
    	      xhr.withCredentials = self._xhr.withCredentials;
    	      xhr.responseType = 'arraybuffer';

    	      // Apply any custom headers to the request.
    	      if (self._xhr.headers) {
    	        Object.keys(self._xhr.headers).forEach(function(key) {
    	          xhr.setRequestHeader(key, self._xhr.headers[key]);
    	        });
    	      }

    	      xhr.onload = function() {
    	        // Make sure we get a successful response back.
    	        var code = (xhr.status + '')[0];
    	        if (code !== '0' && code !== '2' && code !== '3') {
    	          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');
    	          return;
    	        }

    	        decodeAudioData(xhr.response, self);
    	      };
    	      xhr.onerror = function() {
    	        // If there is an error, switch to HTML5 Audio.
    	        if (self._webAudio) {
    	          self._html5 = true;
    	          self._webAudio = false;
    	          self._sounds = [];
    	          delete cache[url];
    	          self.load();
    	        }
    	      };
    	      safeXhrSend(xhr);
    	    }
    	  };

    	  /**
    	   * Send the XHR request wrapped in a try/catch.
    	   * @param  {Object} xhr XHR to send.
    	   */
    	  var safeXhrSend = function(xhr) {
    	    try {
    	      xhr.send();
    	    } catch (e) {
    	      xhr.onerror();
    	    }
    	  };

    	  /**
    	   * Decode audio data from an array buffer.
    	   * @param  {ArrayBuffer} arraybuffer The audio data.
    	   * @param  {Howl}        self
    	   */
    	  var decodeAudioData = function(arraybuffer, self) {
    	    // Fire a load error if something broke.
    	    var error = function() {
    	      self._emit('loaderror', null, 'Decoding audio data failed.');
    	    };

    	    // Load the sound on success.
    	    var success = function(buffer) {
    	      if (buffer && self._sounds.length > 0) {
    	        cache[self._src] = buffer;
    	        loadSound(self, buffer);
    	      } else {
    	        error();
    	      }
    	    };

    	    // Decode the buffer into an audio source.
    	    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {
    	      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);
    	    } else {
    	      Howler.ctx.decodeAudioData(arraybuffer, success, error);
    	    }
    	  };

    	  /**
    	   * Sound is now loaded, so finish setting everything up and fire the loaded event.
    	   * @param  {Howl} self
    	   * @param  {Object} buffer The decoded buffer sound source.
    	   */
    	  var loadSound = function(self, buffer) {
    	    // Set the duration.
    	    if (buffer && !self._duration) {
    	      self._duration = buffer.duration;
    	    }

    	    // Setup a sprite if none is defined.
    	    if (Object.keys(self._sprite).length === 0) {
    	      self._sprite = {__default: [0, self._duration * 1000]};
    	    }

    	    // Fire the loaded event.
    	    if (self._state !== 'loaded') {
    	      self._state = 'loaded';
    	      self._emit('load');
    	      self._loadQueue();
    	    }
    	  };

    	  /**
    	   * Setup the audio context when available, or switch to HTML5 Audio mode.
    	   */
    	  var setupAudioContext = function() {
    	    // If we have already detected that Web Audio isn't supported, don't run this step again.
    	    if (!Howler.usingWebAudio) {
    	      return;
    	    }

    	    // Check if we are using Web Audio and setup the AudioContext if we are.
    	    try {
    	      if (typeof AudioContext !== 'undefined') {
    	        Howler.ctx = new AudioContext();
    	      } else if (typeof webkitAudioContext !== 'undefined') {
    	        Howler.ctx = new webkitAudioContext();
    	      } else {
    	        Howler.usingWebAudio = false;
    	      }
    	    } catch(e) {
    	      Howler.usingWebAudio = false;
    	    }

    	    // If the audio context creation still failed, set using web audio to false.
    	    if (!Howler.ctx) {
    	      Howler.usingWebAudio = false;
    	    }

    	    // Check if a webview is being used on iOS8 or earlier (rather than the browser).
    	    // If it is, disable Web Audio as it causes crashing.
    	    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));
    	    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
    	    var version = appVersion ? parseInt(appVersion[1], 10) : null;
    	    if (iOS && version && version < 9) {
    	      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());
    	      if (Howler._navigator && !safari) {
    	        Howler.usingWebAudio = false;
    	      }
    	    }

    	    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).
    	    if (Howler.usingWebAudio) {
    	      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();
    	      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);
    	      Howler.masterGain.connect(Howler.ctx.destination);
    	    }

    	    // Re-run the setup on Howler.
    	    Howler._setup();
    	  };

    	  // Add support for CommonJS libraries such as browserify.
    	  {
    	    exports.Howler = Howler;
    	    exports.Howl = Howl;
    	  }

    	  // Add to global in Node.js (for testing, etc).
    	  if (typeof commonjsGlobal !== 'undefined') {
    	    commonjsGlobal.HowlerGlobal = HowlerGlobal;
    	    commonjsGlobal.Howler = Howler;
    	    commonjsGlobal.Howl = Howl;
    	    commonjsGlobal.Sound = Sound;
    	  } else if (typeof window !== 'undefined') {  // Define globally in case AMD is not available or unused.
    	    window.HowlerGlobal = HowlerGlobal;
    	    window.Howler = Howler;
    	    window.Howl = Howl;
    	    window.Sound = Sound;
    	  }
    	})();


    	/*!
    	 *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.
    	 *  
    	 *  howler.js v2.2.3
    	 *  howlerjs.com
    	 *
    	 *  (c) 2013-2020, James Simpson of GoldFire Studios
    	 *  goldfirestudios.com
    	 *
    	 *  MIT License
    	 */

    	(function() {

    	  // Setup default properties.
    	  HowlerGlobal.prototype._pos = [0, 0, 0];
    	  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];

    	  /** Global Methods **/
    	  /***************************************************************************/

    	  /**
    	   * Helper method to update the stereo panning position of all current Howls.
    	   * Future Howls will not use this value unless explicitly set.
    	   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.
    	   * @return {Howler/Number}     Self or current stereo panning value.
    	   */
    	  HowlerGlobal.prototype.stereo = function(pan) {
    	    var self = this;

    	    // Stop right here if not using Web Audio.
    	    if (!self.ctx || !self.ctx.listener) {
    	      return self;
    	    }

    	    // Loop through all Howls and update their stereo panning.
    	    for (var i=self._howls.length-1; i>=0; i--) {
    	      self._howls[i].stereo(pan);
    	    }

    	    return self;
    	  };

    	  /**
    	   * Get/set the position of the listener in 3D cartesian space. Sounds using
    	   * 3D position will be relative to the listener's position.
    	   * @param  {Number} x The x-position of the listener.
    	   * @param  {Number} y The y-position of the listener.
    	   * @param  {Number} z The z-position of the listener.
    	   * @return {Howler/Array}   Self or current listener position.
    	   */
    	  HowlerGlobal.prototype.pos = function(x, y, z) {
    	    var self = this;

    	    // Stop right here if not using Web Audio.
    	    if (!self.ctx || !self.ctx.listener) {
    	      return self;
    	    }

    	    // Set the defaults for optional 'y' & 'z'.
    	    y = (typeof y !== 'number') ? self._pos[1] : y;
    	    z = (typeof z !== 'number') ? self._pos[2] : z;

    	    if (typeof x === 'number') {
    	      self._pos = [x, y, z];

    	      if (typeof self.ctx.listener.positionX !== 'undefined') {
    	        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);
    	        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);
    	        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);
    	      } else {
    	        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);
    	      }
    	    } else {
    	      return self._pos;
    	    }

    	    return self;
    	  };

    	  /**
    	   * Get/set the direction the listener is pointing in the 3D cartesian space.
    	   * A front and up vector must be provided. The front is the direction the
    	   * face of the listener is pointing, and up is the direction the top of the
    	   * listener is pointing. Thus, these values are expected to be at right angles
    	   * from each other.
    	   * @param  {Number} x   The x-orientation of the listener.
    	   * @param  {Number} y   The y-orientation of the listener.
    	   * @param  {Number} z   The z-orientation of the listener.
    	   * @param  {Number} xUp The x-orientation of the top of the listener.
    	   * @param  {Number} yUp The y-orientation of the top of the listener.
    	   * @param  {Number} zUp The z-orientation of the top of the listener.
    	   * @return {Howler/Array}     Returns self or the current orientation vectors.
    	   */
    	  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {
    	    var self = this;

    	    // Stop right here if not using Web Audio.
    	    if (!self.ctx || !self.ctx.listener) {
    	      return self;
    	    }

    	    // Set the defaults for optional 'y' & 'z'.
    	    var or = self._orientation;
    	    y = (typeof y !== 'number') ? or[1] : y;
    	    z = (typeof z !== 'number') ? or[2] : z;
    	    xUp = (typeof xUp !== 'number') ? or[3] : xUp;
    	    yUp = (typeof yUp !== 'number') ? or[4] : yUp;
    	    zUp = (typeof zUp !== 'number') ? or[5] : zUp;

    	    if (typeof x === 'number') {
    	      self._orientation = [x, y, z, xUp, yUp, zUp];

    	      if (typeof self.ctx.listener.forwardX !== 'undefined') {
    	        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);
    	        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);
    	        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);
    	        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);
    	        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);
    	        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);
    	      } else {
    	        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);
    	      }
    	    } else {
    	      return or;
    	    }

    	    return self;
    	  };

    	  /** Group Methods **/
    	  /***************************************************************************/

    	  /**
    	   * Add new properties to the core init.
    	   * @param  {Function} _super Core init method.
    	   * @return {Howl}
    	   */
    	  Howl.prototype.init = (function(_super) {
    	    return function(o) {
    	      var self = this;

    	      // Setup user-defined default properties.
    	      self._orientation = o.orientation || [1, 0, 0];
    	      self._stereo = o.stereo || null;
    	      self._pos = o.pos || null;
    	      self._pannerAttr = {
    	        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,
    	        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,
    	        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,
    	        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',
    	        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,
    	        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',
    	        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,
    	        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1
    	      };

    	      // Setup event listeners.
    	      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];
    	      self._onpos = o.onpos ? [{fn: o.onpos}] : [];
    	      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];

    	      // Complete initilization with howler.js core's init function.
    	      return _super.call(this, o);
    	    };
    	  })(Howl.prototype.init);

    	  /**
    	   * Get/set the stereo panning of the audio source for this sound or all in the group.
    	   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.
    	   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.
    	   * @return {Howl/Number}    Returns self or the current stereo panning value.
    	   */
    	  Howl.prototype.stereo = function(pan, id) {
    	    var self = this;

    	    // Stop right here if not using Web Audio.
    	    if (!self._webAudio) {
    	      return self;
    	    }

    	    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.
    	    if (self._state !== 'loaded') {
    	      self._queue.push({
    	        event: 'stereo',
    	        action: function() {
    	          self.stereo(pan, id);
    	        }
    	      });

    	      return self;
    	    }

    	    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.
    	    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';

    	    // Setup the group's stereo panning if no ID is passed.
    	    if (typeof id === 'undefined') {
    	      // Return the group's stereo panning if no parameters are passed.
    	      if (typeof pan === 'number') {
    	        self._stereo = pan;
    	        self._pos = [pan, 0, 0];
    	      } else {
    	        return self._stereo;
    	      }
    	    }

    	    // Change the streo panning of one or all sounds in group.
    	    var ids = self._getSoundIds(id);
    	    for (var i=0; i<ids.length; i++) {
    	      // Get the sound.
    	      var sound = self._soundById(ids[i]);

    	      if (sound) {
    	        if (typeof pan === 'number') {
    	          sound._stereo = pan;
    	          sound._pos = [pan, 0, 0];

    	          if (sound._node) {
    	            // If we are falling back, make sure the panningModel is equalpower.
    	            sound._pannerAttr.panningModel = 'equalpower';

    	            // Check if there is a panner setup and create a new one if not.
    	            if (!sound._panner || !sound._panner.pan) {
    	              setupPanner(sound, pannerType);
    	            }

    	            if (pannerType === 'spatial') {
    	              if (typeof sound._panner.positionX !== 'undefined') {
    	                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);
    	                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);
    	                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);
    	              } else {
    	                sound._panner.setPosition(pan, 0, 0);
    	              }
    	            } else {
    	              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);
    	            }
    	          }

    	          self._emit('stereo', sound._id);
    	        } else {
    	          return sound._stereo;
    	        }
    	      }
    	    }

    	    return self;
    	  };

    	  /**
    	   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.
    	   * @param  {Number} x  The x-position of the audio source.
    	   * @param  {Number} y  The y-position of the audio source.
    	   * @param  {Number} z  The z-position of the audio source.
    	   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.
    	   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].
    	   */
    	  Howl.prototype.pos = function(x, y, z, id) {
    	    var self = this;

    	    // Stop right here if not using Web Audio.
    	    if (!self._webAudio) {
    	      return self;
    	    }

    	    // If the sound hasn't loaded, add it to the load queue to change position when capable.
    	    if (self._state !== 'loaded') {
    	      self._queue.push({
    	        event: 'pos',
    	        action: function() {
    	          self.pos(x, y, z, id);
    	        }
    	      });

    	      return self;
    	    }

    	    // Set the defaults for optional 'y' & 'z'.
    	    y = (typeof y !== 'number') ? 0 : y;
    	    z = (typeof z !== 'number') ? -0.5 : z;

    	    // Setup the group's spatial position if no ID is passed.
    	    if (typeof id === 'undefined') {
    	      // Return the group's spatial position if no parameters are passed.
    	      if (typeof x === 'number') {
    	        self._pos = [x, y, z];
    	      } else {
    	        return self._pos;
    	      }
    	    }

    	    // Change the spatial position of one or all sounds in group.
    	    var ids = self._getSoundIds(id);
    	    for (var i=0; i<ids.length; i++) {
    	      // Get the sound.
    	      var sound = self._soundById(ids[i]);

    	      if (sound) {
    	        if (typeof x === 'number') {
    	          sound._pos = [x, y, z];

    	          if (sound._node) {
    	            // Check if there is a panner setup and create a new one if not.
    	            if (!sound._panner || sound._panner.pan) {
    	              setupPanner(sound, 'spatial');
    	            }

    	            if (typeof sound._panner.positionX !== 'undefined') {
    	              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);
    	              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);
    	              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);
    	            } else {
    	              sound._panner.setPosition(x, y, z);
    	            }
    	          }

    	          self._emit('pos', sound._id);
    	        } else {
    	          return sound._pos;
    	        }
    	      }
    	    }

    	    return self;
    	  };

    	  /**
    	   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate
    	   * space. Depending on how direction the sound is, based on the `cone` attributes,
    	   * a sound pointing away from the listener can be quiet or silent.
    	   * @param  {Number} x  The x-orientation of the source.
    	   * @param  {Number} y  The y-orientation of the source.
    	   * @param  {Number} z  The z-orientation of the source.
    	   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.
    	   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].
    	   */
    	  Howl.prototype.orientation = function(x, y, z, id) {
    	    var self = this;

    	    // Stop right here if not using Web Audio.
    	    if (!self._webAudio) {
    	      return self;
    	    }

    	    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.
    	    if (self._state !== 'loaded') {
    	      self._queue.push({
    	        event: 'orientation',
    	        action: function() {
    	          self.orientation(x, y, z, id);
    	        }
    	      });

    	      return self;
    	    }

    	    // Set the defaults for optional 'y' & 'z'.
    	    y = (typeof y !== 'number') ? self._orientation[1] : y;
    	    z = (typeof z !== 'number') ? self._orientation[2] : z;

    	    // Setup the group's spatial orientation if no ID is passed.
    	    if (typeof id === 'undefined') {
    	      // Return the group's spatial orientation if no parameters are passed.
    	      if (typeof x === 'number') {
    	        self._orientation = [x, y, z];
    	      } else {
    	        return self._orientation;
    	      }
    	    }

    	    // Change the spatial orientation of one or all sounds in group.
    	    var ids = self._getSoundIds(id);
    	    for (var i=0; i<ids.length; i++) {
    	      // Get the sound.
    	      var sound = self._soundById(ids[i]);

    	      if (sound) {
    	        if (typeof x === 'number') {
    	          sound._orientation = [x, y, z];

    	          if (sound._node) {
    	            // Check if there is a panner setup and create a new one if not.
    	            if (!sound._panner) {
    	              // Make sure we have a position to setup the node with.
    	              if (!sound._pos) {
    	                sound._pos = self._pos || [0, 0, -0.5];
    	              }

    	              setupPanner(sound, 'spatial');
    	            }

    	            if (typeof sound._panner.orientationX !== 'undefined') {
    	              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);
    	              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);
    	              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);
    	            } else {
    	              sound._panner.setOrientation(x, y, z);
    	            }
    	          }

    	          self._emit('orientation', sound._id);
    	        } else {
    	          return sound._orientation;
    	        }
    	      }
    	    }

    	    return self;
    	  };

    	  /**
    	   * Get/set the panner node's attributes for a sound or group of sounds.
    	   * This method can optionall take 0, 1 or 2 arguments.
    	   *   pannerAttr() -> Returns the group's values.
    	   *   pannerAttr(id) -> Returns the sound id's values.
    	   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.
    	   *   pannerAttr(o, id) -> Set's the values of passed sound id.
    	   *
    	   *   Attributes:
    	   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,
    	   *                      inside of which there will be no volume reduction.
    	   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,
    	   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.
    	   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the
    	   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.
    	   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from
    	   *                     listener. Can be `linear`, `inverse` or `exponential.
    	   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume
    	   *                   will not be reduced any further.
    	   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.
    	   *                   This is simply a variable of the distance model and has a different effect depending on which model
    	   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.
    	   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a
    	   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`
    	   *                     with `inverse` and `exponential`.
    	   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.
    	   *                     Can be `HRTF` or `equalpower`.
    	   *
    	   * @return {Howl/Object} Returns self or current panner attributes.
    	   */
    	  Howl.prototype.pannerAttr = function() {
    	    var self = this;
    	    var args = arguments;
    	    var o, id, sound;

    	    // Stop right here if not using Web Audio.
    	    if (!self._webAudio) {
    	      return self;
    	    }

    	    // Determine the values based on arguments.
    	    if (args.length === 0) {
    	      // Return the group's panner attribute values.
    	      return self._pannerAttr;
    	    } else if (args.length === 1) {
    	      if (typeof args[0] === 'object') {
    	        o = args[0];

    	        // Set the grou's panner attribute values.
    	        if (typeof id === 'undefined') {
    	          if (!o.pannerAttr) {
    	            o.pannerAttr = {
    	              coneInnerAngle: o.coneInnerAngle,
    	              coneOuterAngle: o.coneOuterAngle,
    	              coneOuterGain: o.coneOuterGain,
    	              distanceModel: o.distanceModel,
    	              maxDistance: o.maxDistance,
    	              refDistance: o.refDistance,
    	              rolloffFactor: o.rolloffFactor,
    	              panningModel: o.panningModel
    	            };
    	          }

    	          self._pannerAttr = {
    	            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,
    	            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,
    	            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,
    	            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,
    	            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,
    	            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,
    	            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,
    	            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel
    	          };
    	        }
    	      } else {
    	        // Return this sound's panner attribute values.
    	        sound = self._soundById(parseInt(args[0], 10));
    	        return sound ? sound._pannerAttr : self._pannerAttr;
    	      }
    	    } else if (args.length === 2) {
    	      o = args[0];
    	      id = parseInt(args[1], 10);
    	    }

    	    // Update the values of the specified sounds.
    	    var ids = self._getSoundIds(id);
    	    for (var i=0; i<ids.length; i++) {
    	      sound = self._soundById(ids[i]);

    	      if (sound) {
    	        // Merge the new values into the sound.
    	        var pa = sound._pannerAttr;
    	        pa = {
    	          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,
    	          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,
    	          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,
    	          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,
    	          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,
    	          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,
    	          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,
    	          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel
    	        };

    	        // Update the panner values or create a new panner if none exists.
    	        var panner = sound._panner;
    	        if (panner) {
    	          panner.coneInnerAngle = pa.coneInnerAngle;
    	          panner.coneOuterAngle = pa.coneOuterAngle;
    	          panner.coneOuterGain = pa.coneOuterGain;
    	          panner.distanceModel = pa.distanceModel;
    	          panner.maxDistance = pa.maxDistance;
    	          panner.refDistance = pa.refDistance;
    	          panner.rolloffFactor = pa.rolloffFactor;
    	          panner.panningModel = pa.panningModel;
    	        } else {
    	          // Make sure we have a position to setup the node with.
    	          if (!sound._pos) {
    	            sound._pos = self._pos || [0, 0, -0.5];
    	          }

    	          // Create a new panner node.
    	          setupPanner(sound, 'spatial');
    	        }
    	      }
    	    }

    	    return self;
    	  };

    	  /** Single Sound Methods **/
    	  /***************************************************************************/

    	  /**
    	   * Add new properties to the core Sound init.
    	   * @param  {Function} _super Core Sound init method.
    	   * @return {Sound}
    	   */
    	  Sound.prototype.init = (function(_super) {
    	    return function() {
    	      var self = this;
    	      var parent = self._parent;

    	      // Setup user-defined default properties.
    	      self._orientation = parent._orientation;
    	      self._stereo = parent._stereo;
    	      self._pos = parent._pos;
    	      self._pannerAttr = parent._pannerAttr;

    	      // Complete initilization with howler.js core Sound's init function.
    	      _super.call(this);

    	      // If a stereo or position was specified, set it up.
    	      if (self._stereo) {
    	        parent.stereo(self._stereo);
    	      } else if (self._pos) {
    	        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);
    	      }
    	    };
    	  })(Sound.prototype.init);

    	  /**
    	   * Override the Sound.reset method to clean up properties from the spatial plugin.
    	   * @param  {Function} _super Sound reset method.
    	   * @return {Sound}
    	   */
    	  Sound.prototype.reset = (function(_super) {
    	    return function() {
    	      var self = this;
    	      var parent = self._parent;

    	      // Reset all spatial plugin properties on this sound.
    	      self._orientation = parent._orientation;
    	      self._stereo = parent._stereo;
    	      self._pos = parent._pos;
    	      self._pannerAttr = parent._pannerAttr;

    	      // If a stereo or position was specified, set it up.
    	      if (self._stereo) {
    	        parent.stereo(self._stereo);
    	      } else if (self._pos) {
    	        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);
    	      } else if (self._panner) {
    	        // Disconnect the panner.
    	        self._panner.disconnect(0);
    	        self._panner = undefined;
    	        parent._refreshBuffer(self);
    	      }

    	      // Complete resetting of the sound.
    	      return _super.call(this);
    	    };
    	  })(Sound.prototype.reset);

    	  /** Helper Methods **/
    	  /***************************************************************************/

    	  /**
    	   * Create a new panner node and save it on the sound.
    	   * @param  {Sound} sound Specific sound to setup panning on.
    	   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.
    	   */
    	  var setupPanner = function(sound, type) {
    	    type = type || 'spatial';

    	    // Create the new panner node.
    	    if (type === 'spatial') {
    	      sound._panner = Howler.ctx.createPanner();
    	      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;
    	      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;
    	      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;
    	      sound._panner.distanceModel = sound._pannerAttr.distanceModel;
    	      sound._panner.maxDistance = sound._pannerAttr.maxDistance;
    	      sound._panner.refDistance = sound._pannerAttr.refDistance;
    	      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;
    	      sound._panner.panningModel = sound._pannerAttr.panningModel;

    	      if (typeof sound._panner.positionX !== 'undefined') {
    	        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);
    	        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);
    	        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);
    	      } else {
    	        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);
    	      }

    	      if (typeof sound._panner.orientationX !== 'undefined') {
    	        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);
    	        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);
    	        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);
    	      } else {
    	        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);
    	      }
    	    } else {
    	      sound._panner = Howler.ctx.createStereoPanner();
    	      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);
    	    }

    	    sound._panner.connect(sound._node);

    	    // Update the connections.
    	    if (!sound._paused) {
    	      sound._parent.pause(sound._id, true).play(sound._id, true);
    	    }
    	  };
    	})();
    } (howler));

    class Sounds {
        constructor() {
            this.moveSoundSet = {
                regular: { move: () => this.move(), capture: () => this.capture() },
                shogi: { move: () => this.shogimove(), capture: () => this.shogicapture() },
                atomic: { move: () => this.move(), capture: () => this.explosion() },
            };
            this.tracks = {};
        }
        updateVolume() {
            const volume = volumeSettings.value;
            Object.keys(this.tracks).forEach(key => {
                this.tracks[key].volume(volume);
            });
        }
        updateSoundTheme(assetURL) {
            Object.keys(Sounds.trackNames).forEach((key) => {
                this.tracks[key] = this.buildSound(assetURL, Sounds.trackNames[key]);
            });
        }
        buildSound(assetURL, trackName) {
            const soundTheme = soundThemeSettings.value;
            const soundTrack = (soundTheme === 'silent') ? 'Silence' : trackName;
            const sound = new howler.Howl({
                src: [
                    assetURL + '/sound/' + soundTheme + '/' + soundTrack + '.ogg',
                    assetURL + '/sound/' + soundTheme + '/' + soundTrack + '.mp3'
                ],
                onplayerror: function () {
                    sound.once('unlock', function () {
                        sound.play();
                    });
                },
                volume: volumeSettings.value,
            });
            return sound;
        }
        audio() {
            return soundThemeSettings.value !== 'silent';
        }
        genericNotify() { if (this.audio())
            this.tracks.GenericNotify.play(); }
        socialNotify() { if (this.audio())
            this.tracks.SocialNotify.play(); }
        move() { if (this.audio())
            this.tracks.Move.play(); }
        capture() { if (this.audio())
            this.tracks.Capture.play(); }
        check() { if (this.audio())
            this.tracks.Check.play(); }
        draw() { if (this.audio())
            this.tracks.Draw.play(); }
        victory() { if (this.audio())
            this.tracks.Victory.play(); }
        defeat() { if (this.audio())
            this.tracks.Defeat.play(); }
        shogimove() { if (this.audio())
            this.tracks.ShogiMove.play(); }
        shogicapture() { if (this.audio())
            this.tracks.ShogiCapture.play(); }
        chat() { if (this.audio())
            this.tracks.Chat.play(); }
        setup() { if (this.audio())
            this.tracks.Setup.play(); }
        lowTime() { if (this.audio())
            this.tracks.LowTime.play(); }
        tick() { if (this.audio())
            this.tracks.Tick.play(); }
        explosion() { if (this.audio())
            this.tracks.Explosion.play(); }
        berserk() { if (this.audio())
            this.tracks.Berserk.play(); }
        moveSound(variant, capture) {
            const soundSet = variant.pieceSound in this.moveSoundSet ? this.moveSoundSet[variant.pieceSound] : this.moveSoundSet.regular;
            if (capture)
                soundSet.capture();
            else
                soundSet.move();
        }
        gameEndSound(result, color) {
            switch (result) {
                case "1/2-1/2":
                    this.draw();
                    break;
                case "1-0":
                    if (color === "white")
                        this.victory();
                    else
                        this.defeat();
                    break;
                case "0-1":
                    if (color === "black")
                        this.victory();
                    else
                        this.defeat();
                    break;
            }
        }
    }
    Sounds.trackNames = {
        GenericNotify: 'GenericNotify',
        SocialNotify: 'SocialNotify',
        Move: 'Move',
        Capture: 'Capture',
        Check: 'Check',
        Draw: 'Draw',
        Victory: 'Victory',
        Defeat: 'Defeat',
        ShogiMove: 'shogisnap',
        ShogiCapture: 'shogislam',
        Chat: 'chat',
        Setup: 'dinding',
        LowTime: 'LowTime',
        Tick: 'Tick',
        Explosion: 'Explosion',
        Berserk: 'Berserk',
    };
    class VolumeSettings extends NumberSettings {
        constructor() {
            super('volume', 1);
        }
        update() {
            sound.updateVolume();
        }
        view() {
            return h('div', slider(this, 'sound-volume', 0, 1, 0.01, _('Volume')));
        }
    }
    const soundThemes = {
        silent: "Silent",
        standard: "Standard",
        piano: "Piano",
        nes: "NES",
        sfx: "SFX",
        futuristic: "Futuristic",
        lisp: "Lisp",
        robot: "Robot",
    };
    class SoundThemeSettings extends StringSettings {
        constructor() {
            super('soundtheme', 'standard');
        }
        update() {
            sound.updateSoundTheme(this.assetURL);
        }
        view() {
            return h('div#soundtheme.radio-list', radioList(this, 'soundtheme', soundThemes, (_, key) => this.value = key));
        }
    }
    const sound = new (Sounds);
    const volumeSettings = new VolumeSettings();
    const soundThemeSettings = new SoundThemeSettings();

    function chatMessage(user, message, chatType, time) {
        const chatDiv = document.getElementById(chatType + '-messages');
        // You must add border widths, padding and margins to the right.
        // Only scroll the chat on a new message if the user is at the very bottom of the chat
        const isBottom = chatDiv.scrollHeight - (chatDiv.scrollTop + chatDiv.offsetHeight) < 80;
        const localTime = time ? new Date(time * 1000).toLocaleTimeString("default", { hour: "2-digit", minute: "2-digit", hour12: false }) : "";
        const container = document.getElementById('messages');
        if (user.length === 0) {
            patch(container, h('div#messages', [h("li.message.offer", [h("t", message)])]));
        }
        else if (user === '_server') {
            patch(container, h('div#messages', [h("li.message.server", [h("div.time", localTime), h("user", _('Server')), h("t", message)])]));
        }
        else if (user === 'Discord-Relay') {
            const colonIndex = message.indexOf(':'); // Discord doesn't allow colons in usernames so the first colon signifies the start of the message
            const discordUser = message.substring(0, colonIndex);
            const discordMessage = message.substring(colonIndex + 2);
            patch(container, h('div#messages', [h("li.message", [h("div.time", localTime), h("div.discord-icon-container", h("img.icon-discord-icon", { attrs: { src: '/static/icons/discord.svg' } })), h("user", discordUser), h("t", discordMessage)])]));
        }
        else {
            patch(container, h('div#messages', [h("li.message", [h("div.time", localTime), h("user", h("a", { attrs: { href: "/@/" + user } }, user)), h("t", message)])]));
        }
        if (isBottom)
            setTimeout(() => { chatDiv.scrollTop = chatDiv.scrollHeight; }, 200);
    }

    class GameController extends ChessgroundController {
        constructor(el, model) {
            super(el, model);
            this.setDests = () => {
                if (this.ffishBoard === undefined) {
                    // At very first time we may have to wait for ffish module to initialize
                    setTimeout(this.setDests, 100);
                }
                else {
                    const legalMoves = this.ffishBoard.legalMoves().split(" ");
                    const dests = moveDests(legalMoves);
                    // list of legal promotion moves
                    this.promotions = [];
                    legalMoves.forEach((move) => {
                        // In duck chess we have to cut off the second leg part (the duck move)
                        const moveStr = (this.variant.duck) ? move.slice(0, -5) : uci2cg(move);
                        const tail = moveStr.slice(-1);
                        if (tail > '9' || tail === '+' || tail === '-') {
                            if (!(this.variant.gate && (moveStr.slice(1, 2) === '1' || moveStr.slice(1, 2) === '8'))) {
                                this.promotions.push(moveStr);
                            }
                        }
                        if (this.variant.promotion === 'kyoto' && moveStr.slice(0, 1) === '+') {
                            this.promotions.push(moveStr);
                        }
                    });
                    this.chessground.set({ movable: { dests: dests } });
                    if (this.steps.length === 1) {
                        this.chessground.set({ check: (this.ffishBoard.isCheck()) ? this.turnColor : false });
                    }
                }
            };
            this.setDuckDests = (move) => {
                const legalMoves = this.ffishBoard.legalMoves();
                // valid moves starting with the given piece move
                const filteredMoves = legalMoves.split(" ").filter((m) => m.startsWith(move));
                let fromSquare = undefined;
                const pieces = this.chessground.state.boardState.pieces;
                for (const [k, p] of pieces) {
                    if (p.role === '_-piece') {
                        fromSquare = k;
                        break;
                    }
                }
                // In case of white first move there is no duck on the board at all
                // so we have to pass the given move dest square as fromSquare param to duckMoveDests()
                if (fromSquare === undefined) {
                    // The new duck will be placed by one click on some empty square in onSelect()
                    fromSquare = move.slice(2, 4);
                }
                else {
                    // turn the duck piece color to the opposite to let it be movable on chessground
                    this.chessground.state.boardState.pieces.get(fromSquare).color = this.turnColor;
                }
                const dests = duckMoveDests(filteredMoves, fromSquare);
                this.chessground.set({ movable: { dests: dests }, turnColor: this.turnColor });
            };
            this.doSend = (message) => {
                // console.log("---> doSend():", message);
                this.sock.send(JSON.stringify(message));
            };
            this.onMove = () => {
                return (_orig, _dest, capturedPiece) => {
                    sound.moveSound(this.variant, !!capturedPiece);
                };
            };
            this.onDrop = () => {
                return (piece, _dest) => {
                    if (piece.role)
                        sound.moveSound(this.variant, false);
                };
            };
            this.onSelect = () => {
                let lastTime = performance.now();
                let lastKey;
                return (key) => {
                    var _a;
                    if (this.chessground.state.movable.dests === undefined)
                        return;
                    // In duck chess after white first move made (startfen && dests.size === 1)
                    // white have to add the duck by one click on some empty square
                    // because it is not on the board still 
                    if (this.variant.duck && this.fullfen === this.variant.startFen && this.chessground.state.movable.dests.size === 1) {
                        if (this.chessground.state.boardState.pieces.get(key) === undefined) {
                            this.chessground.setPieces(new Map([[key, {
                                        color: 'white',
                                        role: '_-piece',
                                    }]]));
                            this.sendMove(key, key, '');
                        }
                        return;
                    }
                    const curTime = performance.now();
                    // Save state.pieces to help recognise 960 castling (king takes rook) moves
                    // Shouldn't this be implemented in chessground instead?
                    if (this.chess960 && this.variant.gate) {
                        this.prevPieces = new Map(this.chessground.state.boardState.pieces);
                    }
                    // Sittuyin in place promotion on double click
                    if (this.chessground.state.stats.ctrlKey || (lastKey === key && curTime - lastTime < 500)) {
                        if ((_a = this.chessground.state.movable.dests.get(key)) === null || _a === void 0 ? void 0 : _a.includes(key)) {
                            const piece = this.chessground.state.boardState.pieces.get(key);
                            if (this.variant.name === 'sittuyin') { // TODO make this more generic
                                // console.log("Ctrl in place promotion", key);
                                this.chessground.setPieces(new Map([[key, {
                                            color: piece.color,
                                            role: 'f-piece',
                                            promoted: true
                                        }]]));
                                this.chessground.state.movable.dests = undefined;
                                this.chessground.selectSquare(key);
                                sound.moveSound(this.variant, false);
                                this.sendMove(key, key, 'f');
                            }
                            else if ((this.chessground.state.stats.ctrlKey || this.dblClickPass) && this.variant.pass) {
                                this.pass(key);
                            }
                        }
                        lastKey = undefined;
                    }
                    else {
                        lastKey = key;
                        lastTime = curTime;
                    }
                };
            };
            this.pass = (passKey) => {
                var _a;
                if (this.turnColor === this.chessground.state.movable.color || this.chessground.state.movable.color === 'both') {
                    if (!passKey) {
                        const pieces = this.chessground.state.boardState.pieces;
                        const dests = this.chessground.state.movable.dests;
                        for (const [k, p] of pieces) {
                            if (p.role === 'k-piece' && p.color === this.turnColor) {
                                if ((_a = dests === null || dests === void 0 ? void 0 : dests.get(k)) === null || _a === void 0 ? void 0 : _a.includes(k)) {
                                    passKey = k;
                                    break;
                                }
                            }
                        }
                    }
                    if (passKey) {
                        // prevent calling pass() again by selectSquare() -> onSelect()
                        this.chessground.unselect();
                        sound.moveSound(this.variant, false);
                        this.sendMove(passKey, passKey, '');
                    }
                }
            };
            this.onMsgSpectators = (msg) => {
                const container = document.getElementById('spectators');
                patch(container, h('under-left#spectators', _('Spectators: ') + msg.spectators));
            };
            this.onMsgChat = (msg) => {
                if ((this.spectator && msg.room === 'spectator') || (!this.spectator && msg.room !== 'spectator') || msg.user.length === 0) {
                    chatMessage(msg.user, msg.message, "roundchat", msg.time);
                }
            };
            this.onMsgFullChat = (msg) => {
                // To prevent multiplication of messages we have to remove old messages div first
                patch(document.getElementById('messages'), h('div#messages-clear'));
                // then create a new one
                patch(document.getElementById('messages-clear'), h('div#messages'));
                msg.lines.forEach((line) => {
                    if ((this.spectator && line.room === 'spectator') || (!this.spectator && line.room !== 'spectator') || line.user.length === 0) {
                        chatMessage(line.user, line.message, "roundchat", line.time);
                    }
                });
            };
            this.onMsgGameNotFound = (msg) => {
                alert(_("Requested game %1 not found!", msg['gameId']));
                window.location.assign(this.home);
            };
            this.onMsgShutdown = (msg) => {
                alert(msg.message);
            };
            this.gameId = model["gameId"];
            this.tournamentId = model["tournamentId"];
            this.username = model["username"];
            this.wplayer = model["wplayer"];
            this.bplayer = model["bplayer"];
            this.base = Number(model["base"]);
            this.inc = Number(model["inc"]);
            this.status = Number(model["status"]);
            this.steps = [];
            this.pgn = "";
            this.ply = isNaN(model["ply"]) ? 0 : model["ply"];
            this.wtitle = model["wtitle"];
            this.btitle = model["btitle"];
            this.wrating = model["wrating"];
            this.brating = model["brating"];
            this.rated = model["rated"];
            this.spectator = this.username !== this.wplayer && this.username !== this.bplayer;
            this.gating = new Gating(this);
            this.promotion = new Promotion(this);
            // orientation = this.mycolor
            if (this.spectator) {
                this.mycolor = 'white';
                this.oppcolor = 'black';
            }
            else {
                this.mycolor = this.username === this.wplayer ? 'white' : 'black';
                this.oppcolor = this.username === this.wplayer ? 'black' : 'white';
            }
            // players[0] is top player, players[1] is bottom player
            this.players = [
                this.mycolor === "white" ? this.bplayer : this.wplayer,
                this.mycolor === "white" ? this.wplayer : this.bplayer
            ];
            this.titles = [
                this.mycolor === "white" ? this.btitle : this.wtitle,
                this.mycolor === "white" ? this.wtitle : this.btitle
            ];
            this.ratings = [
                this.mycolor === "white" ? this.brating : this.wrating,
                this.mycolor === "white" ? this.wrating : this.brating
            ];
            this.result = "*";
            const parts = this.fullfen.split(" ");
            this.turnColor = parts[1] === "w" ? "white" : "black";
            this.duckChessMove = '';
            this.chessground.set({
                animation: {
                    enabled: localStorage.animation === undefined || localStorage.animation === "true",
                },
                movable: {
                    showDests: localStorage.showDests === undefined || localStorage.showDests === "true",
                },
            });
            this.steps.push({
                'fen': this.fullfen,
                'move': undefined,
                'check': false,
                'turnColor': this.turnColor,
            });
            this.setDests();
        }
        flipped() {
            return this.chessground.state.orientation !== this.mycolor;
        }
        sendMove(orig, dest, promo) {
            let move = cg2uci(orig + dest + promo);
            if (this.variant.duck) {
                // first leg made with standard chess piece
                if (this.duckChessMove.length === 0) {
                    let kingCount = 0;
                    const pieces = this.chessground.state.boardState.pieces;
                    pieces.forEach((piece) => { if (piece.role.startsWith('k'))
                        kingCount = kingCount + 1; });
                    // In case of king capture game is over and no need to move the duck
                    if (kingCount === 1) {
                        move = move + ',' + dest + orig;
                    }
                    else {
                        this.duckChessMove = move;
                        this.setDuckDests(move);
                        return;
                    }
                    // second leg made with the duck
                }
                else {
                    move = this.duckChessMove + ',' + this.duckChessMove.slice(2, 4) + dest;
                    this.duckChessMove = '';
                    sound.moveSound(this.variant, false);
                }
            }
            this.doSendMove(move);
        }
        goPly(ply, plyVari = 0) {
            var _a, _b, _c;
            const vv = (_a = this.steps[plyVari]) === null || _a === void 0 ? void 0 : _a.vari;
            const step = (plyVari > 0 && vv) ? vv[ply - plyVari] : this.steps[ply];
            if (step === undefined)
                return;
            const move = uci2LastMove(step.move);
            let capture = false;
            if (move) {
                // 960 king takes rook castling is not capture
                // TODO Defer this logic to ffish.js
                capture = (this.chessground.state.boardState.pieces.get(move[1]) !== undefined && ((_b = step.san) === null || _b === void 0 ? void 0 : _b.slice(0, 2)) !== 'O-') || (((_c = step.san) === null || _c === void 0 ? void 0 : _c.slice(1, 2)) === 'x');
            }
            this.chessground.set({
                fen: step.fen,
                turnColor: step.turnColor,
                movable: {
                    color: step.turnColor,
                },
                check: step.check,
                lastMove: move,
            });
            this.setDests();
            this.turnColor = step.turnColor;
            this.fullfen = step.fen;
            if (this.variant.duck) {
                this.duckChessMove = '';
            }
            if (this.variant.counting) {
                updateCount(step.fen, document.getElementById('misc-infow'), document.getElementById('misc-infob'));
            }
            if (this.variant.materialPoint) {
                updatePoint(step.fen, document.getElementById('misc-infow'), document.getElementById('misc-infob'));
            }
            if (ply === this.ply + 1) {
                sound.moveSound(this.variant, capture);
            }
            this.ply = ply;
        }
        /**
          * Custom variant-specific logic to be triggered on move and alter state of board/pocket depending on variant rules.
          */
        onUserMove(orig, dest, meta) {
            this.preaction = meta.premove;
            const pieces = this.chessground.state.boardState.pieces;
            let moved = pieces.get(dest);
            // Fix king to rook 960 castling case
            if (moved === undefined)
                moved = { role: 'k-piece', color: this.mycolor };
            // chessground doesn't know about en passant, so we have to remove the captured pawn manually
            if (meta.captured === undefined && moved !== undefined && moved.role === "p-piece" && orig[0] !== dest[0] && this.variant.enPassant) {
                const pos = key2pos(dest), pawnKey = pos2key([pos[0], pos[1] + (this.mycolor === 'white' ? -1 : 1)]);
                meta.captured = pieces.get(pawnKey);
                this.chessground.setPieces(new Map([[pawnKey, undefined]]));
            }
            // add the captured piece to the pocket
            // chessground doesn't know what piece to revert a captured promoted piece into, so it needs to be handled here
            if (this.variant.captureToHand && meta.captured) {
                const piece = {
                    role: unpromotedRole(this.variant, meta.captured),
                    color: opposite(meta.captured.color),
                };
                this.chessground.changePocket(piece, 1);
                this.chessground.state.dom.redraw();
            }
            //  gating elephant/hawk
            if (this.variant.gate) {
                if (!this.promotion.start(moved.role, orig, dest, meta.ctrlKey) && !this.gating.start(this.fullfen, orig, dest))
                    this.sendMove(orig, dest, '');
            }
            else {
                if (!this.promotion.start(moved.role, orig, dest, meta.ctrlKey))
                    this.sendMove(orig, dest, '');
                this.preaction = false;
            }
        }
        /**
         * Variant specific logic for when dropping a piece from pocket is performed
         */
        onUserDrop(piece, dest, meta) {
            this.preaction = meta.premove;
            const role = piece.role;
            if (this.variant.promotion === 'kyoto') {
                if (!this.promotion.start(role, dropOrigOf(role), dest))
                    this.sendMove(dropOrigOf(role), dest, '');
            }
            else {
                this.sendMove(dropOrigOf(role), dest, '');
            }
            this.preaction = false;
        }
        onMessage(evt) {
            // console.log("<+++ onMessage():", evt.data);
            if (evt.data === '/n')
                return;
            const msg = JSON.parse(evt.data);
            switch (msg.type) {
                case "spectators":
                    this.onMsgSpectators(msg);
                    break;
                case "roundchat":
                    this.onMsgChat(msg);
                    break;
                case "fullchat":
                    this.onMsgFullChat(msg);
                    break;
                case "game_not_found":
                    this.onMsgGameNotFound(msg);
                    break;
                case "shutdown":
                    this.onMsgShutdown(msg);
                    break;
                case "logout":
                    this.doSend({ type: "logout" });
                    break;
            }
        }
    }

    const idChars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    const idLength = 5;
    function randomId() {
        let result = '';
        for (let i = idLength; i > 0; --i)
            result += idChars[Math.floor(Math.random() * idChars.length)];
        return result;
    }

    class PuzzleController extends GameController {
        constructor(el, data) {
            const model = {
                home: data.home,
                assetURL: data.assetURL,
                username: data.username,
                variant: data.variant,
                fen: data.fen,
                ply: data.ply,
                gameId: data.gameId,
            };
            super(el, model);
            this.moves = [];
            this.movesSan = [];
            this.createSolutionSan = () => {
                if (this.ffishBoard === undefined) {
                    console.log('updateSolution() WAIT 100...');
                    // At very first time we may have to wait for ffish module to initialize
                    setTimeout(this.createSolutionSan, 100);
                }
                else {
                    this.solutionSan = this.ffishBoard.variationSan(this.solution.join(' '), this.notationAsObject, false).split(' ');
                    console.log('updateSolution() solutionSan=', this.solutionSan);
                    this.solutionEl = document.querySelector('.solution');
                    if (this.solution) {
                        this.updateSolution();
                    }
                }
            };
            this.updateSolution = () => {
                this.solutionEl = patch(this.solutionEl, h('p.solution', [
                    'Solution: ',
                    ...this.solutionSan.map((san, i) => h('san', {
                        class: { done: this.moves[i] === this.solution[i] }
                    }, san))
                ]));
                this.movesEl = patch(this.movesEl, h('p.moves', [
                    'My moves: ',
                    ...this.movesSan.map((move, i) => h('uci', {
                        class: { done: this.moves[i] === this.solution[i] }
                    }, move))
                ]));
            };
            this.canAppend = () => this.moves.length > this.solution.length &&
                this.moves.slice(0, this.solution.length).join(' ') === this.solution.join(' ');
            this.canForward = () => this.moves.length < this.solution.length &&
                this.moves.join(' ') == this.solution.slice(0, this.moves.length).join(' ');
            this.isComplete = () => this.moves.join(' ') == this.solution.join(' ');
            this.isInVariation = () => !this.isComplete() && !this.canForward();
            this.cgConfig = (move) => {
                const fen = this.ffishBoard.fen(this.variant.showPromoted, 0);
                const turnColor = fen.split(" ")[1] === "w" ? "white" : "black";
                return {
                    fen: fen,
                    turnColor: turnColor,
                    movable: {
                        color: turnColor,
                    },
                    check: this.ffishBoard.isCheck(),
                    lastMove: uci2LastMove(move)
                };
            };
            this.username = data.username;
            this.solution = (model.variant === 'duck') ? data.moves.match(/[^,]+,[^,]+/g) : data.moves.split(',');
            this.moves = [];
            this._id = data._id;
            this.all = data.all;
            if (!data.ply) {
                const parts = data.fen.split(' ');
                const color = parts[1];
                const fullmove = parseInt(parts[parts.length - 1]);
                this.ply = (fullmove - 1) * 2 + ((color === "b") ? 1 : 0);
            }
            this.chessground.set({
                animation: { enabled: true },
                orientation: this.turnColor,
                turnColor: this.turnColor,
                movable: {
                    free: false,
                    color: this.turnColor,
                    //                showDests: this.showDests,
                    events: {
                        after: (orig, dest, meta) => this.onUserMove(orig, dest, meta),
                        afterNewPiece: (role, dest, meta) => this.onUserDrop(role, dest, meta),
                    }
                },
                events: {
                    move: this.onMove(),
                    dropNewPiece: this.onDrop(),
                    select: this.onSelect(),
                },
            });
            changePieceCSS(model.assetURL, 'shogi', 'porti');
            changePieceCSS(model.assetURL, 'tori', 'porti');
            changePieceCSS(model.assetURL, 'kyoto', 'kyotoi');
            changePieceCSS(model.assetURL, 'xiangqi', 'xiangqi2di');
            changePieceCSS(model.assetURL, 'janggi', 'janggiikaw');
            const vVariant = this.variant.name || "chess";
            const variantEl = document.getElementById('variant');
            patch(variantEl, selectVariant("variant", vVariant, () => this.setVariant(true), () => this.setVariant(false)));
            const allEl = document.getElementById('all');
            patch(allEl, h('input#all', {
                props: { name: 'all', type: 'checkbox' },
                attrs: { checked: this.all, title: 'View already reviewed and skipped puzzles as well.' },
                on: { click: () => this.setAll() },
            }));
            const fileEl = document.getElementById('puzzlefile');
            patch(fileEl, h('input#puzzlefile', {
                props: { name: 'puzzlefile', type: 'file', accept: '.epd', title: 'Select a .epd file generated by chess-variants-puzzler.' },
                on: { change: () => this.readFile() },
            }));
            this.movesEl = document.querySelector('.moves');
            const approveEl = document.querySelector('.approve');
            patch(approveEl, h('button.approve', { on: { click: () => this.review(true) } }, [
                h('em', 'Approve'),
                h('strong', '✓'),
                h('em', '[enter]'),
            ]));
            const rejectEl = document.querySelector('.reject');
            patch(rejectEl, h('button.reject', { on: { click: () => this.review(false) } }, [
                h('em', 'Reject'),
                h('strong', '✗'),
                h('em', '[backspace]'),
            ]));
            const appendEl = document.querySelector('.append');
            patch(appendEl, h('button.append', { attrs: { disabled: true, title: 'Complete the solution with missing moves.' }, on: { click: () => this.append() } }, [
                h('em', 'solution'),
                h('strong', '↑'),
                h('em', 'my moves'),
            ]));
            const skipEl = document.querySelector('.puzzle-skip');
            patch(skipEl, h('div.puzzle-skip', [h('button', { on: { click: () => this.skip() } }, 'Skip')]));
            const forwardEl = document.querySelector('.next');
            patch(forwardEl, h('button.next', { on: { click: () => this.forward() } }, 'Forward >'));
            const rewindEl = document.querySelector('.prev');
            patch(rewindEl, h('button.prev', {
                attrs: { disabled: true },
                class: { variation: false },
                on: { click: () => this.rewind() }
            }, '< Rewind'));
            this.createSolutionSan();
            const noRepeat = (f) => (e) => { if (!e.repeat)
                f(); };
            mousetrapExports.bind('left', noRepeat(() => this.rewind()));
            mousetrapExports.bind('right', noRepeat(() => this.forward()));
            mousetrapExports.bind('backspace', noRepeat(() => this.review(false)));
            mousetrapExports.bind('enter', noRepeat(() => this.review(true)));
            mousetrapExports.bind('a', () => document.querySelector('a.analyse').click());
        }
        setVariant(isInput) {
            const e = document.getElementById('variant');
            const variant = e.options[e.selectedIndex].value;
            const p = document.querySelector('.variant');
            console.log("Selected varient is:", variant, isInput);
            p.submit();
        }
        setAll() {
            const e = document.getElementById('all');
            const all = e.checked;
            const p = document.querySelector('.all');
            console.log("Selected all is:", all);
            p.submit();
        }
        updateGui(move) {
            this.chessground.set(this.cgConfig(move));
            this.setDests();
            const rewindEl = document.querySelector('.prev');
            rewindEl.classList.toggle('variation', this.isInVariation());
            rewindEl.disabled = this.moves.length === 0;
            const forwardEl = document.querySelector('.next');
            forwardEl.disabled = !this.canForward();
            const appendEl = document.querySelector('.append');
            appendEl.disabled = !this.canAppend();
            this.updateSolution();
        }
        skip() {
            window.location.assign(`${this.home}/skip?skipped=${this._id}`);
        }
        append() {
            this.solution = [...this.moves];
            this.solutionSan = [...this.movesSan];
            const rewindEl = document.querySelector('.prev');
            rewindEl.classList.toggle('variation', false);
            this.updateSolution();
        }
        doSendMove(move) {
            console.log(move);
            this.moves.push(move);
            const san = this.ffishBoard.sanMove(move, this.notationAsObject);
            this.movesSan.push(san);
            this.ffishBoard.push(move);
            this.updateGui(move);
        }
        rewind() {
            if (this.moves.length === 0)
                return;
            this.moves.pop();
            this.movesSan.pop();
            this.ffishBoard.pop();
            const move = this.moves[this.moves.length - 1];
            this.updateGui(move);
        }
        forward() {
            const move = uci2cg(this.solution[this.moves.length]);
            if (move) {
                this.doSendMove(move);
            }
        }
        review(approved) {
            const elApprove = document.querySelector('.approve');
            const elReject = document.querySelector('.reject');
            console.log('approved:', approved);
            if (approved) {
                elApprove.classList.toggle('active', true);
                elReject.classList.toggle('active', false);
            }
            else {
                elApprove.classList.toggle('active', false);
                elReject.classList.toggle('active', true);
            }
            console.log('review', approved);
            window.location.assign(`${this.home}/review/${this._id}?approved=${approved ? 1 : 0}&moves=${this.solution.join(',')}`);
        }
        readFile() {
            const fileEl = document.getElementById('puzzlefile');
            const files = fileEl.files;
            if (files) {
                const username = this.username;
                const fileReader = new FileReader();
                fileReader.readAsText(files[0]);
                fileReader.onload = function () {
                    if (fileReader.result) {
                        const allLines = fileReader.result.split('\n');
                        //const mateWithMissingFullMoves: string[] = [];
                        allLines.forEach((line) => {
                            if (line.trim()) {
                                const parts = line.trim().split(';');
                                const ops = Object.fromEntries(parts.slice(1).map(s => s.split(' ')));
                                //if (ops.eval.startsWith('#') && ops.pv.split(',').length !== parseInt(ops.eval.slice(1)) * 2 - 1) {
                                //    mateWithMissingFullMoves.push(`${parts[0]} moves: ${ops.pv}`);
                                //} else {
                                const puzzle = {
                                    _id: randomId(),
                                    fen: parts[0],
                                    variant: ops.variant,
                                    moves: ops.pv,
                                    eval: ops.eval,
                                    type: ops.type,
                                    uploadedBy: username,
                                };
                                if (ops.site) {
                                    if (ops.site.includes('pychess')) {
                                        puzzle.gameId = ops.site.slice(-8);
                                    }
                                    else {
                                        puzzle.site = ops.site;
                                    }
                                }
                                postPuzzle(puzzle);
                                //}
                            }
                        });
                        //if (mateWithMissingFullMoves.length > 0) alert(`Missing mate sequence in FEN:\n${mateWithMissingFullMoves.join('\n')}`);
                    }
                };
                fileReader.onerror = function () {
                    alert(fileReader.error);
                };
            }
        }
    }
    function postPuzzle(puzzle) {
        const XHR = new XMLHttpRequest();
        const FD = new FormData();
        Object.entries(puzzle).forEach(entry => {
            FD.append(entry[0], entry[1]);
        });
        XHR.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200) {
                const response = JSON.parse(this.responseText);
                if (response['error'] !== undefined) {
                    console.log(response['error']);
                }
            }
        };
        XHR.open("POST", "/puzzle", true);
        XHR.send(FD);
    }

    function runGround(vnode, data) {
        const el = vnode.elm;
        new PuzzleController(el, data);
    }
    function view (data) {
        const variant = VARIANTS[data.variant];
        const parts = data.fen.split(' ');
        const color = parts[1];
        const fullmove = parseInt(parts[parts.length - 1]);
        const ply = (fullmove - 1) * 2 + ((color === "b") ? 1 : 0);
        const fen = parts.join('_').replace(/\+/g, '.');
        let gameUrl;
        if (data.gameId) {
            gameUrl = `${data.pychessURL}/${data.gameId}?ply=${ply}`;
        }
        else {
            gameUrl = `${data.pychessURL}/analysis/${data.variant}?fen=${fen}`;
        }
        window.history.replaceState({}, '', `/puzzle/${data._id}`);
        return h('main', [
            h('section.top', [
                h('form.variant', { props: { method: "post", action: '/variant' } }, [
                    h('select#variant'),
                ]),
                h('form.all', { props: { method: "post", action: '/all' } }, [
                    h('label', { attrs: { for: 'all' } }, 'All'),
                    h('input#all'),
                ]),
                h('span.wrapper', [
                    h('label', { attrs: { for: 'puzzlefile' } }, 'Upload puzzle file: '),
                    h('input#puzzlefile'),
                ]),
                h('div#username', data.username),
                h('a', { attrs: { href: '/logout' } }, 'Log out'),
            ]),
            h('div.puzzle', [
                h('div.pocket-top', [
                    h('div.' + variant.piece + '.' + data.variant, [
                        h('div.cg-wrap.pocket', [
                            h('div#pocket0'),
                        ]),
                    ]),
                ]),
                h(`selection#mainboard.${variant.board}.${variant.piece}.${variant.boardMark}`, [
                    h('div.cg-wrap.' + variant.cg, { hook: { insert: (vnode) => runGround(vnode, data) } }),
                ]),
                h('div.pocket-bot', [
                    h('div.' + variant.piece + '.' + data.variant, [
                        h('div.cg-wrap.pocket', [
                            h('div#pocket1'),
                        ]),
                    ]),
                ]),
                h('div.puzzle-ui', [
                    h('div.puzzle-info', [
                        h('p.puzzle-info-title', `Candidate id: ${data._id}`),
                        h('p', ['Site: ',
                            ('site' in data) ? h('a.analyse', { attrs: { href: `${data.site}`, target: '_blank' } }, `${data.site}`) : '',
                        ]),
                        h('p', [
                            'From game: ',
                            h('a.analyse', { attrs: { href: gameUrl, target: '_blank' } }, ('gameId' in data) ? `${data.gameId}` : 'analysis'),
                        ]),
                        h('p', `Type: ${data.type}`),
                        h('p', `Eval: ${data.eval}`),
                        h('p.solution'),
                        h('p.moves'),
                    ]),
                    h('div.puzzle-review', [
                        h('button.reject'),
                        h('button.approve'),
                        h('button.append'),
                    ]),
                    h('div.puzzle-skip'),
                    h('div.puzzle-help', [
                        h('p', "Does the puzzle feel a bit off, computer-like, or frustrating? Just reject it. Too difficult and you're not sure if interesting? Skip it. Use arrow keys to replay, backspace/enter to review, a to analyse.")
                    ]),
                ])
            ]),
            h('div.replay', [
                h('button.prev'),
                h('button.next'),
            ]),
        ]);
    }

    function start(data) {
        console.log(data);
        const element = document.querySelector('main');
        patch(element, view(data));
    }

    exports.start = start;

    Object.defineProperty(exports, '__esModule', { value: true });

    return exports;

})({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
